<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gmagon Software Official Website - Fast, simple &amp; powerful solutions for everyone.</title>
  <subtitle>Gmagon Software Official Website - Fast, simple &amp; powerful solutions for everyone and more. Visit the site to learn, buy, and get support.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmagon.com/"/>
  <updated>2017-07-05T09:44:47.963Z</updated>
  <id>https://gmagon.com/</id>
  
  <author>
    <name>Gmagon Inc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Top Smartphones Under Php20k (Mid-2017)</title>
    <link href="https://gmagon.com/blog/2017/07/05/top-smartphones-under-php20k-mid-2017/"/>
    <id>https://gmagon.com/blog/2017/07/05/top-smartphones-under-php20k-mid-2017/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.963Z</updated>
    
    <content type="html"><![CDATA[<p>Over the last two days, we’ve shared our lists of the top smartphones of mid-2017 with price ranges of above Php30k and above Php20k. Today, we look at the mid-rangers. All of the phones mentioned in this list are no less than Php10k and no more than Php20k. Let’s get started.</p>
<p><img src="http://img2.tuicool.com/2UBbq2Z.png!web" alt=""></p>
<p>Author’s note: The smartphones listed below are those that have officially launched in the Philippines from January to June 2017. The list is arranged by price from highest to lowest.</p>
<h3 id="Samsung-Galaxy-A5-2017"><a href="#Samsung-Galaxy-A5-2017" class="headerlink" title="Samsung Galaxy A5 (2017)"></a><a href="http://www.yugatech.com/mobile/samsung-galaxy-a7-and-a5-2017-gets-ph-price/#OipiIkY4KAT5OsTq.97" target="_blank" rel="external">Samsung Galaxy A5 (2017)</a></h3><p>Early this year, Samsung launched their new A-series phones in the country, specifically the<strong>Galaxy A7 (2017)</strong>and the <strong>Galaxy A5 (2017)</strong>. While not much as changed here in size and form factor, under the hood, the new A5 sports a faster octa-core CPU, more RAM, and an improved camera.</p>
<p><img src="http://img0.tuicool.com/mAR7Fz7.jpg!web" alt=""></p>
<p>Samsung Galaxy A5 (2017) specs:</p>
<p>5.2-inch Super AMOLED display @ 1920 x 1080 pixels</p>
<p>1.9GHz octa-core processor</p>
<p>3GB RAM</p>
<p>32GB internal storage</p>
<p>Expandable via microSD card, up to 256GB</p>
<p>16-megapixel f/1.9 autofocus rear camera w/ LED flash</p>
<p>16-megapixel f/1.9 front-facing camera</p>
<p>4G LTE Cat.6</p>
<p>Wi-Fi 802.11 a/b/g/n/ac</p>
<p>Bluetooth v 4.2</p>
<p>NFC</p>
<p>ANT+</p>
<p>USB Type-C</p>
<p>Fingerprint sensor</p>
<p>IP68 water-resistant</p>
<p>3000mAh battery w/ fast charging</p>
<p>Android 6.0 Marshmallow</p>
<p>Price: Php19,990</p>
<h3 id="Vivo-V5-Plus"><a href="#Vivo-V5-Plus" class="headerlink" title="Vivo V5 Plus"></a><a href="http://www.yugatech.com/mobile/vivo-v5-plus-review/#ZVowhOAh803kUjTe.97" target="_blank" rel="external">Vivo V5 Plus</a></h3><p>Packed with 20MP and 8MP dual front cameras, this is truly a self-portrait centered smartphone. That is not to say that the great cameras are all it has going for it, as it has a beefy octa-core CPU, 4GB of RAM, 64GB internal storage, and above average battery life.</p>
<p><img src="http://img1.tuicool.com/zE7JVf7.jpg!web" alt=""></p>
<p>Vivo V5 Plus specs:</p>
<p>5.5-inch Full HD IPS display, 401ppi</p>
<p>2.5D Corning Gorilla Glass 5</p>
<p>2.5GHz Qualcomm Snapdragon 625 octa-core processor</p>
<p>Adreno 506 GPU</p>
<p>4GB RAM</p>
<p>64GB internal storage</p>
<p>16-megapixel f/2.0 autofocus rear camera w/ LED flash</p>
<p>20MP f/2.0 + 8MP front-facing camera</p>
<p>Dual SIM 4G LTE</p>
<p>Wi-Fi 802.11ac</p>
<p>Bluetooth 4.0</p>
<p>GPS w/ A-GPS, GLONASS, BeiDou</p>
<p>Fingerprint scanner</p>
<p>AK4376 Hi-Fi chip</p>
<p>USB OTG</p>
<p>Gyroscope, E-compass</p>
<p>3,160mAh non-removable battery w/ fast charging</p>
<p>Android 6.0 Marshmallow w/ Funtouch OS 3.0</p>
<p>152.58 x 74.00 x 7.26 mm</p>
<p>158.6 g</p>
<p>Price: Php19,990</p>
<h3 id="Nokia-6"><a href="#Nokia-6" class="headerlink" title="Nokia 6"></a><a href="http://www.yugatech.com/mobile/nokia-6-review/#wMIFjfO1FwWJE07K.97" target="_blank" rel="external">Nokia 6</a></h3><p>With Nokia finally launching a proper full-featured Android smartphone this year, it has proven to be worth the wait. The<strong>Nokia 6</strong>wasunveiled at the Mobile World Congress 2017, and has a beautiful design, respectable specs, and Android 7.0 Nougat out of the box.</p>
<p><img src="http://img2.tuicool.com/qEfUnu7.jpg!web" alt=""></p>
<p>Nokia 6 specs:</p>
<p>5.5-inch IPS LCD @ 1920 x 1080 pixels, 401ppi</p>
<p>2.5D Corning Gorilla Glass 3</p>
<p>Qualcomm Snapdragon 430 1.4GHz octa-core processor</p>
<p>Adreno 505 graphics</p>
<p>4GB RAM</p>
<p>64GB internal storage</p>
<p>Expandable via microSD, up to 128GB (Uses SIM 2)</p>
<p>16MP PDAF rear camera w/ dual-tone flash</p>
<p>8MP front-facing camera</p>
<p>4G LTE</p>
<p>Dual-SIM</p>
<p>WiFi 802.11ac</p>
<p>Bluetooth 4.1</p>
<p>GPS, A-GPS, GLONASS</p>
<p>Fingerprint scanner</p>
<p>Gyroscope sensor</p>
<p>USB OTG support</p>
<p>3,000mAh Li-Ion battery</p>
<p>Fast charging support</p>
<p>Android 7.0 Nougat</p>
<p>154 x 75.8 x 7.85 mm</p>
<p>169 g</p>
<p>Price: Php18,590</p>
<h3 id="OPPO-F3"><a href="#OPPO-F3" class="headerlink" title="OPPO F3"></a><a href="http://www.yugatech.com/mobile/oppo-f3-review/#0rjRZbUDeAZoF8UM.97" target="_blank" rel="external">OPPO F3</a></h3><p>Another phone for those who value high-quality selfies, here we have the more affordable offering to the OPPO F3 Plus. Like the V5 Plus mentioned earlier, it sports dual front cameras with wide and narrow fields of view.</p>
<p><img src="http://img0.tuicool.com/RBviaim.jpg!web" alt=""></p>
<p>OPPO F3 specs:</p>
<p>5.5-inch In-Cell IPS LCD display @ 1920 x 1080 pixels, 401ppi</p>
<p>Corning Gorilla Glass 5</p>
<p>MediaTek MT6750T 1.5GHz octa-core CPU</p>
<p>Mali T860 GPU</p>
<p>4GB RAM</p>
<p>64GB internal storage</p>
<p>Expandable via microSD, up to 128GB</p>
<p>13MP PDAF rear camera w/ LED flash</p>
<p>16MP + 8MP 120-degree wide-angle front cameras</p>
<p>Dual SIM (Nano + Nano)</p>
<p>4G LTE</p>
<p>WiFi 802.11a/b/g/n</p>
<p>Bluetooth 4.1</p>
<p>GPS w/ a-GPS</p>
<p>Fingerprint scanner</p>
<p>Android 6.0 Marshmallow with ColorOS 3.1</p>
<p>3200mAh non-removable battery</p>
<p>75.2 x 153.3 x 7.3 mm</p>
<p>153 g</p>
<p>Price: Php16,990</p>
<h3 id="Xiaomi-Mi-Max-2"><a href="#Xiaomi-Mi-Max-2" class="headerlink" title="Xiaomi Mi Max 2"></a><a href="http://www.yugatech.com/mobile/xiaomi-mi-max-2-first-impressions/#l5u7KzvxtHXXjRp4.97" target="_blank" rel="external">Xiaomi Mi Max 2</a></h3><p>With a 6.44-inch display, this is definitely the biggest phone on this list. Great battery life, solid specs, decent cameras, and Android 7.0 Nougat support are what this over-sized smartphone has going for it.</p>
<p><img src="http://img2.tuicool.com/MRN7fmj.jpg!web" alt=""></p>
<p>Xiaomi Mi Max 2 specs:</p>
<p>6.44-inch IPS LCD @ 1920 x 1080 pixels, 342ppi</p>
<p>Qualcomm Snapdragon 625 octa-core CPU</p>
<p>Adreno 506 GPU</p>
<p>4GB RAM</p>
<p>64GB/128GB internal storage</p>
<p>Expandable via microSD, up to 128GB (Uses SIM 2)</p>
<p>12MP Sony IMX386 PDAF rear camera w/ LED flash</p>
<p>5MP wide-angle front camera</p>
<p>Dual SIM (Nano)</p>
<p>LTE-A</p>
<p>Wi-Fi 802.11ac, dual-band</p>
<p>Bluetooth 4.2</p>
<p>GPS w/ A-GPS, GLONASS</p>
<p>NFC</p>
<p>IR blaster</p>
<p>Fingerprint scanner</p>
<p>Gyroscope</p>
<p>Stereo speakers</p>
<p>5300mAh non-removable battery w/ Quick Charge 3.0</p>
<p>Android 7.0 Nougat w/ MIUI 8</p>
<p>Price: Php15,500 (Widget City)</p>
<h3 id="Sony-Xperia-XA1"><a href="#Sony-Xperia-XA1" class="headerlink" title="Sony Xperia XA1"></a><a href="http://www.yugatech.com/mobile/sony-xperia-xa1-first-impressions/#z1IXWx5eYlA5C7D5.97" target="_blank" rel="external">Sony Xperia XA1</a></h3><p>One of Sony’s newest mid-range phones is the XA1 Ultra. It has the classic Xperia look: Flat sides and sharp corners and features a “borderless edge-to-edge” HD display. The phone also boasts Image Enhance Technology and packs a great punch in its camera.</p>
<p><img src="http://img1.tuicool.com/INZN3uR.jpg!web" alt=""></p>
<p>Sony Xperia XA1 specs:</p>
<p>5-inch HD display w/ Image Enhance Technology</p>
<p>2.3GHz MediaTek Helio P20 octa-core CPU</p>
<p>Mali T880 MP2 900MHz GPU</p>
<p>3GB RAM</p>
<p>32GB storage</p>
<p>microSD up to 256GB</p>
<p>23MP 1/2.3-inch Exmor RS rear camera, Hybrid AF, SteadyShot, LED flash</p>
<p>8MP 1/4-inch Exmor R AF front camera, SteadyShot</p>
<p>4G LTE</p>
<p>WiFi</p>
<p>Bluetooth</p>
<p>GPS, A-GPS</p>
<p>Android 7.0 Nougat</p>
<p>2,300mAh battery w/ Qnovo Adaptive Charging</p>
<p>145 x 67 x 8mm</p>
<p>143 g</p>
<p>Price: Php15,500 (Widget City)</p>
<h3 id="Huawei-GR5-2017"><a href="#Huawei-GR5-2017" class="headerlink" title="Huawei GR5 (2017)"></a><a href="http://www.yugatech.com/mobile/video-huawei-gr5-2017-review/#PGz2DVJwD9URISyl.97" target="_blank" rel="external">Huawei GR5 (2017)</a></h3><p>A refresh of last year’s model, the current model packs an improved design and hardware configuration. It has taken a page from the P9 series with its dual-camera setup.</p>
<p><img src="http://img0.tuicool.com/FbYB3mN.jpg!web" alt=""></p>
<p>Huawei GR5 specs:</p>
<p>5.5-inch IPS LCD display @ 1920 x 1080 pixels</p>
<p>HiSilicon Kirin 655 2.1GHz octa-core processor</p>
<p>4 x ARM Cortex A53 @ 2.1GHz</p>
<p>4 x ARM Cortex A53 @ 1.7 GHz</p>
<p>Mali-T830 MP2</p>
<p>3GB RAM</p>
<p>32GB internal storage</p>
<p>Up to 128GB via microSD</p>
<p>Dual rear cameras (12MP/2MP)</p>
<p>8MP wide-angle front camera</p>
<p>Wi-Fi 802.11b/g/n</p>
<p>Bluetooth 4.1</p>
<p>4G LTE</p>
<p>Fingerprint scanner</p>
<p>Android 6.0 Marshmallow with EMUI 4.1</p>
<p>3,340mAh Li-Ion battery</p>
<p>Price: Php13,990</p>
<p>With that, it’s a wrap. Did we miss anything? Please do let us know in the comments down below.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/fMzqMnQ" target="_blank" rel="external">http://www.yugatech.com/mobile/top-smartphones-under-php20k-mid-2017/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Over the last two days, we’ve shared our lists of the top smartphones of mid-2017 with price ranges of above Php30k and above Php20k. Tod
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&#39;Baby Driver&#39; is an ode to iPod nostalgia</title>
    <link href="https://gmagon.com/blog/2017/07/05/baby-driver-is-an-ode-to-ipod-nostalgia/"/>
    <id>https://gmagon.com/blog/2017/07/05/baby-driver-is-an-ode-to-ipod-nostalgia/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.957Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s.aolcdn.com/hss/storage/midas/91351aa33a3d30a39ff662e8b8b68e9/205442176/Baby%2BDriver%2B1.jpg" alt=""></p>
<p>Tristar Pictures</p>
<p>It took a while to get going, but it’s safe to say we’re living in a golden age of digital music. Terrible compression is a thing of the past, and the rise of streaming services like Spotify and Apple Music give us instant access to almost anything we’d want to hear. But while we’ve gained so much, there’s also a sense that we’ve lost something. Sharing a playlist isn’t the same as burning a CD for your sweetheart, or going even further back, manually dubbing a mixtape. As our music has become less physical, so has our attachment to it.</p>
<p>That’s something that struck me while watching<em>Baby Driver</em>, director Edgar Wright’s new mashup of car chases, heist films and excellent tunes. Its lead character, Baby (Ansel Elgort), is perpetually connected to a pair of headphones, experiencing life as if it’s a never-ending music video. But his earbuds aren’t attached to a smartphone; they’re plugged into one of his many iPods. He has a box full of them, each with their own colors and ornamentations. Basically, a different iPod for every mood.</p>
<p>While they’re filled with digital files, the iPods also serve as a physical connection to all of his music. The film opens with Baby in a getaway car, cool as a cucumber while wearing white earbuds, launching into a jam out session with_Bellbottoms_by The Jon Spencer Blues Explosion. That song also serves as the backdrop for the film’s electric opening chase, where you can almost feel the iPod’s tiny mechanical hard drive (remember those?) racing alongside him.</p>
<p>As someone who<a href="https://www.engadget.com/2015/09/17/gone-too-zune/" target="_blank" rel="external">reminisces fondly about my Zune HD</a>,<a href="https://en.wikipedia.org/wiki/Rio_Karma" target="_blank" rel="external">Rio Karma</a>,<a href="https://www.cnet.com/products/toshiba-gigabeat-s/review/" target="_blank" rel="external">Toshiba Gigabeat</a>and countless other players of varying quality, Baby’s connection to his iPods struck a chord. With older media players, there was a sense of physicality, before cloud syncing made it a cinch to keep track of all your music. If you somehow managed to hit a double whammy of bad luck and lost both your player and your computer’s hard drive, you were out of luck.</p>
<p>These days, you can hop between phones within minutes, porting over your entire library without a sweat with iTunes, Google Play and apps like Spotify. You don’t even have to wait for your music to download; you can just stream it all from the server heavens.</p>
<p>Baby’s iPod addiction seems fitting today, at a time when we’re all plugged into headphones most of the day. Just look up from your phone once in a while and you’ll see it: a crowd of people, each in their own world with their own private soundtracks. In<em>Baby Driver</em>, that soundtrack underscores everything, be it a chase, a shootout or even a stroll for coffee. The film also takes pains to choreograph the tunes with what’s happening on screen (there’s a shootout set to_Tequila_that’s pitch perfect). Baby also uses music as a form of therapy, due to a tinnitus condition that resulted from a childhood car accident. It’s a way to drown out the “hum in the drum,” as Kevin Spacey’s criminal mastermind, Doc, tells us.</p>
<p><img src="https://o.aolcdn.com/images/dims?resize=980%2C640&amp;quality=100&amp;image_uri=https%3A%2F%2Fs.aolcdn.com%2Fhss%2Fstorage%2Fmidas%2F898e51608e44a0022256740610336ea2%2F205434882%2FBaby%2BDriver%2B2.jpg&amp;client=cbc79c14efcebee57402&amp;signature=dc771c585960952fdbbeeb4c05d41fa744c718ed" alt=""></p>
<p>Tristar Pictures</p>
<p>Since the film is practically an action musical, it’s no surprise that Baby’s relationship with everyone is centered around tunes. He strikes up a conversation with his sweetheart, Debora (Lily James), by comparing the songs that feature both of their names. He forms a kinship with Jon Hamm’s bank robber as they share earbuds, reminiscing about their go-to tracks during a getaway. (Baby’s is_Queen’s_Brighton Rock, which should come as no surprise to fans of Edgar Wright’s<em>Shaun of the Dead</em>.) Meanwhile, Jamie Foxx’s Bats, who’s particularly unstable, hates the idea of listening to music during robberies. That’s a major red flag that tells us not to trust him.</p>
<p>Baby’s connection to music extends beyond Apple’s devices: his apartment practically has wall-to-wall records. He also spends his time mixing sound clips with a unique rig,<a href="http://www.gq.com/story/kid-koala-baby-driver" target="_blank" rel="external">developed by Kid Koala</a>, which consists of a magnetic card reader, a distorted Buddhist meditation box and a pen controlled device. There’s even an E-mu Emulator II, for good measure. In true, anachronistic music nerd fashion, Baby also records all of his mixes to cassette tape.</p>
<p>Since he’s a collector of old-school musical gear (although not many CDs, from what I could gather), Baby’s iPod obsession seems almost peculiar. But I suppose he’s just like plenty of other hip music nerds. We live in a world where the digital and analog still coexist – record sales, paradoxically, are actually on the rise, along with streaming music sales. Baby just latches onto the things he can actually touch and feel.</p>
<p>And, after all, who wants to deal with their favorite track buffering when you’re in the middle of a life or death car chase?</p>
<p>Source: <a href="https://www.engadget.com/2017/07/03/baby-driver-ipod-nostalgia/" target="_blank" rel="external">https://www.engadget.com/2017/07/03/baby-driver-ipod-nostalgia/</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s.aolcdn.com/hss/storage/midas/91351aa33a3d30a39ff662e8b8b68e9/205442176/Baby%2BDriver%2B1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Tristar 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AutoWiring Spring Beans Into Classes Not Managed by Spring</title>
    <link href="https://gmagon.com/blog/2017/07/05/autowiring-spring-beans-into-classes-not-managed-by-spring/"/>
    <id>https://gmagon.com/blog/2017/07/05/autowiring-spring-beans-into-classes-not-managed-by-spring/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.954Z</updated>
    
    <content type="html"><![CDATA[<p>In my previous article<a href="https://dzone.com/articles/jpa-auditing-automatically-persisting-audit-logs" target="_blank" rel="external">JPA Auditing: Persisting Audit Logs Automatically using EntityListeners</a>, I discussed how we can use Spring Data JPA automate auditing and automatically create audit logs or history records and update CreatedBy, CreatedDate, LastModifiedBy, LastModifiedDate properties.</p>
<p>So in order to save history records for our File entity, we were trying to autowire EntityManager inside our FileEntityListener class before we learned that we could not do that.</p>
<p>We cannot inject any Spring-managed bean in the EntityListener because EntityListeners are instantiated by JPA before Spring injects anything into it. EntityListeners are not managed by Spring so Spring cannot inject any Spring-managed bean, e.g. EntityManager in the EntityListeners.</p>
<p>And this is not just the case with EntityListeners, you cannot autowire any Spring-managed bean into another class (i.e. utility classes) not managed by Spring.</p>
<p>Because this is a very common problem that can also arise with other classes, I tried to come out with a common solution that will not just solve this problem but will also help us get Spring-managed beans in other places.</p>
<p><img src="http://img1.tuicool.com/zQV3IzI.png!web" alt=""></p>
<p>So, have created a utility class to fetch any bean according to our requirements.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">public</div><div class="line">class</div><div class="line">BeanUtil</div><div class="line">implements</div><div class="line">ApplicationContextAware</div><div class="line">&#123;</div><div class="line"></div><div class="line">    </div><div class="line">private</div><div class="line">static</div><div class="line"> ApplicationContext context;</div><div class="line"></div><div class="line">    </div><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">setApplicationContext</div><div class="line">(ApplicationContext applicationContext)</div><div class="line">throws</div><div class="line"> BeansException </div><div class="line">&#123;</div><div class="line">        context = applicationContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">public</div><div class="line">static</div><div class="line">&lt;</div><div class="line">T</div><div class="line">&gt;</div><div class="line">T </div><div class="line">getBean</div><div class="line">(Class</div><div class="line">&lt;</div><div class="line">T</div><div class="line">&gt;</div><div class="line"> beanClass)</div><div class="line">&#123;</div><div class="line">        </div><div class="line">return</div><div class="line"> context.getBean(beanClass);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now, to get any bean in a class, we will just need to call BeanUtil.getBean(YourClass.class) and pass the class type to it. Then, we will get the bean.</p>
<p>For example, in our case, we were trying to get the EntityManager bean inside FileEntityListener. We can simply do that by writing BeanUtil.getBean(EntityManager.class).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line"> FileEntityListener &#123;</div><div class="line"></div><div class="line">    </div><div class="line">private</div><div class="line">void</div><div class="line">perform</div><div class="line">(File target, Action action)</div><div class="line">&#123;</div><div class="line">        EntityManager entityManager = BeanUtil.getBean(EntityManager.</div><div class="line">class</div><div class="line">);</div><div class="line">        entityManager.persist(</div><div class="line">new</div><div class="line"> FileHistory(target, action));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can find the complete code in this<a href="https://github.com/njnareshjoshi/articles/tree/master/spring-data-jpa-auditing" target="_blank" rel="external">GitHub Repository, </a>and please feel free to provide your valuable feedback.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/zINby2B" target="_blank" rel="external">https://dzone.com/articles/autowiring-spring-beans-into-classes-not-managed-by-spring</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In my previous article&lt;a href=&quot;https://dzone.com/articles/jpa-auditing-automatically-persisting-audit-logs&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>After Nonstop Games closed, its employees founded Mighty Bear Games; today it raised US$775K</title>
    <link href="https://gmagon.com/blog/2017/07/05/after-nonstop-games-closed-its-employees-founded-mighty-bear-games-today-it-raised-us775k/"/>
    <id>https://gmagon.com/blog/2017/07/05/after-nonstop-games-closed-its-employees-founded-mighty-bear-games-today-it-raised-us775k/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mighty-Bear-Games-will-focus-on-developing-mobile-app-games"><a href="#Mighty-Bear-Games-will-focus-on-developing-mobile-app-games" class="headerlink" title="Mighty Bear Games will focus on developing mobile app games"></a>Mighty Bear Games will focus on developing mobile app games</h2><p><img src="http://img0.tuicool.com/y2uMrqj.png!web" alt=""></p>
<p>Nonstop Games was a Singapore-based mobile games studio run by Finnish developers. Their hit game was strategy title Heroes of Honor.</p>
<p>In 2014, it was acquired by Candy Crush maker King forabout US$16 million. Two years later, Nonstop Games shuttered.</p>
<p>But the journey for its employees did not end there. They pressed on, scouring the game development landscape for new compatriots to join their next adventure. Along the way, they recruited talents from renowned gaming studios such as Ubisoft, EA and LucasArts.</p>
<p>With renewed vigour in their hearts and a hardy band of developers to boot, the Nonstop Games alumni roared back with a spanking new enterprise.</p>
<p>They called it Mighty Bear Games.</p>
<p>And today, Mighty Bear raised US$775,000 in a round led by Global Founders Capital, the venture capital arm of Rocket Internet.</p>
<p>Mighty Bear will use the newly-raised financing to develop its new mobile MMORPG (Massive Multiplayer Online Roleplaying Game). Details of the game have not been disclosed.</p>
<p>It is interesting to note that despite receiving offers from the US and Europe — two markets with long history of producing top rated games — the Nonstop Games alumni chose to, once again, base their gaming studio in Singapore.</p>
<p>“One of the interesting developments we’ve seen is that Singapore-based studios are starting to gain traction with their own IP,” says co-founder and CEO Simon Davis, in an interview with<strong>e27</strong>.</p>
<p>“We see a trend developing where game development studios in Singapore are now being founded by guys like us with 5, or even 10+ years experience working in big AAA studios,” he adds. “This wouldn’t have been possible if the government hadn’t made such an effort bringing in top multi-national studios over the past few years — many of us on the team, including myself, directly benefited from that.”</p>
<h2 id="Keeping-an-eye-on-gaming-trends"><a href="#Keeping-an-eye-on-gaming-trends" class="headerlink" title="Keeping an eye on gaming trends"></a><strong>Keeping an eye on gaming trends</strong></h2><p>While Davis says Mighty Bear is platform-agnostic, it will still be focussing on making mobile games. But he does not rule out building games for consoles or desktops in the future.</p>
<p>The studio will also target the multiplayer gaming market.</p>
<p>Also Read:<a href="https://e27.co/curious-south-korea-gaming-culture-closer-look-popularity-esports-reveals-trends-20170525/" target="_blank" rel="external">Curious about the South Korea gaming culture? A closer look at the popularity of esports reveals some trends</a></p>
<p>“We love playing multiplayer games, and we feel there’s a huge gap in the market for online multiplayer games which are not completely skewed toward your typical hardcore gamer,” says Davis.</p>
<p>“This is an area that’s really interesting, because the challenge is to create games which have a competitive element, but are still accessible to people who may not consider themselves hardcore gamers.”</p>
<p>The Mighty Bear team may eat and breathe games, but they are not just button-mashing geeks; as a creative force, they also take inspiration from all other forms of art (yes, gaming is an art too).</p>
<p>“I studied music so that makes approaching the creative process a bit different. We also read a lot which is a great way to get new ideas and approaches. Finally, we watch a lot of movies together – movie nights and ‘Popcorn Fridays’ are two Mighty Bear traditions,” says Davis.</p>
<p>“Other than that we’re all hardcore gamers. We have a weekly ‘gaming club’ where we all sit down and compare notes on a pre-agreed game and discuss what we liked and what we didn’t about it.”</p>
<p>So what are Davis’s all-time favourite games?</p>
<p>“I’d say that Super Mario 64 was the first game that really blew me away, Street Fighter II was the first game that got me hooked on multiplayer. For scale and awe it might be The Legend of Zelda: The Breath of the Wild or Shadow of the Colossus. Candy Crush has the perfect puzzle combination of skill, luck, and amazing player feedback, and lately. I’ve been absolutely loving Brawl Stars on mobile.”</p>
<p>The mobile app market is a lucrative industry, it is projected to hit US$189 billion with mobile gaming accounting for more than<a href="https://venturebeat.com/2016/11/02/mobile-app-market-to-grow-270-to-189-billion-by-2020-with-games-accounting-for-55/" target="_blank" rel="external">half the share.</a></p>
<p>In Singapore’s backyard, China’s mobile games market collected<a href="http://www.gamesindustry.biz/articles/2016-05-03-chinese-mobile-market-is-now-the-most-valuable-in-the-world" target="_blank" rel="external">US$7 billion in revenue in 2015</a>. This figure is set to continue to grow exponentially as mobile usage increases and more games are developed.</p>
<p>If Mighty Bear can claw out its own niche in this increasingly saturated space, the sweet dew of revenue will surely come forth easily.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/eERRZ3R" target="_blank" rel="external">http://e27.co/nonstop-games-closed-employees-founded-mighty-bear-games-today-raised-us775k-20170704/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Mighty-Bear-Games-will-focus-on-developing-mobile-app-games&quot;&gt;&lt;a href=&quot;#Mighty-Bear-Games-will-focus-on-developing-mobile-app-games&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Is Freelancing Your Next UX Career Move?</title>
    <link href="https://gmagon.com/blog/2017/07/05/is-freelancing-your-next-ux-career-move/"/>
    <id>https://gmagon.com/blog/2017/07/05/is-freelancing-your-next-ux-career-move/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.960Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been working in for UX for about a decade and freelanced on and off for about five years. Last year, I started consulting full time again, abandoning the 9-5 life and making my main source of employment a series of projects from different clients.</p>
<p>Since then, I’ve had countless conversations with other UX professionals who are considering moving to freelancing as their next career step.</p>
<p>They usually say they’re looking for freedom, more money, the ability to work on more interesting problems or learn new things – or even just the chance to work in their pyjamas regularly. Since I started consulting, I’ve expanded my focus into more strategy and product work across a wide variety of industries, and have met all kinds of interesting, smart colleagues.</p>
<p>While I wouldn’t change a thing about my situation, I’m always cautious about encouraging others to jump into the freelance world, because it’s definitely not for everyone. Here are some things I’ve learned along the way to consider before you quit your day job.</p>
<h3 id="Freelancing-pros-and-cons"><a href="#Freelancing-pros-and-cons" class="headerlink" title="Freelancing pros and cons"></a>Freelancing pros and cons</h3><p>Yes, it’s true that I spend most days in yoga pants, travel frequently, and work on some pretty cool projects. But consulting isn’t all sunshine and rainbows. There are many things that are great about consulting, some things that aren’t so great, and some things that just depend on the day.</p>
<p><img src="http://img2.tuicool.com/mqEZzeZ.png!web" alt=""></p>
<p>Freelancing pro: setting up your own home office. Photo by<a href="http://unsplash.com/photos/RcdV8rnXSeE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Vadim Sherbakov</a>on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>.</p>
<p>Schedule: One of the things I love most about consulting is being in total control of my schedule. There’s no expectation that I’m at my desk from 9 am to 5 pm. Sometimes I get in a zone and finish an entire report in one very long day and take the next morning off to let ideas percolate. Of course I have meetings and deadlines, but I can usually finagle things to work well for my clients and myself.</p>
<p>On the flip side, juggling your schedule can be difficult. I’m quite disciplined about getting things done, but I’ve never quite figured out a way to create a consistent schedule. Sometimes I’ve had priority work on different projects collide at the same time or I’ve said yes to a few too many things and ended up working crazy hours to get everything done. Such is a consultant’s life.</p>
<p>Money: I absolutely find that I make more money freelancing than when I worked in-house, even in leadership roles. I’m still experimenting with how I bill, but I tend to use value-based pricing for entire projects rather than charge hourly. I often ask clients to pay me 50% of the total upfront and the rest upon project completion, which can make managing money tricky, especially when you’re used to a consistent paycheck.</p>
<p>You also have to know that you’ll never be able to collect money as though you’re billing 40 hours a week, every week. You have to account for supplies, tool costs, benefits, and set aside time for administrative tasks like sending invoices, business development, and, of course, downtime. No one gives you sick time or vacation days when you freelance.</p>
<p>Inevitably, I’ve also run into time periods where I don’t have anything billable booked. An open schedule can be scary, so I use this time to do things like reach out to colleagues or potential clients, write articles, research new tools, try to learn something new, or catch up on administrative work. One of the benefits of this downtime is the space to learn, exploring the vast array of available online courses or just experimenting with a new method or tool.</p>
<p>Work environment: I mostly work from home, which means I wear what I like, can pet my dog throughout the day, don’t contend with traffic, and for better or worse, have all day access to my kitchen. All great, but it also means that sometimes the only person I see in the flesh each day is my husband.</p>
<p>I have to make an extra concerted effort to hang out with colleagues, so I’ve become more active in my local meetups and groups (shout out to<a href="https://www.meetup.com/Ladies-that-UX-Durham/" target="_blank" rel="external">Ladies that UX Durham</a>– love yall!) I also found I need to be more social during the week, even if that means going to a fitness class instead of biking solo or talking on the phone while I shop.</p>
<h3 id="What-services-will-you-provide"><a href="#What-services-will-you-provide" class="headerlink" title="What services will you provide?"></a>What services will you provide?</h3><p>I’ve been focused on research and strategy for most of my career. I won’t rehash the “<a href="http://community.uxmastery.com/t/forced-to-become-a-unicorn-has-that-happened-to-you/783/11" target="_blank" rel="external">Should I be a unicorn</a>?” or “<a href="http://uxmastery.com/ux-designers-do-not-need-to-code/" target="_blank" rel="external">Do designers need to code</a>?” debates, but I’ll admit that when I first starting freelancing, I was worried I wasn’t going to be able to find enough work without doing visual work. Turns out, I was totally wrong. Phew!</p>
<p><img src="http://img1.tuicool.com/BzMjMbA.jpg!web" alt=""></p>
<p>Don’t worry, you don’t need to be a unicorn to be a freelance UXer.</p>
<p>You absolutely don’t need to be a unicorn or try to tackle projects that aren’t your speciality. But it helps to have a broad set of experience and at least one area of deep expertise you can market and use to define your services. You can match what you’re good at and what you like to define the kind of projects you target, the projects you’re OK with taking, and what you will certainly turn down.</p>
<p>Clearly<a href="http://uxmastery.com/build-your-ux-personal-brand/" target="_blank" rel="external">defining your services and interests</a>are important because it tells other people what to turn to you for. if I know someone has great interaction design skills and tonnes of experience with financial products, I’ll suggest them anytime I see a project like that. If someone tells me they’ll do anything that comes their way, they probably won’t come to mind for any projects I know about.</p>
<h3 id="How-will-you-find-clients"><a href="#How-will-you-find-clients" class="headerlink" title="How will you find clients?"></a>How will you find clients?</h3><p>This is a question that I get asked time after time, and the answer is incredibly simple in concept but hard in practice:<strong>treat your clients and colleagues as you would users and provide them with a good experience working with you</strong>.</p>
<p>More specifically, you have to do good work and other people have to be willing to talk about it. This can either mean that your clients are pleased with your work and will re-hire you or tell other potential clients, or that your peers in UX like your work and can refer you when they need help or can’t take something on. It really is true that a huge amount of success in consulting is based on networking and who you know, but that only works to your advantage if the people you know have had a good experience working with you. Right now, every single one of my clients is someone I’ve previously worked with or have gotten a good reference.</p>
<p>This is where, once again, it helps to have a clearly defined, slightly unique set of skills or interests. There are tonnes of researchers and tonnes of designers, but if you’re known as a researcher who loves qualitative work and medical products, people will think of you whenever they come across that kind of project. Just be sure that you don’t define yourself too narrowly.</p>
<p>You can also use job boards to identify potential projects or try recruiting agencies, but I haven’t found either as fruitful as having my name passed on from a previous contact. More on finding freelance UX work<a href="https://www.linkedin.com/pulse/single-best-way-get-freelance-ux-work-amanda-stockwell?trk=v-feed&amp;lipi=urn%3Ali%3Apage%3Ad_flagship3_feed%3BWB86zkUbaQbxQN8f0Iqf%2Bw%3D%3D" target="_blank" rel="external">here</a>.</p>
<h3 id="Are-you-really-suited-for-all-that"><a href="#Are-you-really-suited-for-all-that" class="headerlink" title="Are you really suited for all that?"></a>Are you really suited for all that?</h3><p>Even if all the potential pros sound amazing to you and you have the skills and network to pull off freelancing, take a moment to reflect on your personality and soft skills.</p>
<p>Are you detailed, organised, and willing to juggle many different client requests and manage your own schedule? Are you a natural risk-taker who can cope well with slow periods or lack of viable work? Are you assertive enough to negotiate terms for yourself? Do you mind working by yourself a lot?</p>
<p>There’s a lot to think about before leaving the security of a full-time job. I love freelancing, but it’s worth carefully considering the pros and cons and your skillset and personality before taking the leap. Best wishes for whichever path you choose! </p>
<p>Do you have experience or tips on freelancing for UX professionals? Leave a comment on the blog or in the forums! </p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/3qIJryE" target="_blank" rel="external">http://uxmastery.com/freelancing-ux-career/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been working in for UX for about a decade and freelanced on and off for about five years. Last year, I started consulting full time 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Researchers Crack 1024-bit RSA Encryption in GnuPG Crypto Library</title>
    <link href="https://gmagon.com/blog/2017/07/04/researchers-crack-1024-bit-rsa-encryption-in-gnupg-crypto-library/"/>
    <id>https://gmagon.com/blog/2017/07/04/researchers-crack-1024-bit-rsa-encryption-in-gnupg-crypto-library/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.988Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img0.tuicool.com/Qn67Bja.png!web" alt=""></p>
<p>Security boffins have discovered a critical vulnerability in a GnuPG cryptographic library that allowed the researchers to completely break RSA-1024 and successfully extract the secret RSA key to decrypt data.</p>
<p>Gnu Privacy Guard (GnuPG or GPG) is popular open source encryption software used by many operating systems from Linux and FreeBSD to Windows and macOS X.</p>
<p>It’s the same software used by the former NSA contractor and whistleblower Edward Snowden to keep his communication secure from law enforcement.</p>
<p>The vulnerability, labeled<a href="https://lists.gnupg.org/pipermail/gnupg-announce/2017q2/000408.html" target="_blank" rel="external">CVE-2017-7526</a>, resides in the<strong>Libgcrypt</strong>cryptographic library used by GnuPG, which is prone to local FLUSH+RELOAD side-channel attack.</p>
<p>A team of researchers — from Technical University of Eindhoven, the University of Illinois, the University of Pennsylvania, the University of Maryland, and the University of Adelaide — found that the “left-to-right sliding window” method used by the libgcrypt library for carrying out the mathematics of cryptography leaks significantly more information about exponent bits than for right-to-left, allowing full RSA key recovery.</p>
<p>“In this paper, we demonstrate a complete break of RSA-1024 as implemented in Libgcrypt. Our attack makes essential use of the fact that Libgcrypt uses the left-to-right method for computing the sliding-window expansion,” the researchers wrote in the<a href="https://eprint.iacr.org/2017/627.pdf" target="_blank" rel="external">research paper</a>.</p>
<p>“The pattern of squarings and multiplications in left-to-right sliding windows leaks significantly more information about the exponent than right-to-left. We show how to extend the Heninger-Shacham algorithm for partial key reconstruction to make use of this information and obtain a very efficient full key recovery for RSA-1024.”</p>
<p>L3 Cache Side-Channel Attack requires an attacker to run arbitrary software on the hardware where the private RSA key is used.</p>
<p>The attack allows an attacker to extract the secret crypto key from a system by analyzing the pattern of memory utilization or the electromagnetic outputs of the device that are emitted during the decryption process.</p>
<p>“Thus in practice, there are easier ways to access the private keys than to mount this side-channel attack. However, on boxes with virtual machines, this attack may be used by one VM to steal private keys from another VM,” Libgcrypt<a href="https://lists.gnupg.org/pipermail/gnupg-announce/2017q2/000408.html" target="_blank" rel="external">advisory</a>reads.</p>
<p>Researchers have also provided evidence that the same side channel attack also works against RSA-2048, which require moderately more computation than RSA-1024.</p>
<p>The research paper titled, ‘Sliding right into disaster: Left-to-right sliding windows leak,’ was authored by David J. Bernstein, Joachim Breitner, Daniel Genkin, Leon Groot Bruinderink, Nadia Heninger, Christine van Vredendaal, Tanja Lange and Yuval Yarom.</p>
<p>Libgcrypt has released a fix for the issue in Libgcrypt version 1.7.8.<a href="https://www.debian.org/security/2017/dsa-3901" target="_blank" rel="external">Debian</a>and<a href="https://www.ubuntuupdates.org/package/core/zesty/main/updates/libgcrypt20-dev" target="_blank" rel="external">Ubuntu</a>have already updated their library with the latest version of Libgcrypt.</p>
<p>So, you are strongly advised to check if your Linux distribution is running the latest version of the Libgcrypt library.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/2uUvMfZ" target="_blank" rel="external">http://thehackernews.com/2017/07/gnupg-libgcrypt-rsa-encryption.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/Qn67Bja.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Security boffins have discovered a critical vulnerability in a GnuPG cr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Delaware Passes Bill Recognizing Stock Trading via Blockchain Technology</title>
    <link href="https://gmagon.com/blog/2017/07/04/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/"/>
    <id>https://gmagon.com/blog/2017/07/04/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.983Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img1.tuicool.com/NVfMnuv.jpg!web" alt=""></p>
<p>Delaware has passed a bill that legally recognizes the trading of stocks using blockchain technology. Although the state has sought to promote itself as a bastion for blockchain investment, the bill is extremely limited in its scope – leading many to view Delaware’s government as attempting to cash in on bitcoin’s recent boom.</p>
<p><em><strong>Also Read: </strong></em><a href="https://news.bitcoin.com/bitwage-launches-uk-bitcoin-payroll-services/" target="_blank" rel="external"><em>Bitwage Officially Launches UK Bitcoin Payroll Services</em></a></p>
<h2 id="Delaware’s-Blockchain-Bill-Has-Been-Championed-by-Blockchain-Start-Up-Symbiont"><a href="#Delaware’s-Blockchain-Bill-Has-Been-Championed-by-Blockchain-Start-Up-Symbiont" class="headerlink" title="Delaware’s Blockchain Bill Has Been Championed by Blockchain Start-Up Symbiont"></a>Delaware’s Blockchain Bill Has Been Championed by Blockchain Start-Up Symbiont</h2><p>Recent<a href="http://www.coindesk.com/delaware-house-passes-historic-blockchain-regulation/" target="_blank" rel="external">reports</a>have announced the near unanimous passing of a<a href="http://www.coindesk.com/delaware-blockchain-stock-bill-likely-to-advance-in-house-vote-today/" target="_blank" rel="external">bill</a>in the US state of Delaware that will explicitly recognize the right to trade stocks using a blockchain. The chair of the Delaware bar association’s corporate law section describing the vote as “keep[ing] Delaware at the forefront of corporate law and in the lead in terms of enabling the use of ‘distributed ledger shares’.” The bill is expected to be signed into law by Delaware’s governor, John Carney, before the end of July.</p>
<p><img src="http://img0.tuicool.com/UZ7nueb.png!web" alt=""></p>
<p>Delaware’s blockchain bill has been championed by blockchain start-up Symbiont, who has<a href="https://bitcoinmagazine.com/articles/private-capital-market-ecosystems-meet-blockchain/" target="_blank" rel="external">partnered</a>with Hong Kong-based Privatemarket.io to build an “alternative investment marketplace for closed-end funds” that is built using Symbiont’s smart-contract software. The bill was developed under close legal guidance from Marco Santori of Cooley LLP and Symbiont’s Caitlin Long – suggesting that Symbiont will be among the early high-profile blockchain businesses seeking to operate within Delaware. When announcing the partnership with Privatemarket to offer stock trading via blockchain technology, Symbiont stated “We see blockchain technology having a significant positive impact on the investment world, and it starts with the fact that the foundational document for any investment — the registration of a company — will likely soon be possible to do on a blockchain in Delaware”.</p>
<p>The Bill Draws Attention to the Absence of Legal Consensus Pertaining to Blockchain Technology</p>
<p>Although the passing of the bill is positive step toward permissive bitcoin regulation, many see the bill having been custom tailored to the desires of Symbiont’s legal team – with the recognition of stock trading via blockchain comprises a very limited step toward blockchain regulation – especially when contrasted with recent moves by Japan, South Korea and Australia in recognizing bitcoin as a legal form of payment.</p>
<p><img src="http://img1.tuicool.com/2aUfUzb.jpg!web" alt=""></p>
<p>The passing of the bill draws attention to the absence of clear legal definitions and apparatus pertaining to blockchain technology. The lack of federal legal consensus regarding basic bitcoin and blockchain technology suggests that some theproblems within the regulatory framework dealing with cannabis-based businesses could potentially emerge within bitcoin, such as overlapping or contradicting federal laws. It is entirely possible that particular states may seek to become early bastions of blockchain investment, seeking to capitalize on a nascent booming industry in the same fashion as Colorado or Seattle with regards to the cannabis industry.</p>
<p>Although the positive ramifications from further government embracement of bitcoin and blockchain technology are undeniable, the risk of hastily rushed state legislations running afoul of future federal regulations is very real – especially given the absence of legal consensus on the definition of fundamental terminology such as ‘blockchain’. In the case of Delaware, it is entirely possible that future federal laws may not recognize stock trading via blockchain technology, creating potential future legal and logistical challenges for businesses that seek to build their operations according to the laws of a single state.</p>
<p>Do you think that Delaware passing a bill recognizing stock trading via blockchain technology is a significant step toward cryptocurrency regulations? Share your thoughts in the comments section below!</p>
<p>Images courtesy of shutterstock</p>
<p>Need to calculate your bitcoin holdings? Check our <a href="http://tools.bitcoin.com/" target="_blank" rel="external">tools</a> section.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/YbYVryF" target="_blank" rel="external">https://news.bitcoin.com/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/NVfMnuv.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Delaware has passed a bill that legally recognizes the trading of stock
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Real World React apps and their open source codebases for developers to learn from</title>
    <link href="https://gmagon.com/blog/2017/07/04/real-world-react-apps-and-their-open-source-codebases-for-developers-to-learn-from/"/>
    <id>https://gmagon.com/blog/2017/07/04/real-world-react-apps-and-their-open-source-codebases-for-developers-to-learn-from/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Real-World-React"><a href="#Real-World-React" class="headerlink" title="Real World React"></a>Real World React</h2><p>Real World React apps and their open source codebases for developers to learn from</p>
<p>Learn from React apps written by experienced developers.</p>
<p>You’ll find the source code for the Real World React apps in the<a href="https://github.com/jeromedalbert/real-world-react/blob/master/apps" target="_blank" rel="external"><code>apps/</code></a>subdirectory.</p>
<p>Thank you to every developer who has worked on a project this repo links to, your work is helping developers learn React.</p>
<h2 id="How-to-install-on-your-computer"><a href="#How-to-install-on-your-computer" class="headerlink" title="How to install on your computer"></a>How to install on your computer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># Clone this git repo:</div><div class="line">git</div><div class="line"> clone git</div><div class="line">@github</div><div class="line">.com:jeromedalbert/real-world-react.git</div><div class="line"></div><div class="line">cd real-world-react/</div><div class="line"></div><div class="line"></div><div class="line"># The apps are linked to as git submodules.</div><div class="line"># This will take some time...</div><div class="line"></div><div class="line">git submodule update --init</div></pre></td></tr></table></figure>
<h2 id="Information-for-Contributors"><a href="#Information-for-Contributors" class="headerlink" title="Information for Contributors"></a>Information for Contributors</h2><h4 id="Is-your-app-the-right-fit"><a href="#Is-your-app-the-right-fit" class="headerlink" title="Is your app the right fit?"></a>Is your app the right fit?</h4><ul>
<li>A real world app should ideally be publicly accessible and used by real people in a production environment. As such, boilerplate, starter kits, libraries, and small demo/example projects are not really a good fit.</li>
<li>Ideally most of the code should be frontend-oriented, in order to focus on React. Small backends may be OK, but should constitute the minority of the codebase.</li>
</ul>
<p>That being said, don’t hesitate to submit a pull request if you meet the criteria!</p>
<h4 id="How-to-add-a-Real-World-App"><a href="#How-to-add-a-Real-World-App" class="headerlink" title="How to add a Real World App"></a>How to add a Real World App</h4><p>Given a GitHub repo for an app<code>githubuser/foo</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Inside the project root:</div><div class="line">git</div><div class="line"> submodule add -b master git</div><div class="line">@github</div><div class="line">.com:githubuser/foo.git apps/foo</div></pre></td></tr></table></figure>
<h4 id="Updating-the-apps-submodules-to-latest"><a href="#Updating-the-apps-submodules-to-latest" class="headerlink" title="Updating the apps submodules to latest"></a>Updating the apps submodules to latest</h4><p>The apps in<code>apps/</code>are git submodules. Git submodules are locked to a revision and don’t stay in sync with the latest revision.</p>
<p>To update the revisions, run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># This will take some time:</div><div class="line">git</div><div class="line"> submodule foreach git pull origin master</div></pre></td></tr></table></figure>
<h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul>
<li>Jerome Dalbert<br><a href="http://jeromedalbert.com/" target="_blank" rel="external">http://jeromedalbert.com</a></li>
<li>Contributions are welcome, fork the GitHub repo, make your changes, then submit your pull request! Reach out if you’d like some help.</li>
</ul>
<p>Source: <a href="http://www.tuicool.com/articles/hit/3QjiYbZ" target="_blank" rel="external">https://github.com/jeromedalbert/real-world-react</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Real-World-React&quot;&gt;&lt;a href=&quot;#Real-World-React&quot; class=&quot;headerlink&quot; title=&quot;Real World React&quot;&gt;&lt;/a&gt;Real World React&lt;/h2&gt;&lt;p&gt;Real World Rea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Customize Color with Styled Google Maps in Android</title>
    <link href="https://gmagon.com/blog/2017/07/04/customize-color-with-styled-google-maps-in-android/"/>
    <id>https://gmagon.com/blog/2017/07/04/customize-color-with-styled-google-maps-in-android/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.981Z</updated>
    
    <content type="html"><![CDATA[<p>You can now style and customize your Google Maps colors and more. In this Android tutorial, let’s see how we can do that in our apps.</p>
<p>Google Maps has added this ability across all platforms. This means regardless of whether you use Google Maps for Web, iOS or Android, you’ll be able to style them.</p>
<p>By default, Google Maps looks like this.</p>
<p><img src="http://img0.tuicool.com/7zuI7fm.png!web" alt=""></p>
<p>Default Google Maps</p>
<p>We’re all used to this and by no means am I saying it looks bad. But say I want to display a map that corresponds to my brand color scheme.</p>
<p><img src="http://img2.tuicool.com/6nqUbeJ.png!web" alt=""></p>
<p><a href="https://dribbble.com/shots/3136953-Directions-Module" target="_blank" rel="external">Directions Module by David Rodriguez</a></p>
<p>Now imagine if my only option was to display the default Google maps, with it’s default colors. It wouldn’t go well with the design, would it? The color scheme of the map won’t be in harmony with the rest of the design. In other words, it sticks out, like a sore thumb.</p>
<p>In such scenarios, we need a map that reflects our brand theme. Our brand color palette. This wasn’t possible before.</p>
<p><img src="http://img0.tuicool.com/FZnENfz.png!web" alt=""></p>
<p>But now, Google allows Styled maps. Using this, we can customize the map to look the way we want. This includes modifying colors, with a very high degree of control.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>We’ll start by creating a new Android Studio project. Thankfully, we have pre-defined templates (for Activities) to start with.<a href="http://blog.iamsuleiman.com/image-gallery-app-android-studio-1-4-glide/" target="_blank" rel="external">Activity templates were introduced in Android Studio 1.4</a>.</p>
<p>So when you create a new project, chose the ‘Google<em>Maps Activity</em>’ template.</p>
<p><img src="http://img0.tuicool.com/Eb2i63U.png!web" alt=""></p>
<p>Android Studio – Activity Templates</p>
<p>Here are the project settings:</p>
<ul>
<li>minSdkVersion – 14</li>
<li>targetSdkVersion – 26</li>
</ul>
<p>Thanks to this, we don’t have to spend a lot of time configuring the Maps SDK and whatnot. I remember the first time I tried using Maps in Android (back in 2012). It took me well over an hour to simply display a Map!</p>
<p>But you don’t have to worry anymore as we’ve come a long way from that!</p>
<h3 id="Configuring-Google-Maps"><a href="#Configuring-Google-Maps" class="headerlink" title="Configuring Google Maps"></a>Configuring Google Maps</h3><p>Once the project has loaded, Android Studio will open the<strong>google_maps_api.xml</strong>file by default.</p>
<p><img src="http://img2.tuicool.com/Ava6Rra.png!web" alt=""></p>
<p>Auto-generated maps_api.xml</p>
<p>You’ll notice there is one step to follow to get your Google Maps API Key. Trust me, this is nothing compared to the amount of steps earlier!</p>
<p>So follow the comments on the file. Don’t worry, I’ll still walk you through them. but you’ll have to grab the URL and keys from the google_maps_api.xml file’s comments.</p>
<h4 id="1-Go-to-the-URL-provided-–console-developers-google-com"><a href="#1-Go-to-the-URL-provided-–console-developers-google-com" class="headerlink" title="1. Go to the URL provided –console.developers.google.com"></a>1. Go to the URL provided –<em>console.developers.google.com</em></h4><p>You’ll land on a page like this.</p>
<p><img src="http://img2.tuicool.com/iyInaqe.png!web" alt=""></p>
<p>Create a new project in Google Developer Console</p>
<p>Select ‘Create a Project’ from the dropdown and then hit the Continue button.</p>
<h4 id="2-Create-Google-Maps-API-Key"><a href="#2-Create-Google-Maps-API-Key" class="headerlink" title="2. Create Google Maps API Key"></a>2. Create Google Maps API Key</h4><p>In the next step (screen), click the ‘Create API Key’ button</p>
<p><img src="http://img1.tuicool.com/qa2am26.png!web" alt=""></p>
<p>Creating new API key…</p>
<h4 id="3-Get-your-generated-API-Key"><a href="#3-Get-your-generated-API-Key" class="headerlink" title="3. Get your generated API Key"></a>3. Get your generated API Key</h4><p>Google now generated your Maps API key. So copy it and paste it in your XML file for the string name ‘google_maps_key’. Replace the ‘YOUR_KEY_HERE’ with your actual API key!</p>
<p>You can optionally set up API Key restrictions if you want (see screenshot above). It’s fairly simple. Click restrictions and you’ll get a screen like this.</p>
<p><img src="http://img2.tuicool.com/bYjABrQ.png!web" alt=""></p>
<p>Generated API key restrictions</p>
<p>Choose ‘Key restriction’ as ‘Android Apps’ and hit Save button. Note that you don’t have to bother about the Package name and SHA-1 certificate fingerprint. You’ll realize that the fingerprint is same as the one in your Android Studio project comments.</p>
<p>In other words, Google took care of that for you too. Sweet? Now let’s move on.</p>
<p>With our API key in place, we’re finally ready to use Google Maps.</p>
<p>But before we get to styling, let’s check if Maps itself works. So run your app and check it out.</p>
<p>It’s always better to test every step of the way. Otherwise, you’ll never know what went wrong where.</p>
<p><img src="http://img1.tuicool.com/FbAniib.png!web" alt=""></p>
<p>NOTE:</p>
<p>Google Maps needs Google Play Services to work. So it’s safe to always run the app on a real device. Or, you can configure and use an AVD that includes Google APIs with Play Services.</p>
<p>Here’s how Google Maps loads on my phone.</p>
<p><img src="http://img1.tuicool.com/3QJrquQ.png!web" alt=""></p>
<p>Default Google Maps – Android</p>
<p>It works just fine. So let’s finally move on to styling it.</p>
<h4 id="Using-Styled-Maps"><a href="#Using-Styled-Maps" class="headerlink" title="Using Styled Maps"></a>Using Styled Maps</h4><p>Google Maps can load styling options via two different formats:</p>
<h4 id="1-–-JSON-file"><a href="#1-–-JSON-file" class="headerlink" title="1 – JSON file"></a>1 – JSON file</h4><p>You load the JSON file in the onMapReady() method.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123;</div><div class="line">    </div><div class="line">try</div><div class="line"> &#123; </div><div class="line">        </div><div class="line">// Customise map styling via JSON file </div><div class="line">boolean</div><div class="line"> success = googleMap.setMapStyle( MapStyleOptions.loadRawResourceStyle( </div><div class="line">this</div><div class="line">, R.raw.style_map_json));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>String resource Using a string resource works in a similar way.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123; </div><div class="line">    </div><div class="line">try</div><div class="line"> &#123; </div><div class="line">        </div><div class="line">// Customise map styling via String resource </div><div class="line">boolean</div><div class="line"> success = googleMap.setMapStyle(</div><div class="line">new</div><div class="line"> MapStyleOptions(getResources() .getString(R.string.style_json)));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Now we know how to load our Map styles. But how do we actually create our style? Let’s look at that next.</p>
<h2 id="Creating-a-Color-Theme-for-Google-Maps"><a href="#Creating-a-Color-Theme-for-Google-Maps" class="headerlink" title="Creating a Color Theme for Google Maps"></a>Creating a Color Theme for Google Maps</h2><p>I’ll put it bluntly. There are two ways you can go about it.</p>
<p>One, write a JSON file. Manually writing every property (do you even know them?).</p>
<p>Or two, using the Map Styling Wizard.</p>
<p>In other words, save yourself time and frustration. Go with the second option. Use the Styling Wizard. It’s a no-brainer. Seriously!</p>
<h3 id="Google-Maps-Styling-Wizard"><a href="#Google-Maps-Styling-Wizard" class="headerlink" title="Google Maps Styling Wizard"></a>Google Maps Styling Wizard</h3><p><img src="http://img0.tuicool.com/If2AZ37.png!web" alt=""></p>
<p>Welcome to Google Maps Styling Wizard</p>
<p>For this part, you just play around with the Styling Wizard. Adjust the density of features depending on how much detail you want on the map. Then select a basic, pre-defined theme to work with. Finally, you can click on ‘MORE OPTIONS’ to alter the properties of each Map object. Trust me, there’s a LOT of things you can customize that it’s easy to get lost.</p>
<p><img src="http://img1.tuicool.com/fqAVJr2.png!web" alt=""></p>
<p>Abundant customization options in Map Styling Wizard</p>
<p>I’ve chosen very light, pastel-like colors for the map. These are colors mainly for the terrain, parks, water and highways.</p>
<p>Once you’re done, click the FINISH button. Next, copy the JSON from the popup that appears.</p>
<p><img src="http://img1.tuicool.com/bi2mIfJ.png!web" alt=""></p>
<p>Auto-generated JSON from Styling Wizard</p>
<p>Head over to your Android Studio project and create a new file under<em>Project/app/src/main/res/raw/<strong>maps.style.json</strong></em>.</p>
<p>This JSON file is where we’ll paste the JSON copied from the Maps Style Wizard. Now all that’s left is to tell Google Maps to load its style from this JSON file.</p>
<p>Remember we spoke about how to do this in the<code>onMapReady()</code>method?</p>
<p>Let me remind you again. Now that we have our JSON file ready, we can call it in like this.</p>
<p>Open<strong>MapsActivity.java</strong>and go to the<code>onMapReady()</code>method. The template has this method already implemented for you.</p>
<p>So with the default template existing, here’s how to load the Styled Map.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123; </div><div class="line">    mMap = googleMap;</div><div class="line">    </div><div class="line">try</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">boolean</div><div class="line"> success = mMap.setMapStyle(</div><div class="line">                MapStyleOptions.loadRawResourceStyle(</div><div class="line">                        </div><div class="line">this</div><div class="line">, R.raw.maps_style));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It’s actually just one line of code. The try catch block just makes it look verbose.</p>
<p><img src="http://img1.tuicool.com/uABbAfF.png!web" alt=""></p>
<p>With Styled Maps now loaded, run your app and check it.</p>
<h4 id="Styled-Maps-–-Output"><a href="#Styled-Maps-–-Output" class="headerlink" title="Styled Maps – Output"></a>Styled Maps – Output</h4><p>Based on the colors I chose against a Grey- themed Google Map, mine looks like this.</p>
<p><img src="http://img0.tuicool.com/jmaAb2B.png!web" alt=""></p>
<p>My custom styled Google Maps</p>
<p>I changed parks to purple color. Just so I visually know that Styled maps are working. I know it’s an ugly map. But I’m sure you can do better!</p>
<h4 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a>Wrap Up</h4><p>In this Android tutorial, we saw how to Style our default-looking Google Maps.</p>
<p>First, we created an Android Studio project, using the Maps Activity template. We then created an API key to use with Maps.</p>
<p>Next, we used the Maps Styling Wizard to configure Google Maps to our liking. Then, we pasted the generated JSON over to our project. Finally, we told Google Maps to load its styling from that JSON file.</p>
<h4 id="Where-to-from-here"><a href="#Where-to-from-here" class="headerlink" title="Where to from here?"></a>Where to from here?</h4><p>That’s all there is to it! With Styled maps, it is now possible to customize Google Maps to be more relevant to your app color-scheme. No more out-of-place looking Maps. If used properly they can now blend well with your UI designs.</p>
<p>How are you going to customize your map? I’m very interested to see what you’ll come up with. Show me in the comments below.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/b2Mf2qJ" target="_blank" rel="external">http://blog.iamsuleiman.com/styled-google-maps-customize-color-android/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You can now style and customize your Google Maps colors and more. In this Android tutorial, let’s see how we can do that in our apps.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Apple, Google and other Nasdaq Stocks Swing Wildly in After-Hours Trading</title>
    <link href="https://gmagon.com/blog/2017/07/04/apple-google-and-other-nasdaq-stocks-swing-wildly-in-after-hours-trading/"/>
    <id>https://gmagon.com/blog/2017/07/04/apple-google-and-other-nasdaq-stocks-swing-wildly-in-after-hours-trading/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.978Z</updated>
    
    <content type="html"><![CDATA[<p>The prices of shares in some of the world’s biggest companies seemed to alternately plummet or soar in after-hours trading on Nasdaq Inc.’s flagship exchange.</p>
<p>The likes ofand Microsoft Corp.’s shares appeared to fall by more than 50 percent, while’s stock was at one stage trading 348 percent higher, data from post-market trading on the Nasdaq Stock Market showed on Monday. That gave the iPhone maker a theoretical market capitalization of $3.4 trillion, compared to the $751 billion at which it was valued when trading closed on Friday.</p>
<p>The swings came on a day that the U.S. stock market closed early at 1 p.m., on the eve of the July 4 holiday. In another unusual detail, pricing data showed more than a dozen securities including Apple, Microsoft and Nasdaq’s own company stock at the same price, $123.47. It wasn’t immediately clear if shares changed hands at those prices.</p>
<p>The apparent swings triggered trading halts in some securities, according to automatically generated messages. The halts are a mechanism exchanges use to limit the impact of particularly volatile sessions. A system status alert on Nasdaq’ssaid that systems were operating normally at 8:23 p.m. ET. After-market hours on Nasdaq typically last from 4 p.m. to 8:00 p.m.</p>
<p>Will Briganti, a spokesman for Nasdaq, was unable to immediately comment on the situation.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/fI3Ane2" target="_blank" rel="external">http://www.bloomberg.com/news/articles/2017-07-04/nasdaq-stocks-show-exaggerated-movements-in-after-hours-trading</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The prices of shares in some of the world’s biggest companies seemed to alternately plummet or soar in after-hours trading on Nasdaq Inc.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 4 News Roundup June</title>
    <link href="https://gmagon.com/blog/2017/07/03/angular-4-news-roundup-june/"/>
    <id>https://gmagon.com/blog/2017/07/03/angular-4-news-roundup-june/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.808Z</updated>
    
    <content type="html"><![CDATA[<p>WRITTEN BY<a href="https://twitter.com/jsdiaries" target="_blank" rel="external">GARETH DUNNE @JSDIARIES</a></p>
<p>ng-June</p>
<p>June has come and gone and it has brought with it a steady month of Angular 4 news. There is a chance that you could have missed a change to key features or components so I’ve listed some of the main snippets of news that may have passed you by.</p>
<p>Although there isn’t much reading material specifically for<strong>Angular 4</strong>I recommend having a look at<strong>ng-book: The Complete Guide to Angular 4</strong><a href="http://geni.us/LCTQUAa" target="_blank" rel="external">here</a>.</p>
<p>Its updated with Angular 4 practices and is one of the few books doing so.</p>
<p>Angular 4.2</p>
<p>The most notable piece of Angular news this month is the release of<strong>Angular 4.2</strong>. This is a small update and will not break your current Angular projects via Semantic Versioning which I covered in a previous posthere.</p>
<p>All changes pertaining to the release are mentioned on the official blog here. So what are main highlights we should take our of this update?</p>
<p>Well, the changes to allow the creation of reusable animations using the<code>animation()</code>function enables our animations to become more modular.</p>
<p>I’ve listed a very similar example as the docs here for reference.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var fadeAnimation = animation([</div><div class="line">  style(&#123; </div><div class="line">opacity:</div><div class="line">&apos;&#123;&#123; start &#125;&#125;&apos;</div><div class="line"> &#125;),</div><div class="line">  animate(</div><div class="line">&apos;&#123;&#123; time &#125;&#125;&apos;</div><div class="line">,</div><div class="line">    style(&#123; </div><div class="line">opacity:</div><div class="line">&apos;&#123;&#123; end &#125;&#125;&apos;</div><div class="line">))</div><div class="line">], &#123; </div><div class="line">params:</div><div class="line"> &#123; </div><div class="line">time:</div><div class="line">&apos;1000ms&apos;</div><div class="line">, </div><div class="line">start:</div><div class="line">0</div><div class="line">, </div><div class="line">end:</div><div class="line">1</div><div class="line"> &#125;&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">useAnimation</div><div class="line">(fadeAnimation, &#123;</div><div class="line">  </div><div class="line">params</div><div class="line">: &#123;</div><div class="line">    </div><div class="line">time</div><div class="line">: </div><div class="line">&apos;2s&apos;</div><div class="line">,</div><div class="line">    </div><div class="line">start</div><div class="line">: </div><div class="line">1</div><div class="line">,</div><div class="line">    </div><div class="line">end</div><div class="line">: </div><div class="line">0</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>As you can see we assign our animations to a variable, specify its animation properties and then invoke it using the<code>useAnimation</code>function</p>
<p>Typescript 2.4</p>
<p>Typescript has also updated to a new release, bringing with it dynamic import expressions as well as Safer callback parameter checking. There could be few posts written about these changes so I’ll let the official blog post do the talking<a href="https://blogs.msdn.microsoft.com/typescript/2017/06/12/announcing-typescript-2-4-rc/" target="_blank" rel="external">here</a>.</p>
<p>I’ll just note that the dynamic imports feature in particular is a fantastic addition in this new release. It allows an even deeper layer of lazy loading and enables Webpack to split your bundles even further to only load a particular asset required in a function.</p>
<p>Angular IO</p>
<p><img src="http://img0.tuicool.com/Ar6RRbB.png!web" alt=""></p>
<p>angularIO</p>
<p>In order to coincide with Angular 4 features and benefits, the official<a href="https://angular.io/" target="_blank" rel="external">angular.io</a>website has now been converted to a full scale web application. It is now much faster and has increased its performance significantly.</p>
<p>There is also a satisfying element of practice what you preach and the Angular team have clearly rebuilt the website from the ground up with performance in mind.</p>
<p>It may seems like a minor detail but searching through the documentation has now become a better user experience which I’m sure is appreciated throughout the Angular community especially for those browsing on mobile devices.</p>
<p>These were the main notable Angular events and features this month. The framework is progressively evolving every month and if theres enough newsworthy item in July I’ll be sure to do a similar roundup.</p>
<p>Still looking to upgrade your AngularJS app to Angular 2? Check out this tutorial by Toptal<a href="https://www.toptal.com/angular-js/angular-2-upgrading-from-1-5" target="_blank" rel="external">here</a>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/JNZ3qeb" target="_blank" rel="external">http://jsdiaries.com/2017/07/03/angular-4-news-roundup-june/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WRITTEN BY&lt;a href=&quot;https://twitter.com/jsdiaries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GARETH DUNNE @JSDIARIES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ng-June&lt;/p&gt;
&lt;p&gt;June h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Better Software Design with Clean Architecture</title>
    <link href="https://gmagon.com/blog/2017/07/03/better-software-design-with-clean-architecture/"/>
    <id>https://gmagon.com/blog/2017/07/03/better-software-design-with-clean-architecture/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img1.tuicool.com/vqIfaeY.png!web" alt=""></p>
<p>Have you ever produced code that:</p>
<ul>
<li>was bug laden</li>
<li>was painful to debug or enhance with new features</li>
<li>was hard/impossible to test without things like a database or web server</li>
<li>had presentation logic mixed with business logic or business logic mixed in with data access logic (sql)</li>
<li>was hard for other developers to understand because it did not clearly express its intent or purpose within the application it was written for</li>
</ul>
<p>I know I have. Over time I learned about the various<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="external">Gang of Four</a>patterns and made a conscious effort to keep the<a href="https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29" target="_blank" rel="external">SOLID</a>principles running on a background thread in my mind as I wrote code. While these ideas certainly helped mitigate the problems listed above, they didn’t eliminate them. When writing web or desktop software using MVC or MVVM I still found some of the same old symptoms showing up in my projects. Things like business logic leaking into controllers, entity models being used all over the place for different purposes and large regions of the code that had no unit test coverage because they had some sort of direct dependency on a database or http client.</p>
<p>Get notified on new posts</p>
<p>Straight from me, no spam, no bullshit. Frequent, helpful, email-only content.</p>
<h2 id="The-answer"><a href="#The-answer" class="headerlink" title="The answer"></a>The answer</h2><p>One day, a colleague sent around<a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">this link</a>introducing<strong>The Clean Architecture</strong>by Uncle Bob. It resonated with me instantly as it presented a solution for the same problems I was seeing. The best part, there’s nothing mystical or complicated about Clean Architecture - it is a relatively simple and practical architecture template that can be applied to many application domains if you choose to follow just a few of its basic rules.</p>
<h2 id="How-Clean-Architecture-works"><a href="#How-Clean-Architecture-works" class="headerlink" title="How Clean Architecture works"></a>How Clean Architecture works</h2><p>The key rule behind Clean Architecture is:<strong>The Dependency Rule</strong>. The gist of this is simply that dependencies are encapsulated in each “ring” of the architecture model and these dependencies can only point inward.</p>
<p><img src="http://img1.tuicool.com/U3MBbem.jpg!web" alt=""></p>
<p>Clean Architecture keeps details like web frameworks and databases in the outer layers while important business rules and policies are housed in the inner circles and have no knowledge of anything outside of themselves. Considering this, you can start to see how it achieves a very_clean_separation of concerns. By ensuring your business rules and core domain logic in the inner circles are completely devoid of any external dependencies or 3rd party libraries means they must be expressed using pure C# POCO classes which makes testing them much easier.</p>
<p>In fact your business rules simply don’t know anything at all about the outside world.</p>
<p>There are a few other important concepts that I’m going to highlight along the way with an example below but if you’re interested in just the theory please go check out<a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">Uncle Bob’s original post introducing Clean Architecture</a>.</p>
<h3 id="Implementing-the-“Course-Registration”-use-case"><a href="#Implementing-the-“Course-Registration”-use-case" class="headerlink" title="Implementing the “Course Registration” use case"></a>Implementing the “Course Registration” use case</h3><p>Let’s see how this works using a real-world use case. For the folks doing agile scrum, I realize a use case is not the most fashionable way to describe a requirement. But for this post, it’s perfect because I’d like to show how all the details of the use case can be modeled within clean architecture. A user story would simply be too vague.</p>
<p>I’ve typed out the entire use case here for reference so you don’t need to digest the whole thing right now. We’ll cover its aspects below in detail as we walk through implementing it using clean architecture.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Title</th>
<th style="text-align:left">Register for courses</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Description</td>
<td style="text-align:left">Student accesses the system and views the courses currently available for him to register. Then he selects the courses and registers for them.</td>
</tr>
<tr>
<td style="text-align:left">Primary Actor</td>
<td style="text-align:left">Student</td>
</tr>
<tr>
<td style="text-align:left">Preconditions</td>
<td style="text-align:left">Student is logged into systemStudent has not previously enrolled or registeredStudent cannot register within 5 days of course start date</td>
</tr>
<tr>
<td style="text-align:left">Postconditions</td>
<td style="text-align:left">Student is registered for courses</td>
</tr>
<tr>
<td style="text-align:left">Main Success Scenario</td>
<td style="text-align:left">Student selects “Register New Courses” from the menu.System displays list of courses available for registering.Student selects one or more courses he wants to register for.Student clicks “Submit” button.System registers student for the selected courses and displays a confirmation message.</td>
</tr>
<tr>
<td style="text-align:left">Extensions</td>
<td style="text-align:left">(2a) No courses are available for this student.System displays error message saying no courses are available, and provides the reason &amp; how to rectify if possible.Student either backs out of this use case, or tries again after rectifying the cause.(5a) Some courses could not be registered.System displays message showing which courses were registered, and which courses were not registered along with a reason for each failure.(5b) None of the courses could be registered.System displays message saying none of the courses could be registered, along with a reason for each failure.</td>
</tr>
</tbody>
</table>
<p>This is a simple use case allowing a student to register for one or more classes and then returning either a success or error result to notify her of the outcome. We’ll use clean architecture to write this use case in a fashion that meets the goals and avoids the problems I mentioned in the intro.</p>
<h3 id="Creating-the-Entities"><a href="#Creating-the-Entities" class="headerlink" title="Creating the Entities"></a>Creating the Entities</h3><p>Entities are the heart of clean architecture and contain any_enterprise-wide_business rules and logic. Now, you might not be working in the context of an_enterprise_and that’s perfectly fine. If you’re writing a standalone application Uncle Bob suggests simply referring to these as Business Objects. The key is that they contain rules that are not<em>application specific</em>- so basically any global or shareable logic that could be reused in other applications should be encapsulated in an entity.</p>
<p>Inspecting our use case there are 2 entities we need:<code>Student</code>and<code>Course</code>.</p>
<p>Using aTDD approach I wrote a couple of tests and just enough code in the<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/Entities/Student.cs" target="_blank" rel="external">Student entity class</a>to get them passing.</p>
<p>The<code>RegisterForCourse()</code>method implements 2 rules from our use case.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">Student</div><div class="line"> : </div><div class="line">EntityBase</div><div class="line"></div><div class="line">&#123;</div><div class="line">   </div><div class="line">public</div><div class="line">string</div><div class="line"> FirstName &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line">string</div><div class="line"> LastName &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line"> IList</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"> RegisteredCourses &#123; </div><div class="line">get</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line"> IList</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"> EnrolledCourses &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line"></div><div class="line">   </div><div class="line">public</div><div class="line">Student</div><div class="line">(</div><div class="line">)</div><div class="line">   </div><div class="line">&#123;</div><div class="line">      RegisteredCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line">();</div><div class="line">      EnrolledCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line">();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">public</div><div class="line">bool</div><div class="line">RegisterForCourse</div><div class="line">(</div><div class="line">Course course</div><div class="line">)</div><div class="line">   </div><div class="line">&#123;</div><div class="line">      </div><div class="line">// student has not previously enrolled</div><div class="line">if</div><div class="line"> (EnrolledCourses.Any(ec =</div><div class="line">&gt;</div><div class="line"> ec.Code == course.Code)) </div><div class="line">return</div><div class="line">false</div><div class="line">;</div><div class="line"></div><div class="line">      </div><div class="line">// registration cannot occur with 5 days of course start date</div><div class="line">if</div><div class="line"> (DateTime.UtcNow </div><div class="line">&gt;</div><div class="line"> course.StartDate.AddDays(</div><div class="line">-5</div><div class="line">)) </div><div class="line">return</div><div class="line">false</div><div class="line">;</div><div class="line"></div><div class="line">      RegisteredCourses.Add(course);</div><div class="line">      </div><div class="line">return</div><div class="line">true</div><div class="line">;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">[Fact]</div><div class="line"></div><div class="line">public</div><div class="line">void</div><div class="line">CannotRegisterForCourseWithin5DaysOfStartDate</div><div class="line">(</div><div class="line">)</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">// arrange</div><div class="line">var</div><div class="line"> student = </div><div class="line">new</div><div class="line"> Student();</div><div class="line">  </div><div class="line">var</div><div class="line"> course = </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Biology II&quot;</div><div class="line">, StartDate = DateTime.UtcNow.AddDays(+</div><div class="line">3</div><div class="line">) &#125;;</div><div class="line"></div><div class="line">  </div><div class="line">// act</div><div class="line">var</div><div class="line"> result = student.RegisterForCourse(course);</div><div class="line"></div><div class="line">  </div><div class="line">// assert</div><div class="line"></div><div class="line">  Assert.False(result);</div><div class="line">&#125;</div><div class="line"></div><div class="line">[Fact]</div><div class="line"></div><div class="line">public</div><div class="line">void</div><div class="line">CannotRegisterForCourseAlreadyEnrolledIn</div><div class="line">(</div><div class="line">)</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">// arrange</div><div class="line">var</div><div class="line"> student = </div><div class="line">new</div><div class="line"> Student</div><div class="line">  &#123;</div><div class="line">     EnrolledCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"></div><div class="line">     &#123;</div><div class="line">       </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Biology II&quot;</div><div class="line"> &#125;,</div><div class="line">       </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;MATH-4067EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Mathematical Theory of Dynamical Systems, Chaos and Fractals&quot;</div><div class="line"> &#125;</div><div class="line">             &#125;</div><div class="line">     &#125;;</div><div class="line"></div><div class="line"> </div><div class="line">// act</div><div class="line">var</div><div class="line"> result = student.RegisterForCourse(</div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> </div><div class="line">// assert</div><div class="line"></div><div class="line"> Assert.False(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><p>Moving up from the entities we have the_Use Case_layer. The classes that live here have a few unique features and responsibilities:</p>
<ul>
<li>Contain the<br><em>application specific</em><br>business rules</li>
<li>Encapsulate and implement all of the use cases of the system. A good rule to start with is a class per use case</li>
<li>Orchestrate the flow of data to and from the entities, and can rely on their business rules to achieve the goals of the use case</li>
<li>Have NO dependency and are totally isolated from things like a database, UI or special frameworks</li>
<li>Will almost certainly require refactoring if details of the use case requirements change</li>
</ul>
<p>Use case classes are typically suffixed with the word<strong>Interactor</strong>. Uncle Bob mentions in<a href="https://www.youtube.com/watch?v=0oGpWmS0aYQ" target="_blank" rel="external">this talk</a>that he considered calling them controllers but assumed this would be too easily confused with MVC so Interactor it is!</p>
<p>Our use case is modelled in<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/UseCases/RequestCourseRegistrationInteractor.cs" target="_blank" rel="external">RequestCourseRegistrationInteractor.cs</a>.</p>
<p>There are a few important aspects of the use case class I’d like to highlight.</p>
<p>First off, it implements the<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/Contracts/IRequestHandler.cs" target="_blank" rel="external">IRequestHandler</a>interface. This interface is an example of the<a href="http://www.dofactory.com/net/mediator-design-pattern" target="_blank" rel="external">mediator pattern</a>which dictates that implementors will work with a certain request and response object in a loosely coupled fashion.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public </div><div class="line">class</div><div class="line">RequestCourseRegistrationInteractor</div><div class="line"> : </div><div class="line">IRequestHandler</div><div class="line">&lt;</div><div class="line">CourseRegistrationRequestMessage, </div><div class="line">CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>There is a single<code>TResponse Handle(TRequest message)</code>method defined on the interface which essentially performs_all the work_of our use case. Pretty simple huh?_Handle()_takes a request object as its lone parameter which will typically contain any data passed in from the outer layer (the UI) and returns a response message with both types dictated by the<code>IRequestHandler</code>interface. All of our_application specific_logic for the use case will go into this method.</p>
<p>One key aspect of the request/response messages that flow in and out of use case interactors and across boundaries is that they are simple data structures meaning they contain no special types: ie. entities, or types provided by 3rd party libs etc. - they are pure C# objects.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line"> CourseRegistrationRequestMessage : IRequest</div><div class="line">&lt;</div><div class="line">CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">public</div><div class="line">int</div><div class="line"> StudentId &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">private</div><div class="line">set</div><div class="line">; &#125;</div><div class="line">  </div><div class="line">public</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> SelectedCourseCodes &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">private</div><div class="line">set</div><div class="line">; &#125;</div><div class="line"></div><div class="line">  </div><div class="line">public</div><div class="line"> CourseRegistrationRequestMessage(</div><div class="line">int</div><div class="line"> studentId,List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> selectedCourseCodes)</div><div class="line">  &#123;</div><div class="line">    StudentId = studentId;</div><div class="line">    SelectedCourseCodes = selectedCourseCodes;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The_CourseRegistrationRequest_object consists of only a StudentId and a list of selected course codes selected by the user.</p>
<p>Here’s the full implementation of<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/UseCases/RequestCourseRegistrationInteractor.cs" target="_blank" rel="external">RequestCourseRegistrationInteractor.cs</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">RequestCourseRegistrationInteractor</div><div class="line"> : </div><div class="line">IRequestHandler</div><div class="line">&lt;</div><div class="line">CourseRegistrationRequestMessage, CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly IStudentRepository _studentRepository;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly ICourseRepository _courseRepository;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly IAuthService _authService;</div><div class="line">  </div><div class="line">public</div><div class="line"> RequestCourseRegistrationInteractor(IAuthService authService, IStudentRepository studentRepository, ICourseRepository courseRepository)</div><div class="line">  &#123;</div><div class="line">    _authService = authService;</div><div class="line">    _studentRepository = studentRepository;</div><div class="line">    _courseRepository = courseRepository;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">public</div><div class="line"> CourseRegistrationResponseMessage Handle(CourseRegistrationRequestMessage message)</div><div class="line">&#123;</div><div class="line">   </div><div class="line">// student must be logged into system</div><div class="line">if</div><div class="line"> (!_authService.IsAuthenticated())</div><div class="line">   &#123;</div><div class="line">     </div><div class="line">return</div><div class="line"> new CourseRegistrationResponseMessage(</div><div class="line">false</div><div class="line">,</div><div class="line">null</div><div class="line">,</div><div class="line">&quot;Operation failed, not authenticated.&quot;</div><div class="line">);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">// get the student</div><div class="line">var</div><div class="line"> student = _studentRepository.GetById(message.StudentId);</div><div class="line"></div><div class="line">   </div><div class="line">// save off any failures</div><div class="line">var</div><div class="line"> errors = new List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line">();</div><div class="line"></div><div class="line">   foreach (</div><div class="line">var</div><div class="line"> c </div><div class="line">in</div><div class="line"> message.SelectedCourseCodes)</div><div class="line">   &#123;</div><div class="line">     </div><div class="line">var</div><div class="line"> course = _courseRepository.GetByCode(c);</div><div class="line"></div><div class="line">     </div><div class="line">if</div><div class="line"> (!student.RegisterForCourse(course))</div><div class="line">     &#123;</div><div class="line">         errors.Add($</div><div class="line">&quot;unable to register for &#123;course.Code&#125;&quot;</div><div class="line">);</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   _studentRepository.Save(student);</div><div class="line">   </div><div class="line">return</div><div class="line"> new CourseRegistrationResponseMessage(!errors.Any(), errors);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note the use of<code>_authService</code>,<code>_studentRepository</code>and<code>_courseRepository</code>. These services are typically referred to as_Gateways_within clean architecture and get injected into the Use Case layer as per the dependency rule. These are the things that deal with the database, rest services or other external agencies and their implementation belongs in the_Interface Adapters_layer. Interactors only know_what_behavior these gateways offer by way of their interface definition. They have no idea_how_they do their work because those details are encapsulated in an outer layer which the Use Cases know nothing about.</p>
<h3 id="Interface-Adapters"><a href="#Interface-Adapters" class="headerlink" title="Interface Adapters"></a>Interface Adapters</h3><p>The purpose of the interface adapter layer is to act as a connector between the business logic in our interactors and our framework-specific code. For example, in an ASP.Net MVC app, this is where the models, views, and controllers live. Gateways like services and repositories are also implemented here.</p>
<p>It is this layer, for example, that will wholly contain the MVC architecture of a GUI. The Presenters, Views, and Controllers all belong in here.</p>
<p>Also in this layer is any other adapter necessary to convert data from some external form, such as an external service, to the internal form used by the use cases and entities.</p>
<p>In this example I’m using a basic console app to consume my use case so this serves as my interface adapter layer. It contains the concrete implementations of the required<a href="https://github.com/mmacneil/CleanArchitecture/tree/master/CleanArchitecture.ConsoleApp/Gateways" target="_blank" rel="external">Gateways</a>and has<a href="https://github.com/mmacneil/CleanArchitecture/tree/master/CleanArchitecture.ConsoleApp/Presentation" target="_blank" rel="external">Presentation</a>logic to format the response from the Use Case into something friendly for the UI.</p>
<p>In the Main() method we can see the usage of calling the use case and presenting the results.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">**</div><div class="line">// Here we&apos;re connecting our app framework layer with our Use Case Interactors</div><div class="line">// This would typically go in a Controller Action in an MVC context or ViewModel in MVVM etc.</div><div class="line">//</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">**</div><div class="line">// 1. instantiate Course Registration Use Case injecting Gateways implemented in this layer</div><div class="line">var courseRegistraionRequestUseCase = new RequestCourseRegistrationInteractor(authService, studentRepository, courseRepository);</div><div class="line"></div><div class="line">// 2. create the request message passing with the target student id and a list of selected course codes </div><div class="line">var useCaseRequestMessage = new CourseRegistrationRequestMessage(1, new List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> &#123; userInput.ToUpper() &#125;);</div><div class="line"></div><div class="line">// 3. call the use case and store the response</div><div class="line">var responseMessage = courseRegistraionRequestUseCase.Handle(useCaseRequestMessage);</div><div class="line"></div><div class="line">// 4. use a Presenter to convert the use case response to a user friendly ViewModel</div><div class="line">var courseRegistraionResponsePresenter = new CourseRegistrationRequestResponsePresenter();</div><div class="line">var vm = courseRegistraionResponsePresenter.Handle(responseMessage);</div><div class="line"></div><div class="line">Console.Clear();</div><div class="line"></div><div class="line">// render results</div><div class="line"></div><div class="line">if (vm.Success)</div><div class="line">&#123;</div><div class="line">  Console.BackgroundColor = ConsoleColor.DarkGreen;</div><div class="line">  Console.ForegroundColor = ConsoleColor.White;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">  Console.BackgroundColor = ConsoleColor.Red;</div><div class="line">  Console.ForegroundColor = ConsoleColor.White;</div><div class="line">&#125;</div><div class="line">Console.WriteLine();</div><div class="line">Console.WriteLine(vm.ResultMessage);</div><div class="line">Console.WriteLine();</div></pre></td></tr></table></figure>
<h4 id="Presentation"><a href="#Presentation" class="headerlink" title="Presentation"></a>Presentation</h4><p>We’d like to show something friendly to the user when we get a response back from the interactor. To accomplish this, I created<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.ConsoleApp/Presentation/CourseRegistrationResponsePresenter.cs" target="_blank" rel="external">CourseRegistrationResponsePresenter</a>which has the single responsibility of converting a_CourseRegistrationResponseMessage_into a<em>CourseRegistrationResponseViewModel</em>. I’ll mention again that the response message and viewmodel are POCO objects containing no special types or data structures, just everyday collection and value types.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">CourseRegistrationResponsePresenter</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">public</div><div class="line"> CourseRegistrationResponseViewModel </div><div class="line">Handle</div><div class="line">(</div><div class="line">CourseRegistrationResponseMessage responseMessage</div><div class="line">)</div><div class="line">  </div><div class="line">&#123;</div><div class="line">    </div><div class="line">if</div><div class="line"> (responseMessage.Success)</div><div class="line">    &#123;</div><div class="line">         </div><div class="line">return</div><div class="line">new</div><div class="line"> CourseRegistrationResponseViewModel(</div><div class="line">true</div><div class="line">,</div><div class="line">&quot;Course registration successful!&quot;</div><div class="line">);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">var</div><div class="line"> sb = </div><div class="line">new</div><div class="line"> StringBuilder();</div><div class="line">    sb.AppendLine(</div><div class="line">&quot;Failed to register course(s)&quot;</div><div class="line">);</div><div class="line">    </div><div class="line">foreach</div><div class="line"> (</div><div class="line">var</div><div class="line"> e </div><div class="line">in</div><div class="line"> responseMessage.Errors)</div><div class="line">    &#123;</div><div class="line">       sb.AppendLine(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">return</div><div class="line">new</div><div class="line"> CourseRegistrationResponseViewModel(</div><div class="line">false</div><div class="line">,sb.ToString());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Frameworks-and-Drivers"><a href="#Frameworks-and-Drivers" class="headerlink" title="Frameworks and Drivers"></a>Frameworks and Drivers</h3><p>This layer contains tools like databases or frameworks. By default, we don’t write very much code in this layer, but it’s important to clearly state the place and priority that those tools have in the architecture.</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>_Clean Architecture_provides a simple and effective framework for separating the different aspects of our system producing a highly decoupled, testable architecture.</p>
<p>Let’s recap some key benefits:</p>
<ul>
<li><p>Use Cases are encapsulated in one place meaning they are <strong>very visible and easier to understand</strong>. Business rules are not scattered all over the place making debugging and modification of the code painful.</p>
</li>
<li><p>The Dependency Rule and use of abstracted Gateways mean the core business logic in our Interactors and Entities is<strong>easily testable</strong>and not hampered by external things like databases and RESTful web services. The lack of 3rd party, feature-laden frameworks in our business logic also means thecode there is only focused on the important rules and policies of our application.</p>
</li>
<li><p>Flexibleand<strong>portable</strong>- because the Use Cases are completely decoupled from any UI or infrastructure it’s easy to do things like switch the database or web framework or even port to an entirely new platform. Our example runs in a console app but it could just as easily work on the web, desktop or a phone.</p>
</li>
</ul>
<p>Like most design decisions there are tradeoffs to be made when considering Clean Architecture. For the benefits I highlighted there are also a few disadvantages:</p>
<ul>
<li><p>Your team’s ability to ramp up and effectively apply Clean Architecture. There’s nothing radically complex in here but there certainly is a learning curve and time required to adapt to any new design or architectural style.</p>
</li>
<li><p>Applying Clean Architecture adds some bloat in the form of many separate classes for all the Presenters, Use Case Request/Response dtos, Use Case Interactors, Entities, Gateways etc plus all the test cases :). Not a huge deal but a valid knock on the impact of this approach to the size of your project.</p>
</li>
</ul>
<p>I hope this guide has provided some insight on how Clean Architecture can improve your software design and prevent many of the common pitfalls that hinder projects. Like any pattern, it takes a little familiarity with the concepts and principles before they can be effectively applied. A good exercise to start might be to think of some use cases near and dear to you currently - can you map them out mentally using Clean Architecture? Do you have a sense of the Entities, what the Use Case Interactor might look like, what data needs to flow back and forth in the request and response messages? Running your use cases through these questions can help you get started in modeling them using Clean Architecture.</p>
<p>Thanks for reading!</p>
<p><a href="https://github.com/mmacneil/CleanArchitecture/" target="_blank" rel="external">source code</a></p>
<p>Get notified on new posts</p>
<p>Straight from me, no spam, no bullshit. Frequent, helpful, email-only content.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/YBj6ZvE" target="_blank" rel="external">https://fullstackmark.com/post/11/better-software-design-with-clean-architecture</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/vqIfaeY.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Have you ever produced code that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;was bug laden&lt;/li&gt;
&lt;li&gt;w
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Beware the cutting edge of web design</title>
    <link href="https://gmagon.com/blog/2017/07/03/beware-the-cutting-edge-of-web-design/"/>
    <id>https://gmagon.com/blog/2017/07/03/beware-the-cutting-edge-of-web-design/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.815Z</updated>
    
    <content type="html"><![CDATA[<p>Progress in web design techniques shows no signs of slowing up. As the proponents of the early web are staggering around with thousand-yard stares, you can’t help but feel a little over-awed by the plethora of techniques and frameworks available nowadays.</p>
<p>People are championing the new approaches that are about to change the way we work once again, such asFlexbox andCSS Grid. Rachel Andrew and Jen Simmons have been encouraging developers to look at these technologies now, in readiness for their arrival.</p>
<p><img src="http://img0.tuicool.com/BzuUvm2.jpg!web" alt=""></p>
<p>Is web design too formulaic, or cutting edge, these days?</p>
<p>Recently, some of the current web industry’s founders – such as Andy Clarke and Jeffrey Zeldman – have asked if it really needs to be this complicated, and whether the web is losing its soul or becoming reliant on a standard output (three-column layouts, hero blocks and the like). Have we all become enslaved to the frameworks and tools available to us?</p>
<p>Although they make a good argument, I don’t think there has been a time where there has been more choice (or opinion) about how to build digital projects. We are long past ‘HTML,CSS and a littleJavaScript’. Now there are CSS preprocessors andJS frameworks, and the components that make up a web project encompass a load of new elements – optimisation, CDN delivery andSEO, to name a few.</p>
<p>An urge to jump into new methods too early can be the worst thing to do on live client work</p>
<p>Sush Kelly</p>
<h3 id="Pioneering-web-tech"><a href="#Pioneering-web-tech" class="headerlink" title="Pioneering web tech"></a>Pioneering web tech</h3><p>The talks and conferences advocate best practices and cutting-edge tech – why we should be using X, Y and Z. This is 100 per cent necessary. After all, the web industry is relatively young and we are still defining the standards of the industry to an extent.</p>
<p>The problem is, those not using these technologies day-to-day in their work can be left feeling inadequate or somehow lacking. It is a lucky few who get to make their living pushing those boundaries and telling us all about them. Don’t get me wrong, it is essential to have these people pushing the bleeding edge, but it can result in an urge to jump into new methods too early, which can be the worst thing to do on live client work.</p>
<p>You want long, productive relationships with clients. Changing how you build sites means having to readjust and remember more skills. As much as good commenting and a README file will help, you need to make sure what you’re delivering will remain effective and usable for as long as possible.</p>
<p>As a digital director at a small creative agency,<a href="https://www.imaginate.uk.com/home" target="_blank" rel="external">Imaginate</a>, it is on my shoulders to make sure we use the right technology on client work and invest our time wisely with regards to what we learn and (in due course) adapt into our processes.</p>
<p>I completely understand how designers and developers want to adopt the next great thing. I feel the same compulsion, and it is actually one of the things that has kept me in the industry so long (since 2000). The fact is that I also have to think about the longevity of the plugin/library/software, because if it doesn’t stand the test of time, or it ends up failing or losing support due to a later development, then the responsibility falls on us.</p>
<h3 id="Educating-junior-web-developers"><a href="#Educating-junior-web-developers" class="headerlink" title="Educating junior web developers"></a>Educating junior web developers</h3><p>Many junior developers have a real thirst for knowledge. It is often an inspiration to more senior team members when they arrive in the studio, eager to show a new method or technique that is emerging and explore how it might be used on a project.</p>
<p>You want your staff to grow, to develop and to be able to work on things together, so again it’s important to make sure that you’re only taking on board advancements that are an improvement on what went before. But when the churn of technology is so quick that we have interns and junior designers who have never had to use a float and do not know life before Bootstrap, it becomes a real balancing act.</p>
<p>A good example of this is the move from LESS to SCSS and also from Grunt to Gulp. Both these technologies are similar, but different enough to mean returning to a project using LESS/Grunt becomes an exercise in re-learning – or in the case of juniors or interns, learning a new (old) technology from scratch.</p>
<h3 id="Website-layout-gambles"><a href="#Website-layout-gambles" class="headerlink" title="Website layout gambles"></a>Website layout gambles</h3><p>Flex and CSS Grids are the current darlings of frontend talk. CSS Grid has the potential to revolutionise the way we will lay websites out in the future. At the moment it is still hidden in the latest browsers, although you can access it if you enable experimental features on the likes of Chrome. We can’t use it in live work for this reason, though with an imminent launch date, Grid could bring about as big a shift in web development practice as the shift from tables to divs and floats.</p>
<p>We are using Flexbox on live work now, but only in ways that are a benefit – for example for ordering content in responsive layouts orvertically centring items. To try to use Flexbox for a full site at the moment, with iOS and Safari’s flaky support, would be a challenge that just may not be financially viable. </p>
<h3 id="Embracing-the-old-browsers"><a href="#Embracing-the-old-browsers" class="headerlink" title="Embracing the old browsers"></a>Embracing the old browsers</h3><p>Clients, especially within larger companies, likely won’t be running the latest browsers. They could also have restrictions on their web access that could affect your build. And if it turns out the main stakeholder is using IE on an old laptop, the site better work on it or the project just won’t get signed off.</p>
<p>Sometimes a client will have a good idea of what they want, or specify an incumbent system or technology that you need to work with. A key point for us as an agency is to be adaptive to these needs and to work with them, rather than dismissing what the client has and trying to force them down the route we would prefer. Sometimes this may mean having to extend an existing codebase in order to keep within the technology required.</p>
<p>When embarking on a new project, we now make sure we establish the required sign-off devices as soon as possible. However, over the years have had our fingers burnt on more than one occasion, when we have run with a new way of doing something with good intentions, only for it to cause issues as we tried to get the site signed off. This just serves to remind us that there are so many device/user combos that it just isn’t OK if a given method will only work on certain browsers.</p>
<p>Although you can make workarounds and shims, there often isn’t budget to do this. And when a client doesn’t have the right resources then you need to go with the solution that will please everyone.</p>
<p>When it comes down to it, the main aim of the studio is to produce great, forward-thinking work, which means being fully open to new methods but also picking the right time and project to use them. It is a tricky balancing act, but one that gives me a great feeling of satisfaction, especially when a new process finally becomes ‘the standard’ on live projects.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/AJbi63b" target="_blank" rel="external">http://www.creativebloq.com/advice/beware-the-cutting-edge-of-web-design</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Progress in web design techniques shows no signs of slowing up. As the proponents of the early web are staggering around with thousand-ya
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A New Way to Reuse DataWeave Functions and Variables in Mule Flows</title>
    <link href="https://gmagon.com/blog/2017/07/03/a-new-way-to-reuse-dataweave-functions-and-variables-in-mule-flows/"/>
    <id>https://gmagon.com/blog/2017/07/03/a-new-way-to-reuse-dataweave-functions-and-variables-in-mule-flows/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.804Z</updated>
    
    <content type="html"><![CDATA[<p>A New Dataweave Function Makes It Easier for You to Store, Reuse, and Share Dataweave Functions Between Flows and Mule Applications.</p>
<h2 id="Reusing-Dataweave-Code"><a href="#Reusing-Dataweave-Code" class="headerlink" title="Reusing Dataweave Code"></a>Reusing Dataweave Code</h2><p><a href="http://www.mulesoft.com/" target="_blank" rel="external">MuleSoft’s</a><a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/dataweave" target="_blank" rel="external">DataWeave</a>technology is a powerful and efficient way to transform complex structured data between popular data formats, including JSON, XML, CSV, and Java objects.</p>
<p>I’m a courseware developer and trainer at<a href="http://www.mulesoft.com/" target="_blank" rel="external">MuleSoft</a>, and recently I’ve been spending a lot of time learning about DataWeave.</p>
<p>In the<a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/dataweave" target="_blank" rel="external">DataWeave</a>1.x version included in the Mule runtime v3.8, there has been limited support for reusing DataWeave functions and variables between Transform Message components (the component that applies DataWeave code). In particular, there is currently no direct support for importing modules or libraries of DataWeave code. But starting with Mule Runtime v3.8.4 there is a new<code>readUrl</code>function you can now use to start reusing DataWeave code across applications and even across deployments.</p>
<p>In this post, you’ll learn how to use the new<code>readUrl</code>function to separate out reusable DataWeave code, and then reuse that code between multiple Transform Message components and flows, including flows in separate applications and MUnit flows. This is a nice new tool to add to your DataWeave tool box.</p>
<h2 id="Creating-a-Mule-Project-With-Reusable-Dataweave-Library-Files"><a href="#Creating-a-Mule-Project-With-Reusable-Dataweave-Library-Files" class="headerlink" title="Creating a Mule Project With Reusable Dataweave Library Files"></a>Creating a Mule Project With Reusable Dataweave Library Files</h2><p>An example Mule project is available in this<a href="https://github.com/ethanport/dataweave-reuse" target="_blank" rel="external">GitHub repository</a>. You can import this project into the latest Anypoint Studio to follow along with this post. Alternatively, you can create a new Mule project in Anypoint Studio and copy the examples from this blog post.</p>
<p>This project has added a folder named<code>dw</code>to<code>src/main/resources</code>, and then created a file named<code>myLib.wev</code>inside the<code>dw</code>folder. When this Mule project is exported as a deployable archive file, all the files in<code>src/main/resources</code>will be automatically added to the project’s classes folder, so will be in the classpath when the Mule application is deployed to a Mule runtime. In this sample project, the HTTP listener is listening for requests on port 8081.</p>
<p><img src="http://img0.tuicool.com/niUVRva.jpg!web" alt=""></p>
<h2 id="Coding-the-Reusable-Dataweave-File"><a href="#Coding-the-Reusable-Dataweave-File" class="headerlink" title="Coding the Reusable Dataweave File"></a>Coding the Reusable Dataweave File</h2><p>The myLib.wev file contains some reusable variables and functions.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">%dw 1.0</div><div class="line"></div><div class="line">//Reusable constant</div><div class="line">%var exchangeRateFromUSDToBritishPounds = 1.35</div><div class="line"></div><div class="line">%function convertPriceFromUSDToBritishPounds ( input )</div><div class="line">//Can </div><div class="line">use</div><div class="line"> the getIntroString() </div><div class="line">function</div><div class="line"> which </div><div class="line">is</div><div class="line"> defined further down</div><div class="line"></div><div class="line">&quot;$(getIntroString()) :  $(input * exchangeRateFromUSDToBritishPounds)&quot;</div><div class="line"></div><div class="line"></div><div class="line">%</div><div class="line">function</div><div class="line"> getIntroString()</div><div class="line"></div><div class="line">&quot;The price converted to British Pounds is&quot;</div><div class="line">---</div><div class="line"></div><div class="line">//Provide </div><div class="line">external</div><div class="line">names</div><div class="line">for</div><div class="line">variables</div><div class="line">and</div><div class="line"> functions defined </div><div class="line">in</div><div class="line"> the header</div><div class="line">&#123;</div><div class="line">  exchangeRate : exchangeRateFromUSDToBritishPounds,</div><div class="line"></div><div class="line">  convertPrice : convertPriceFromUSDToBritishPounds,</div><div class="line"></div><div class="line">  //</div><div class="line">Use</div><div class="line"> an anonymous lambda </div><div class="line">to</div><div class="line">define</div><div class="line"> the </div><div class="line">function</div><div class="line"></div><div class="line">  formatString : (aString, formatter) -</div><div class="line">&gt;</div><div class="line"> formatter(aString)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The body expression creates key names for the variables and functions. The<code>exchangeRate</code>key has as value the variable<code>exchangeRateFromUSDToBritishPounds</code>. This variable acts as a constant in other DataWeave functions.</p>
<p>The<code>convertPrice</code>key references the more lengthy function name<code>convertPriceFromUSDToBritishPounds</code>. This function requires a parameter, which is used in the function’s expression to print out the String returned from the later<code>getIntroString()</code>function, plus the result of multiplying the<code>input</code>value by the<code>exchangeRateFromUSDToBritishPounds</code>variable.</p>
<p>The<code>formatString</code>key is different from the other two keys in the body expression. The<code>formatString</code>key has a value which is an anonymous function implementation. These types of unnamed functions are also called lambdas. The lambda requires two input parameters. The first parameter labeled<code>aString</code>is supplied to the<code>formatString</code>function with any string value, which then has the<code>formatter</code>function applied to<code>aString</code>.</p>
<p>Next, you will see how to use these functions, including<code>formatString</code>, in a DataWeave flow.</p>
<h2 id="Reading-in-and-Using-an-External-Dataweave-File"><a href="#Reading-in-and-Using-an-External-Dataweave-File" class="headerlink" title="Reading in and Using an External Dataweave File"></a>Reading in and Using an External Dataweave File</h2><p>The next step is to read in this external DataWeave file and use it in a Transform Message component. The first step is to use the new readUrl function to read in the DataWeave function from the classpath. Define a variable<code>myLib</code>as a reference to the DataWeave file<code>myLib.wev</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">%dw</div><div class="line">1.0</div><div class="line">%output</div><div class="line"> application/json</div><div class="line"></div><div class="line"></div><div class="line">%var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>In this example, we are embedding the DataWeave library file inside the project, so we give the URL relative to the classpath<code>dw/myLib.wev</code>. If you are deploying into a customer-hosted on-prem Mule runtime, you could also store your DataWeave libraries in a common external location that you add to the Mule runtime’s classpath.</p>
<p>Note: This is a similar technique to the way you can store Mule application properties files in an external location. You can learn more about this technique in the Anypoint<a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/configuring-properties" target="_blank" rel="external">product documentation</a>, or<a href="https://wrapper.tanukisoftware.com/doc/english/props-envvars.html#definition" target="_blank" rel="external">Tanuki Java Service Wrapper</a>documentation.</p>
<p>Like the related read() function, readUrl() can also include a second parameter to specify the mime type, such as<code>application/java</code>,<code>application/json</code>,<code>application/csv</code>, or<code>application/xml</code>. When not specified, the default mime type is<code>application/dw</code>. So in this example, we could also have written:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">%dw</div><div class="line">1.0</div><div class="line">%output</div><div class="line"> application/json</div><div class="line"></div><div class="line"></div><div class="line">%var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">, </div><div class="line">&quot;application/dw&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>In Anypoint Studio, the file is stored in<code>src/main/resources</code>, but in the deployable archive, all the files from the<code>src/main/resources</code>folder are moved into the<code>classes</code>folder.</p>
<p>Here is a complete Transform Message component in the convertPrice flow:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">%dw </div><div class="line">1.0</div><div class="line"></div><div class="line"></div><div class="line">%output application/json</div><div class="line"></div><div class="line">%</div><div class="line">var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line">//Access functions in the myLib reference</div><div class="line"></div><div class="line">%</div><div class="line">function</div><div class="line">printPrice</div><div class="line">(priceInUSD)</div><div class="line">myLib</div><div class="line">.</div><div class="line">formatString</div><div class="line">( myLib.convertPrice</div><div class="line">(priceInUSD)</div><div class="line">, </div><div class="line">(price)</div><div class="line"> -</div><div class="line">&gt;</div><div class="line"> upper price )</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">&#123; </div><div class="line">  </div><div class="line">//Format the key</div><div class="line"></div><div class="line">  ( </div><div class="line">    myLib.formatString( </div><div class="line">&quot;result&quot;</div><div class="line">, (aString) -</div><div class="line">&gt;</div><div class="line"> capitalize aString ) </div><div class="line">  ) : </div><div class="line"></div><div class="line">  </div><div class="line">//Format the value - read in the input price as an HTTP query param</div><div class="line"></div><div class="line">  printPrice( inboundProperties.</div><div class="line">&apos;http.query.params&apos;</div><div class="line">.price )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Previewing-and-Testing-Dataweave-Code-That-Uses-External-Dataweave-Library-Files"><a href="#Previewing-and-Testing-Dataweave-Code-That-Uses-External-Dataweave-Library-Files" class="headerlink" title="Previewing and Testing Dataweave Code That Uses External Dataweave Library Files"></a>Previewing and Testing Dataweave Code That Uses External Dataweave Library Files</h2><p>You can preview example data transformations using the Preview pane in the Transform Message component editor. In the Transform Message component, in the left-side Input pane, right click on Inbound Properties &gt; http.query.params.</p>
<p><img src="http://img1.tuicool.com/bUNrIrV.jpg!web" alt=""></p>
<p>Set an example price:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">%dw </div><div class="line">1.0</div><div class="line"></div><div class="line">%output application/java</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">price:</div><div class="line">600</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In the right-side Output pane, select the Preview button, which opens the Preview pane. In the Preview pane, you should see the result of the body expression.</p>
<p><img src="http://img1.tuicool.com/E73UZrU.jpg!web" alt=""></p>
<p>Change the price from 600 to 500 and verify the output in the Preview pane also changes. This shows you that you can preview live changes to DataWeave code, even when you are reading in external DataWeave files.</p>
<p>Here is the entire<strong>reuseDataWeaveCode.</strong>xmlfile<strong>:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">&lt;</div><div class="line">?</div><div class="line">xml version=</div><div class="line">&quot;1.0&quot;</div><div class="line"> encoding=</div><div class="line">&quot;UTF-8&quot;</div><div class="line">?</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">mule</div><div class="line">xmlns:tracking</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/ee/tracking&quot;</div><div class="line">xmlns:dw</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/ee/dw&quot;</div><div class="line">xmlns:http</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/http&quot;</div><div class="line">xmlns</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/core&quot;</div><div class="line">xmlns:doc</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/documentation&quot;</div><div class="line">xmlns:spring</div><div class="line">=</div><div class="line">&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">xmlns:xsi</div><div class="line">=</div><div class="line">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation</div><div class="line">=</div><div class="line">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">http:listener-config</div><div class="line">name</div><div class="line">=</div><div class="line">&quot;HTTP_Listener_Configuration&quot;</div><div class="line">host</div><div class="line">=</div><div class="line">&quot;0.0.0.0&quot;</div><div class="line">port</div><div class="line">=</div><div class="line">&quot;8081&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;HTTP Listener Configuration&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">flow</div><div class="line">name</div><div class="line">=</div><div class="line">&quot;convertPrice&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">http:listener</div><div class="line">config-ref</div><div class="line">=</div><div class="line">&quot;HTTP_Listener_Configuration&quot;</div><div class="line">path</div><div class="line">=</div><div class="line">&quot;/&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;HTTP&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:transform-message</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;Transform Message&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:input-inbound-property</div><div class="line">doc:sample</div><div class="line">=</div><div class="line">&quot;sample_data/map_string_string.dwl&quot;</div><div class="line">propertyName</div><div class="line">=</div><div class="line">&quot;http.query.params&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:set-payload</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">![CDATA[%dw 1.0</div><div class="line">%var myLib = readUrl(&quot;classpath://dw/myLib.wev&quot;)</div><div class="line"></div><div class="line">%output application/json</div><div class="line"></div><div class="line">%function printPrice(priceInUSD)</div><div class="line">myLib.formatString( myLib.convertPrice(priceInUSD), (price) -</div><div class="line">&gt;</div><div class="line"> upper price )</div><div class="line"></div><div class="line">%function headerString ()</div><div class="line">&quot;the price2&quot;</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line"></div><div class="line">&#123; </div><div class="line">  //format the key</div><div class="line">  (myLib.formatString( &quot;result&quot;, (aString) -</div><div class="line">&gt;</div><div class="line"> capitalize aString )) : </div><div class="line"></div><div class="line">  //Read in the input price as an HTTP query param</div><div class="line">  printPrice(inboundProperties.&apos;http.query.params&apos;.price)</div><div class="line">&#125;</div><div class="line">]]</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">dw:set-payload</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">dw:transform-message</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">logger</div><div class="line">level</div><div class="line">=</div><div class="line">&quot;INFO&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;Logger&quot;</div><div class="line">message</div><div class="line">=</div><div class="line">&quot;#[message.payload]&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">flow</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">mule</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h2 id="Deploying-and-Testing-the-Application"><a href="#Deploying-and-Testing-the-Application" class="headerlink" title="Deploying and Testing the Application"></a>Deploying and Testing the Application</h2><p>Deploy the reuseDataWeaveCode project to a Mule runtime. For example, here I am deploying the project to an Anypoint Platform account from Anypoint Studio.</p>
<p><img src="http://img1.tuicool.com/YBJFRvF.jpg!web" alt=""></p>
<p>In this example, I deployed the application to a public Anypoint Platform URL<a href="http://reuse-dataweave-code.cloudhub.io/" target="_blank" rel="external">http://reuse-dataweave-code.cloudhub.io</a>.</p>
<p>After the application deploys, open a web client (you can use a web browser), and make a GET request to the HTTP listener. If you deployed to a Mule runtime on your local machine, the URL is<code>http://localhost:8081?price=300</code>. For my CloudHub deployment, I’ll make requests from a web client to<code>http://reuse-dataweave-code.cloudhub.io/?price=700</code>. You can click this URL now to try it out.</p>
<p>My web browser has a JSON parser extension and shows this response:</p>
<p><img src="http://img2.tuicool.com/iiyY7rj.jpg!web" alt=""></p>
<p>As you build up more complex DataWeave transformation for your projects, you’ll want to reuse some of your transformation logic. Today, you can do this using the readUrl() function. Please let us know what you think of this feature, and also let us know what additional modularity you’d like to see in future releases.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/bYBzUbZ" target="_blank" rel="external">https://dzone.com/articles/reusing-dataweave-functions-and-variable-in-mule-f</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A New Dataweave Function Makes It Easier for You to Store, Reuse, and Share Dataweave Functions Between Flows and Mule Applications.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bitwage Officially Launches UK Bitcoin Payroll Services</title>
    <link href="https://gmagon.com/blog/2017/07/03/bitwage-officially-launches-uk-bitcoin-payroll-services/"/>
    <id>https://gmagon.com/blog/2017/07/03/bitwage-officially-launches-uk-bitcoin-payroll-services/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img2.tuicool.com/iYzuUvb.jpg!web" alt=""></p>
<p>After expanding services in Europe earlier this year, bitcoin payroll and wage payment service provider Bitwage announced its official launch in the UK on Monday.</p>
<p><em><strong>Also read:</strong></em><a href="https://news.bitcoin.com/bitwage-launches-new-functionality-european-customers/" target="_blank" rel="external"><em>Bitwage Launches New Functionality for European Customers</em></a></p>
<h2 id="Bitwage’s-Official-Launch-in-the-UK"><a href="#Bitwage’s-Official-Launch-in-the-UK" class="headerlink" title="Bitwage’s Official Launch in the UK"></a>Bitwage’s Official Launch in the UK</h2><p><a href="https://www.bitwage.com/" target="_blank" rel="external">Bitwage</a><img src="http://img2.tuicool.com/BJneqen.png!web" alt="">offers solutions for remote workers to receive wages in a variety of currencies including bitcoin. Using the service, workers can get paid in bitcoin without having to ask each employer to pay in the cryptocurrency or sign up with Bitwage. They simply give the employers Bitwage’s bank account details to receive payments in.</p>
<p>Bitwage claims to have over 13,000 registered workers and have processed over $21.6 million in international wages. Users can invoice employers or clients in the United States (US), United Kingdom (UK), and the European Union (EU). Wages received can be split into any ratio between different bank accounts and bitcoin wallets.</p>
<p>On Monday, the company announced the official launch of their services in the UK, stating:</p>
<p>We are now able to offer workers anywhere in the world the ability to receive wages from companies in the UK through local banking partners. This means that our workers can receive wages through Faster Payments, Bacs, Chaps or Swift into local UK GBP bank accounts.</p>
<h2 id="Bacs-Faster-Payments-and-Chaps-Now-Supported"><a href="#Bacs-Faster-Payments-and-Chaps-Now-Supported" class="headerlink" title="Bacs, Faster Payments, and Chaps Now Supported"></a>Bacs, Faster Payments, and Chaps Now Supported</h2><p>Bitwage founder and president Jonathan Chester told Bitcoin.com that the company has been beta testing this service. He explained that although the ability to receive wages in British pounds (GBP) existed previously, it was not done locally and was never publicly launched. Without local UK partners, the service was not cost-effective. Chester detailed:</p>
<p>Before this, we had a banking partner with GBP correspondent accounts in Ireland that could receive Chaps, but not Faster Payments or Bacs. This was a costly solution for potential clients in the UK, so there was very little usage. We have now been working with these same customers during the beta testing of our new local UK services.</p>
<p><img src="http://img1.tuicool.com/BbIBrau.png!web" alt="">Chaps is the UK’s same-day high-value payment system, currently used by 26 direct participants including the Bank of England and over 5,000 indirect participants. Payments are transferred over Swift and settled intraday in central bank funds. In 2016 Chap’s volumes reached a record 39 million transactions, worth £75.6 trillion.</p>
<p><img src="http://img1.tuicool.com/iyy2mu7.png!web" alt="">Bacs is responsible for the clearing and settlement of UK automated payment methods, direct debit and Bacs direct credit. The company processed 6.22 billion transactions to UK bank accounts in 2016, worth £4.8 trillion. Faster Payments is a UK banking initiative which uses the Bacs system to reduce payment times between different banks’ customer accounts from three working days to a few hours. While Chaps focuses on same-day service for high-value transactions, Faster Payments is tailored to the much larger number of smaller payments.</p>
<h2 id="Bitwage’s-Growing-List-of-Services"><a href="#Bitwage’s-Growing-List-of-Services" class="headerlink" title="Bitwage’s Growing List of Services"></a>Bitwage’s Growing List of Services</h2><p>In April, Bitcoin.comreported on Bitwage launching unique IBANs for users receiving wages in the European Union. With Monday’s launch in the UK, <img src="http://img1.tuicool.com/22QFnyf.jpg!web" alt="">employers can pay in US dollars, British pounds, and euros. In addition, Bitwage can accept Canadian dollars, Australian dollars, Swiss Francs, and Japanese yen.</p>
<p>Payouts to the workers are far more diverse and are done on the same or next day. Currencies supported include bitcoin, ether, and litecoin, as well as the US dollar, the euro, the British pound, the Brazilian Real, the Philippine peso, the Mexican peso, the Argentine peso, the Indian rupee, the Vietnamese dong, the Nigerian naira, and the Ukrainian hryvnia.</p>
<p>Would you use Bitwage to receive your wages? Let us know in the comments section below.</p>
<p>Images courtesy of Shutterstock, Chaps, Bacs, Faster Payments, and Bitwage</p>
<p>Need to calculate your bitcoin holdings? Check our <a href="http://tools.bitcoin.com/" target="_blank" rel="external">tools</a> section.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/iqQfqmi" target="_blank" rel="external">https://news.bitcoin.com/bitwage-launches-uk-bitcoin-payroll-services/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img2.tuicool.com/iYzuUvb.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;After expanding services in Europe earlier this year, bitcoin payroll a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The 5-Minute Interview: Anirban Chatterjee &amp; Keshav Ranganathan, IBM</title>
    <link href="https://gmagon.com/blog/2017/06/30/the-5-minute-interview-anirban-chatterjee-and-keshav-ranganathan-ibm/"/>
    <id>https://gmagon.com/blog/2017/06/30/the-5-minute-interview-anirban-chatterjee-and-keshav-ranganathan-ibm/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:03:41.555Z</updated>
    
    <content type="html"><![CDATA[<p>ByRachel Howard, Community Editor | June 30, 2017</p>
<p>“As the relationship really started to take shape, we realized what the two technologies could solve much more effectively when they worked together,”said<a href="http://www.linkedin.com/in/keshavranganathan" target="_blank" rel="external">Keshav Ranganathan</a>, Senior Offering Manager at<a href="http://www-03.ibm.com/systems/power/solutions/bigdata-analytics/" target="_blank" rel="external">IBM Power Systems</a>.</p>
<p><img src="http://img0.tuicool.com/ArQ36jj.jpg!web" alt="">The Neo4j partnership with IBM Power Systems is one of many that have been formed over the last several years, making the native graph database an even more effective enterprise solution for companies that span industries and continents.</p>
<p>In this week’s 5-Minute Interview (conducted at<a href="http://graphconnect.com/?ref=blog" target="_blank" rel="external">GraphConnect San Francisco</a>), we discuss the ways in which the IBM Power Systems and Neo4j partnership came to fruition, and the powerful benefits both companies are able to provide to customers because of it.</p>
<h3 id="Talk-to-us-about-why-you-all-at-IBM-Power-Systems-decided-to-partner-with-Neo4j"><a href="#Talk-to-us-about-why-you-all-at-IBM-Power-Systems-decided-to-partner-with-Neo4j" class="headerlink" title="Talk to us about why you all at IBM Power Systems decided to partner with Neo4j."></a>Talk to us about why you all at IBM Power Systems decided to partner with Neo4j.</h3><p>Anirban Chatterjee:We partnered with Neo4j because of the hover platform that we sell,<a href="http://www-03.ibm.com/systems/power/" target="_blank" rel="external">IBM Power Systems</a>.</p>
<p>We’ve been working withNeo4j to optimize it to run even more efficiently onIBM POWER8. In fact, we’re at about 80-90% faster per price performance on Power Systems compared to the equivalent x86. Which means that if you were to buy two socket servers from us instead of Intel, we’ll provide up to 80 or 90% better performance.</p>
<p>At a base level, that’s the value we offer. On top of that, we’ve been doing some work with Neo4j to add<a href="http://www.ibm.com/developerworks/community/blogs/fe313521-2e95-46f2-817d-44a4f27eba32/entry/power8_capi_flash_in_memory_expansion_to_speed_data_access?lang=en" target="_blank" rel="external">CAPI Flash support</a>. This means you can search large graphs in memory without high memory costs, because of the ability to take flash memory and hook it directly into the system.</p>
<p>This makes it act more like real memory without all the latencies you see with flash, so it’s a much cheaper way to get a large graph onto the system.</p>
<h3 id="What-made-you-choose-to-work-with-Neo4j"><a href="#What-made-you-choose-to-work-with-Neo4j" class="headerlink" title="What made you choose to work with Neo4j?"></a>What made you choose to work with Neo4j?</h3><p>Keshav Ranganathan:We first looked at the capabilities of graphs, such as searching large amounts of data and uncoveringnew relationships. And when you look at some of the IBM Power System capabilities and the amount of memory that can be on a single system, we knew we had to support both scale-out and scale-up configurations.</p>
<p>It seemed like a natural partnership, especially as databases were becoming much larger and with the emergence of big data. As the partnership really started to take shape, we realized what the two technologies could solve much more effectively when they worked together.</p>
<p>What is the most interesting result or project you’ve encountered through your partnership with Neo4j?</p>
<p>Ranganathan:We are getting clients jointly, in which we see huge opportunities. This is especially true as data size grows beyond a terabyte of data, or maybe a few hundred million nodes. What we jointly bring to the table is going to make a huge different for our clients, and we’re really looking forward to this partnership.</p>
<h3 id="Can-you-tell-us-more-about-IBM’s-partnership-with-Neo4j"><a href="#Can-you-tell-us-more-about-IBM’s-partnership-with-Neo4j" class="headerlink" title="Can you tell us more about IBM’s partnership with Neo4j?"></a>Can you tell us more about IBM’s partnership with Neo4j?</h3><p>Ranganathan:Well, this is not really a client partnership; rather it’s a synergistic partnership between two vendors, who bring technologies jointly to market to address client needs. I think we are making really good progress, and I’m happy with where we are in terms of our relationship with Neo4j.</p>
<p>The new Causal Clustering capabilities are quite exciting, and we’re going to make sure we have that capability on Power Systems. We’re also leveraging some of the capabilities in Power Systems to increase scalability, and we are really looking forward to growing our partnership.</p>
<h3 id="Is-there-anything-else-you’d-like-to-add-or-say"><a href="#Is-there-anything-else-you’d-like-to-add-or-say" class="headerlink" title="Is there anything else you’d like to add or say?"></a>Is there anything else you’d like to add or say?</h3><p>Ranganathan:It’s pretty exciting to hear how much the community has grown over the last several years; that<a href="http://graphconnect.com/?ref=blog" target="_blank" rel="external">GraphConnect</a>was a 200 person event in 2012 and is now a 1300 person event — that’s phenomenal.</p>
<p>And it’s really interesting to learn about the connected enterprise concept in terms of data, relationship between data, and how to extract insight from the data. Watching Neo4j transform from a niche tool applied in a handful of cases to being an enterprise solution is really exciting as well. We look forward to the continued growth ofgraph databases, Neo4j and IBM Power Systems.</p>
<p><em>Want to share about your Neo4j project in a future 5-Minute Interview? Drop us a line atcontent@neo4j.com</em></p>
<p>Learn more about running Neo4j on IBM POWER8 with CAPI Flash: Click below to get all the information you need on large scale graph processing with IBM Power Systems and Neo4j.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/mMfEVnU" target="_blank" rel="external">https://neo4j.com/blog/anirban-chatterjee-keshav-ranganathan-ibm/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ByRachel Howard, Community Editor | June 30, 2017&lt;/p&gt;
&lt;p&gt;“As the relationship really started to take shape, we realized what the two tech
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Minoca OS 0.4: We love the eighties!</title>
    <link href="https://gmagon.com/blog/2017/06/30/minoca-os-04-we-love-the-eighties/"/>
    <id>https://gmagon.com/blog/2017/06/30/minoca-os-04-we-love-the-eighties/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:06:34.697Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img0.tuicool.com/AzmmqmR.png!web" alt=""></p>
<p>fceux running on the first Minoca OS X server</p>
<p>We’re pleased to announce the release of version 0.4 of Minoca OS. In the eight months since we released 0.3, our very first open source release, a lot has changed. Most notably Minoca is now sporting the_early_signs of a desktop. And of course no desktop would be complete without an application to run on it. So we’ve added<a href="http://www.fceux.com/web/home.html" target="_blank" rel="external">fceux</a>, an NES emulator, which we used to test both graphics performance and sound. Hopefully you’ll be better at Super Mario Brothers than Chris, who I watched blatantly kill Mario probably upwards of 50 times in the name of testing sound. Here’s what, how, and why we did it.</p>
<p>For those who have never heard of us before, Minoca OS is a new operating system built completely from the ground up. It’s designed to be lean, portable, modular, and modern (NES emulator notwithstanding). We’re trying to do more with less, so devices with limited power and resource budgets can get full OS functionality with minimal overhead.</p>
<h3 id="What’s-New"><a href="#What’s-New" class="headerlink" title="What’s New"></a>What’s New</h3><p>Some new drivers in 0.4:</p>
<ul>
<li>AHCI (the controller usually behind your SATA port)</li>
<li>e1000 (Intel gigabit networking driver)</li>
<li>USB and PS/2 mouse</li>
<li>Intel HD Audio and Raspberry Pi PWM audio</li>
</ul>
<p>Some new third-party packages worth noting:</p>
<ul>
<li>Xorg-server</li>
<li>SDL</li>
<li>fceux (NES emulator)</li>
<li>miniDLNA</li>
<li>Mesa3D (software rendering)</li>
<li>GTK+</li>
</ul>
<p>You can grab the latest OS images on ourdownloads page. Bugs and feature requests can be filed on our<a href="https://github.com/minoca/os" target="_blank" rel="external">GitHub</a>page. You can fire up X for yourself by running “opkg update; opkg install fceux xinit; startx”.</p>
<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>First of all I’d like to say a huge thank you to everyone who tried out Minoca OS since we went open source back in November. An even bigger thank you goes to the intrepid folks who submitted bugs and pull requests on our GitHub page. Chris and I really appreciate that, please continue to do it!</p>
<p>One of the requests we seemed to get a lot was “where’s the GUI” or “can I run this graphical application XYZ?” When we launched 0.3 we had done no work towards a graphical environment, mostly citing the fact that accelerated graphics are hard. That’s still true, and we still don’t have accelerated graphics (remember these are the_beginnings_of a desktop), but we were curious to find out how far out we were from having some sort of basic graphical environment.</p>
<p>The goal here was not to put out 0.4 with the message of “behold, the glorious desktop GUI has arrived”, but rather to provide the elements and building blocks for people familiar with compiling software to potentially make progress on their own.</p>
<h3 id="All-Roads-Lead-to-X"><a href="#All-Roads-Lead-to-X" class="headerlink" title="All Roads Lead to X"></a>All Roads Lead to X</h3><p>Our initial thought was actually to port over DirectFB, a Linux library for interacting directly with the frame buffer. In fact we went so far as to port DirectFB to Minoca. Things fell apart a bit when we went looking for applications built on top of DirectFB. There aren’t so many of those. Wayland/Weston looks super cool and new, but it also appeared to be pretty Linux-specific, so it didn’t seem like the ideal choice to start with. No, everything graphical seems to compile against X. The ancient terrifying medusa that is X. It was on the very bottom of my mental list of possible options, but it was becoming clear that it really was the_only_option.</p>
<p>X is not just one thing that you download and compile. It’s composed of over a hundred different packages. As developers of a new OS, we generally feel it’s a pretty good day if we’ve added one or two new packages. The idea of adding over 100 new packages even if they all ported perfectly seems daunting. And though we’ve worked hard to build a POSIX compatible C library, life has a way of not going that smoothly.</p>
<h3 id="Into-the-Abyss"><a href="#Into-the-Abyss" class="headerlink" title="Into the Abyss"></a>Into the Abyss</h3><p>There’s really no way to check and see if you’re going to get stuck on a missing OS feature in package number 67 of 140, you just have to start building and hope the obstacles are surmountable. The chapter on X in the<a href="http://www.linuxfromscratch.org/blfs/view/svn/x/installing.html" target="_blank" rel="external">Linux From Scratch</a>book is a precious map in an otherwise endless labyrinth. I have no idea how anyone built the X server before that book. Most of it isn’t super Linux-specific, with some light editing they could call it “Any OS From Scratch”.</p>
<p>It also helps that nearly everything is autoconfed. Not that I don’t struggle with autoconf and especially libtool, but I’d say autoconf and I have an “understanding” with each other. It’s the devil I know, at least.</p>
<p>The first batch of 25 or so packages contain mostly headers. A warmup round to get your fingers loose, I suppose. Then comes another batch of 30 or so library packages. To my surprise these seem to go by pretty smoothly, and even cross compile!</p>
<p>I hit my biggest obstacle with Mesa, the 3D graphics library responsible for libraries like libGL. Mesa was one of the few non-Xorg packages in the quest for the X server, and required some monkeying to get right. Supplying the right configure parameters for a non-Linux software-only pipeline that the X server was happy with took some trial and error. There were also a few OS-specific bits of code that needed the obligatory “and here’s Minoca, too” code snippets. The nastiest<a href="https://bugs.freedesktop.org/show_bug.cgi?id=35268" target="_blank" rel="external">barb</a>, which I’d only discover later, was their forced use of the “initial-exec” thread-local storage model. I know this was done in the name of performance, but it leaves a bit of a mess for the OS designers, who either have to 1) accommodate it with a brittle “might work for Mesa but I hope no one else does this” kind of hack, or 2) force programs using libGL to load it on initial program load, which the X server wouldn’t have ordinarily done. We went for option 2, which leaves you feeling only slightly less dirty.</p>
<p>The remaining packages leading up to running an X server went surprisingly smoothly. My compliments to the Xorg developers. Xterm, a non-Xorg package, required a bit of work. There are some code bases that have a “shove your OS in here with ifdefs” vibe to them, xterm is one of those. It’s usually pretty easy to do, but it never feels very good.</p>
<h3 id="Minoca-I-O"><a href="#Minoca-I-O" class="headerlink" title="Minoca I/O"></a>Minoca I/O</h3><p>In theory we had a running X server, but given that X couldn’t display video or receive input, there wasn’t much proof. I added Minoca framebuffer support, and wrote an input driver to allow X to gather keyboard and mouse events from the kernel. This also required actually adding mouse support to Minoca, including a USB HID parser. After some false starts, I was presented with this beauty:</p>
<p>Source:　<a href="http://www.tuicool.com/articles/hit/yyYNjyB" target="_blank" rel="external">https://blog.minocacorp.com/minoca-os-0-4-we-love-the-eighties-170a93112db1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/AzmmqmR.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;fceux running on the first Minoca OS X server&lt;/p&gt;
&lt;p&gt;We’re pleased to a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Issue of lazy loading property</title>
    <link href="https://gmagon.com/blog/2017/06/30/issue-of-lazy-loading-property/"/>
    <id>https://gmagon.com/blog/2017/06/30/issue-of-lazy-loading-property/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:03:41.547Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve got some<code>readonly</code>properties in my .h file. And when I tried to lazy loading them as usual like this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">// MyView.h</div><div class="line">@property</div><div class="line"> (</div><div class="line">nonatomic</div><div class="line">, </div><div class="line">strong</div><div class="line">, </div><div class="line">readonly</div><div class="line">) </div><div class="line">UIImageView</div><div class="line"> *imageView;</div><div class="line"></div><div class="line"></div><div class="line">// MyView.m</div><div class="line"></div><div class="line">- (</div><div class="line">UIImageView</div><div class="line"> *)imageView</div><div class="line">&#123;</div><div class="line">    </div><div class="line">if</div><div class="line"> (!_imageView)</div><div class="line">    &#123;</div><div class="line">        _imageView = [</div><div class="line">UIImageView</div><div class="line"> new];</div><div class="line">        _imageView.translatesAutoresizingMaskIntoConstraints = </div><div class="line">NO</div><div class="line">;</div><div class="line">        _imageView.backgroundColor = [</div><div class="line">UIColor</div><div class="line"> clearColor];</div><div class="line">        _imageView.contentMode = </div><div class="line">UIViewContentModeScaleAspectFit</div><div class="line">;</div><div class="line">        _imageView.userInteractionEnabled = </div><div class="line">NO</div><div class="line">;</div><div class="line">        _imageView.accessibilityIdentifier = </div><div class="line">@&quot;empty set image view&quot;</div><div class="line">;</div><div class="line"></div><div class="line">        _imageView.image = _defaultImage;</div><div class="line"></div><div class="line">        [_contentView addSubview:_imageView];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">return</div><div class="line"> _imageView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Then…bang! It threw out errors in bulk, yelling “Use of undeclared identifier ‘_imageView’”. What the hell have I done!</p>
<p>Luckily, I found some explainations<a href="http://stackoverflow.com/a/13670924/1594792" target="_blank" rel="external">here</a>. It says:</p>
<p>Newer Xcode versions can create a @synthesize statement automatically and use the underscore prefix for instance variables. In this case however,since the property is read-only and you provide a getter method, Xcode does not synthesize the property automatically.</p>
<p>So, I have to @synthesize the property on my own, and now it’s quiet and cute again. :P</p>
<h4 id="—-Update-2017-05-30-—"><a href="#—-Update-2017-05-30-—" class="headerlink" title="— Update: 2017-05-30 —"></a>— Update: 2017-05-30 —</h4><p>I happened to recall this issue when clearing up the whole system of Objective-C. Let’s dig deeper about this issue and find if there’s a diamond in it. :P</p>
<p>This issue has references of two points:<code>@property</code>and<code>@synthesize</code>. Let’s dig more details one by one.</p>
<ul>
<li><code>@property</code><br>: I’d love to reference this paragraph of<br><a href="http://rypress.com/tutorials/objective-c/properties" target="_blank" rel="external">Ry’s Objective-C Tutorial</a><br>to show the goal of @property in Objective-C.</li>
</ul>
<p>An object’s properties let other objects inspect or change its state. But, in a well-designed object-oriented program, it’s not possible to directly access the internal state of an object. Instead, accessor methods (getters and setters) are used as an abstraction for interacting with the object’s underlying data.</p>
<p><img src="http://img0.tuicool.com/7raeeq3.png!web" alt=""></p>
<p>The goal of the @property directive is to make it easy to create and configure properties by automatically generating these accessor methods. It allows you to specify the behavior of a public property on a semantic level, and it takes care of the implementation details for you.</p>
<ul>
<li><code>@synthesize</code><br>: First of all, this feature is called<br><strong>autosynthesis</strong><br>of properties and it’s an<br><a href="http://clang.llvm.org/docs/LanguageExtensions.html#objective-c-autosynthesis-of-properties" target="_blank" rel="external">Objective-C language extension supported by clang</a><br>, which is the default compiler used by Xcode.</li>
</ul>
<p>Thanks to autosynthesis you don’t need to explicitly synthesize the property as it will be automatically synthesized by the compiler as<code>@synthesize propertyName = _propertyName</code>.</p>
<p>While, there’re some exceptions here:</p>
<ul>
<li>Readwrite property with custom getter and setter;</li>
<li>Readonly property with custom getter;</li>
<li>@dynamic (which is opposited to<br><code>@synthesize</code><br>);</li>
<li>Properites declared in a @protocol;</li>
<li>Properties declared in a category;</li>
<li>Overriden properties.</li>
</ul>
<p><img src="http://img1.tuicool.com/QNryQrn.png!web" alt=""></p>
<p>In this condition, property<code>name</code>is set to be<code>readwrite</code>(as it is by default) with custom getter and setter. At this time, compiler believes that you want to take full control over<code>@property</code>manually, and then forbids autosynthesis for you.</p>
<p>We’ve already been used to not defining ivars on our own, once you have to use ivar, while autosynthesis is invalid, you’ll have to use<code>@synthesize</code>to compound ivars(i.e. let out the comment for line 24 in the image above).</p>
<p>Here’s a little sample.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">@interface</div><div class="line">Car</div><div class="line">:</div><div class="line">NSObject</div><div class="line">@property</div><div class="line"> (</div><div class="line">strong</div><div class="line">, </div><div class="line">readwrite</div><div class="line">) </div><div class="line">NSString</div><div class="line"> *name;</div><div class="line"></div><div class="line">@end</div><div class="line">@implementation</div><div class="line">Car</div><div class="line">@end</div><div class="line">@interface</div><div class="line">Tesla</div><div class="line">:</div><div class="line">Car</div><div class="line">@property</div><div class="line"> (</div><div class="line">strong</div><div class="line">, </div><div class="line">readwrite</div><div class="line">) </div><div class="line">NSString</div><div class="line"> *name;</div><div class="line"></div><div class="line"></div><div class="line">@end</div><div class="line">@implementation</div><div class="line">Tesla</div><div class="line">@synthesize</div><div class="line"> name;</div><div class="line"></div><div class="line">- (</div><div class="line">void</div><div class="line">)printVar</div><div class="line">&#123;</div><div class="line">	</div><div class="line">super</div><div class="line">.name = </div><div class="line">@&quot;Car&quot;</div><div class="line">;</div><div class="line">	</div><div class="line">NSLog</div><div class="line">(</div><div class="line">@&quot;Tesla: Hello %@, ivar: %@，super: %@&quot;</div><div class="line">, </div><div class="line">self</div><div class="line">.name, </div><div class="line">self</div><div class="line">-</div><div class="line">&gt;</div><div class="line">name, </div><div class="line">super</div><div class="line">.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Output in console:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">2017-06-30</div><div class="line">16</div><div class="line">:02</div><div class="line">:03.946</div><div class="line">BlockSample</div><div class="line">[86278:38771956]</div><div class="line">Tesla</div><div class="line">: </div><div class="line">Hello</div><div class="line">Tesla</div><div class="line">, </div><div class="line">ivar</div><div class="line">: </div><div class="line">Tesla</div><div class="line">，</div><div class="line">super</div><div class="line">: </div><div class="line">Car</div></pre></td></tr></table></figure>
<p>It’s also fine to get subclass’s ivar<code>name</code>simply by<code>name</code>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/mQJbiaj" target="_blank" rel="external">http://www.calios.gq/2017/05/30/Issue-of-lazy-loading-property/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve got some&lt;code&gt;readonly&lt;/code&gt;properties in my .h file. And when I tried to lazy loading them as usual like this.&lt;/p&gt;
&lt;figure class=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Get epic graphic design skills and the diploma to prove it</title>
    <link href="https://gmagon.com/blog/2017/06/30/get-epic-graphic-design-skills-and-the-diploma-to-prove-it/"/>
    <id>https://gmagon.com/blog/2017/06/30/get-epic-graphic-design-skills-and-the-diploma-to-prove-it/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:03:41.544Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img1.tuicool.com/BvQbAzQ.jpg!web" alt=""></p>
<p>You know when you see a simple new company logo then hear that they paid<strong>half a million dollars</strong>for it? A graphic designer did that. If you want to get in on this action, the<a href="https://goo.gl/LEaxcr" target="_blank" rel="external"><strong>Graphic Design Certification School</strong></a>can teach you the skills <strong>and get you certified</strong>in the process.</p>
<p>It’s not enough to be creative these days, to make it as a designer you need to have an<strong>intimate knowledge of the software</strong>. This learning kit comprises<strong>expert training</strong>in the big three Adobe design packages.</p>
<h2 id="Here’s-what-you-get"><a href="#Here’s-what-you-get" class="headerlink" title="Here’s what you get:"></a>Here’s what you get:</h2><p><a href="https://goo.gl/LEaxcr" target="_blank" rel="external">Photoshop Course</a>– $399 value</p>
<p><a href="https://goo.gl/LEaxcr" target="_blank" rel="external">InDesign Course</a>– $399 value</p>
<p><a href="https://goo.gl/LEaxcr" target="_blank" rel="external">Illustrator Course</a>– $399 value</p>
<p>Starting from the basics you’ll<strong>learn everything you need to know</strong>about<strong>creating and editing images and documents</strong>for print or online publishing. From fundamentals like pixels to layering and creating 3D images. You’ll<strong>also learn the need-to-know details</strong>associated with graphic design, such as image rights.</p>
<p>You could sign up for these courses out of<strong>pure interest</strong>, but there are<strong>great extras</strong>too. The package is<strong>CPD certified</strong>so you’re both learning and accumulating CPD hours. If that doesn’t mean much to you, then how about this – Each course includes an online assessment, which leads to<strong>a DTP Master Diploma</strong>. How do you like those apples.</p>
<p>You’ll learn everything you need to know about creating and editing images</p>
<p>There’s a stonking<a href="https://goo.gl/LEaxcr" target="_blank" rel="external"><strong>96% discount</strong></a>on this toolkit right now, so this tasty bundle is all yours for<a href="https://goo.gl/LEaxcr" target="_blank" rel="external"><strong>just $39.</strong></a>That’s for<strong>lifetime access</strong>too, so if you fancy taking it on at any time then<strong> sign up now while it’s on offer.</strong></p>
<p>Don’t leave it too late.<strong>Hit the button below</strong>to join the 2,000 people already enrolled.</p>
<p><a href="https://goo.gl/LEaxcr" target="_blank" rel="external">check it out!</a></p>
<p>Is this deal not quite right for you? Head over to the<a href="https://goo.gl/WPGPbB" target="_blank" rel="external">AAPICKS HUB</a>for more savings you’re going to love! For notifications of offers and price drops, sign up for our<a href="https://goo.gl/WbwVpc" target="_blank" rel="external">Deal Alerts</a>newsletter.</p>
<p>We may get a small percent from purchases made through our posts. However, the AA Picks team only showcases verified, legitimate deals. It’s a nice way to help keep the lights on around here, and it decreases our reliance on pesky ads. If you have questions or concerns, please reach out at<a href="mailto:aapicks@androidauthority.com" target="_blank" rel="external">aapicks@androidauthority.com</a>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/j6nEnm" target="_blank" rel="external">http://www.androidauthority.com/graphic-design-school-2-782862/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/BvQbAzQ.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You know when you see a simple new company logo then hear that they pai
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bid Farewell to These 6 Worst Website Design Habits</title>
    <link href="https://gmagon.com/blog/2017/06/30/bid-farewell-to-these-6-worst-website-design-habits/"/>
    <id>https://gmagon.com/blog/2017/06/30/bid-farewell-to-these-6-worst-website-design-habits/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:03:41.540Z</updated>
    
    <content type="html"><![CDATA[<p>Your website is the primary online identity of your business. Hence, it has to be flawless. It is the space through which your potential clients can gather all their information on your company. A well designed<a href="https://www.perth-web-design.com.au/website-design-portfolio/" target="_blank" rel="external">web design</a>can make or break your business. Hence, it is crucial that you avoid some of the common design mistakes which do not speak well to the visitors.</p>
<h2 id="Lack-of-User-Friendliness"><a href="#Lack-of-User-Friendliness" class="headerlink" title="Lack of User Friendliness"></a>Lack of User Friendliness</h2><p>The first and foremost thing to keep in mind while designing your website is its user friendliness. You cannot assume all of your visitors to be extremely tech savvy. If your website is not easy to access and browse through for users of different levels of technological competence, it can give rise to frustration, which in turn, will make them customers abandon your space. Therefore, make sure all the necessary content or contact information is displayed clearly. Use easily accessible menu tabs, call to action buttons and whatever else it takes to ensure a smooth experience for your visitors.</p>
<h2 id="Thoughtless-use-of-Colors"><a href="#Thoughtless-use-of-Colors" class="headerlink" title="Thoughtless use of Colors"></a>Thoughtless use of Colors</h2><p>It is important to know what your company represents and how to present all of it though your web design. Using the right kind of color scheme and design is crucial else you might end up<a href="https://tech.co/employee-benefits-package-millennial-2017-01" target="_blank" rel="external">damaging your company’s image</a>. Choose your colors wisely, keeping in mind the image you want to portray. Keep it simple but stunning. First, decide if you want a complimentary or contrasting color scheme, and once decided, stick to it.</p>
<h2 id="Lack-of-White-Space"><a href="#Lack-of-White-Space" class="headerlink" title="Lack of White Space"></a>Lack of White Space</h2><p>If there is one thing that annoys a visitor infinitely, it is the lack of white space. White space is a stretch of blank space on your website, which is intended to strike a balance between the matter so as to ensure a better view of the content. Gone are the shiny, glittery designs of the nineties where websites tend to cram everything into one page. Minimalism offers a clean look which helps your viewer focus on the content better.</p>
<p><img src="http://img2.tuicool.com/7FRVNbQ.jpg!web" alt=""></p>
<h2 id="Autoplays-and-Pop-Ups"><a href="#Autoplays-and-Pop-Ups" class="headerlink" title="Autoplays and Pop Ups"></a>Autoplays and Pop Ups</h2><p>Often websites choose to include a small pop up page to ask their users to register or to advertise their content but it is not an advisable design. Concentrate more on the content than on such mindless advertisement. If your website is informative and well structured, viewers will automatically choose to register or look into your other content. Don’t distract your visitors with an annoying pop up. Similarly, autoplay can be an extremely infuriating feature on a website. For example, if someone is checking your website out at work or on a cab, it can be frustrating if an<a href="http://www.dreamytricks.net/free-music-download-apps-for-android/" target="_blank" rel="external">music starts playing automatically</a>. Give your users the choice to play it instead of forcing it upon them.</p>
<h2 id="Slow-Loading-Design"><a href="#Slow-Loading-Design" class="headerlink" title="Slow Loading Design"></a>Slow Loading Design</h2><p>Always keep this in mind that your viewers will not spend an extra second waiting for your website to load. Therefore, make sure that your website is not too loaded to compromise loading speed. You can get rid of heavy designs like carousels, too many pictures, videos, etc., which slow down the loading process. Make sure you put only the most essential content on your page above the fold. Your user will not mind scrolling over to the next page but aslow loading page will definitely make you lose out on visitors.</p>
<h2 id="Non-Responsive-Design"><a href="#Non-Responsive-Design" class="headerlink" title="Non Responsive Design"></a>Non Responsive Design</h2><p>As more and more people are shifting to hand held mobile devices to access the internet, it is almost a crime to not make your website mobile responsive. Lack of responsiveness will not only make your website difficult to view on a smaller device like a tablet or a mobile phone, it will also push down your ratings on the Google search, which can be disastrous for any website.</p>
<p>Design your website wisely as it is the face of your company. It is what gives your potential clients an idea about your organization and helps you turn your visitors into clients. Hence, avoid these mistakes to ensure an excellent viewing experience for your visitors.</p>
<p>Read more<a href="https://tech.co/entrepreneur/development-design" target="_blank" rel="external">about designing a quality website for your company</a>at TechCo</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/ENfiyi3" target="_blank" rel="external">https://tech.co/bid-farewell-worst-design-habits-2017-06</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your website is the primary online identity of your business. Hence, it has to be flawless. It is the space through which your potential 
    
    </summary>
    
    
  </entry>
  
</feed>
