<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gmagon Software Official Website - Fast, simple &amp; powerful solutions for everyone.</title>
  <subtitle>Gmagon Software Official Website - Fast, simple &amp; powerful solutions for everyone and more. Visit the site to learn, buy, and get support.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmagon.com/"/>
  <updated>2017-07-04T10:12:45.988Z</updated>
  <id>https://gmagon.com/</id>
  
  <author>
    <name>Gmagon Inc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Researchers Crack 1024-bit RSA Encryption in GnuPG Crypto Library</title>
    <link href="https://gmagon.com/blog/2017/07/04/researchers-crack-1024-bit-rsa-encryption-in-gnupg-crypto-library/"/>
    <id>https://gmagon.com/blog/2017/07/04/researchers-crack-1024-bit-rsa-encryption-in-gnupg-crypto-library/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.988Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img0.tuicool.com/Qn67Bja.png!web" alt=""></p>
<p>Security boffins have discovered a critical vulnerability in a GnuPG cryptographic library that allowed the researchers to completely break RSA-1024 and successfully extract the secret RSA key to decrypt data.</p>
<p>Gnu Privacy Guard (GnuPG or GPG) is popular open source encryption software used by many operating systems from Linux and FreeBSD to Windows and macOS X.</p>
<p>It’s the same software used by the former NSA contractor and whistleblower Edward Snowden to keep his communication secure from law enforcement.</p>
<p>The vulnerability, labeled<a href="https://lists.gnupg.org/pipermail/gnupg-announce/2017q2/000408.html" target="_blank" rel="external">CVE-2017-7526</a>, resides in the<strong>Libgcrypt</strong>cryptographic library used by GnuPG, which is prone to local FLUSH+RELOAD side-channel attack.</p>
<p>A team of researchers — from Technical University of Eindhoven, the University of Illinois, the University of Pennsylvania, the University of Maryland, and the University of Adelaide — found that the “left-to-right sliding window” method used by the libgcrypt library for carrying out the mathematics of cryptography leaks significantly more information about exponent bits than for right-to-left, allowing full RSA key recovery.</p>
<p>“In this paper, we demonstrate a complete break of RSA-1024 as implemented in Libgcrypt. Our attack makes essential use of the fact that Libgcrypt uses the left-to-right method for computing the sliding-window expansion,” the researchers wrote in the<a href="https://eprint.iacr.org/2017/627.pdf" target="_blank" rel="external">research paper</a>.</p>
<p>“The pattern of squarings and multiplications in left-to-right sliding windows leaks significantly more information about the exponent than right-to-left. We show how to extend the Heninger-Shacham algorithm for partial key reconstruction to make use of this information and obtain a very efficient full key recovery for RSA-1024.”</p>
<p>L3 Cache Side-Channel Attack requires an attacker to run arbitrary software on the hardware where the private RSA key is used.</p>
<p>The attack allows an attacker to extract the secret crypto key from a system by analyzing the pattern of memory utilization or the electromagnetic outputs of the device that are emitted during the decryption process.</p>
<p>“Thus in practice, there are easier ways to access the private keys than to mount this side-channel attack. However, on boxes with virtual machines, this attack may be used by one VM to steal private keys from another VM,” Libgcrypt<a href="https://lists.gnupg.org/pipermail/gnupg-announce/2017q2/000408.html" target="_blank" rel="external">advisory</a>reads.</p>
<p>Researchers have also provided evidence that the same side channel attack also works against RSA-2048, which require moderately more computation than RSA-1024.</p>
<p>The research paper titled, ‘Sliding right into disaster: Left-to-right sliding windows leak,’ was authored by David J. Bernstein, Joachim Breitner, Daniel Genkin, Leon Groot Bruinderink, Nadia Heninger, Christine van Vredendaal, Tanja Lange and Yuval Yarom.</p>
<p>Libgcrypt has released a fix for the issue in Libgcrypt version 1.7.8.<a href="https://www.debian.org/security/2017/dsa-3901" target="_blank" rel="external">Debian</a>and<a href="https://www.ubuntuupdates.org/package/core/zesty/main/updates/libgcrypt20-dev" target="_blank" rel="external">Ubuntu</a>have already updated their library with the latest version of Libgcrypt.</p>
<p>So, you are strongly advised to check if your Linux distribution is running the latest version of the Libgcrypt library.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/2uUvMfZ" target="_blank" rel="external">http://thehackernews.com/2017/07/gnupg-libgcrypt-rsa-encryption.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/Qn67Bja.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Security boffins have discovered a critical vulnerability in a GnuPG cr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Real World React apps and their open source codebases for developers to learn from</title>
    <link href="https://gmagon.com/blog/2017/07/04/real-world-react-apps-and-their-open-source-codebases-for-developers-to-learn-from/"/>
    <id>https://gmagon.com/blog/2017/07/04/real-world-react-apps-and-their-open-source-codebases-for-developers-to-learn-from/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Real-World-React"><a href="#Real-World-React" class="headerlink" title="Real World React"></a>Real World React</h2><p>Real World React apps and their open source codebases for developers to learn from</p>
<p>Learn from React apps written by experienced developers.</p>
<p>You’ll find the source code for the Real World React apps in the<a href="https://github.com/jeromedalbert/real-world-react/blob/master/apps" target="_blank" rel="external"><code>apps/</code></a>subdirectory.</p>
<p>Thank you to every developer who has worked on a project this repo links to, your work is helping developers learn React.</p>
<h2 id="How-to-install-on-your-computer"><a href="#How-to-install-on-your-computer" class="headerlink" title="How to install on your computer"></a>How to install on your computer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># Clone this git repo:</div><div class="line">git</div><div class="line"> clone git</div><div class="line">@github</div><div class="line">.com:jeromedalbert/real-world-react.git</div><div class="line"></div><div class="line">cd real-world-react/</div><div class="line"></div><div class="line"></div><div class="line"># The apps are linked to as git submodules.</div><div class="line"># This will take some time...</div><div class="line"></div><div class="line">git submodule update --init</div></pre></td></tr></table></figure>
<h2 id="Information-for-Contributors"><a href="#Information-for-Contributors" class="headerlink" title="Information for Contributors"></a>Information for Contributors</h2><h4 id="Is-your-app-the-right-fit"><a href="#Is-your-app-the-right-fit" class="headerlink" title="Is your app the right fit?"></a>Is your app the right fit?</h4><ul>
<li>A real world app should ideally be publicly accessible and used by real people in a production environment. As such, boilerplate, starter kits, libraries, and small demo/example projects are not really a good fit.</li>
<li>Ideally most of the code should be frontend-oriented, in order to focus on React. Small backends may be OK, but should constitute the minority of the codebase.</li>
</ul>
<p>That being said, don’t hesitate to submit a pull request if you meet the criteria!</p>
<h4 id="How-to-add-a-Real-World-App"><a href="#How-to-add-a-Real-World-App" class="headerlink" title="How to add a Real World App"></a>How to add a Real World App</h4><p>Given a GitHub repo for an app<code>githubuser/foo</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Inside the project root:</div><div class="line">git</div><div class="line"> submodule add -b master git</div><div class="line">@github</div><div class="line">.com:githubuser/foo.git apps/foo</div></pre></td></tr></table></figure>
<h4 id="Updating-the-apps-submodules-to-latest"><a href="#Updating-the-apps-submodules-to-latest" class="headerlink" title="Updating the apps submodules to latest"></a>Updating the apps submodules to latest</h4><p>The apps in<code>apps/</code>are git submodules. Git submodules are locked to a revision and don’t stay in sync with the latest revision.</p>
<p>To update the revisions, run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># This will take some time:</div><div class="line">git</div><div class="line"> submodule foreach git pull origin master</div></pre></td></tr></table></figure>
<h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul>
<li>Jerome Dalbert<br><a href="http://jeromedalbert.com/" target="_blank" rel="external">http://jeromedalbert.com</a></li>
<li>Contributions are welcome, fork the GitHub repo, make your changes, then submit your pull request! Reach out if you’d like some help.</li>
</ul>
<p>Source: <a href="http://www.tuicool.com/articles/hit/3QjiYbZ" target="_blank" rel="external">https://github.com/jeromedalbert/real-world-react</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Real-World-React&quot;&gt;&lt;a href=&quot;#Real-World-React&quot; class=&quot;headerlink&quot; title=&quot;Real World React&quot;&gt;&lt;/a&gt;Real World React&lt;/h2&gt;&lt;p&gt;Real World Rea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Customize Color with Styled Google Maps in Android</title>
    <link href="https://gmagon.com/blog/2017/07/04/customize-color-with-styled-google-maps-in-android/"/>
    <id>https://gmagon.com/blog/2017/07/04/customize-color-with-styled-google-maps-in-android/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.981Z</updated>
    
    <content type="html"><![CDATA[<p>You can now style and customize your Google Maps colors and more. In this Android tutorial, let’s see how we can do that in our apps.</p>
<p>Google Maps has added this ability across all platforms. This means regardless of whether you use Google Maps for Web, iOS or Android, you’ll be able to style them.</p>
<p>By default, Google Maps looks like this.</p>
<p><img src="http://img0.tuicool.com/7zuI7fm.png!web" alt=""></p>
<p>Default Google Maps</p>
<p>We’re all used to this and by no means am I saying it looks bad. But say I want to display a map that corresponds to my brand color scheme.</p>
<p><img src="http://img2.tuicool.com/6nqUbeJ.png!web" alt=""></p>
<p><a href="https://dribbble.com/shots/3136953-Directions-Module" target="_blank" rel="external">Directions Module by David Rodriguez</a></p>
<p>Now imagine if my only option was to display the default Google maps, with it’s default colors. It wouldn’t go well with the design, would it? The color scheme of the map won’t be in harmony with the rest of the design. In other words, it sticks out, like a sore thumb.</p>
<p>In such scenarios, we need a map that reflects our brand theme. Our brand color palette. This wasn’t possible before.</p>
<p><img src="http://img0.tuicool.com/FZnENfz.png!web" alt=""></p>
<p>But now, Google allows Styled maps. Using this, we can customize the map to look the way we want. This includes modifying colors, with a very high degree of control.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>We’ll start by creating a new Android Studio project. Thankfully, we have pre-defined templates (for Activities) to start with.<a href="http://blog.iamsuleiman.com/image-gallery-app-android-studio-1-4-glide/" target="_blank" rel="external">Activity templates were introduced in Android Studio 1.4</a>.</p>
<p>So when you create a new project, chose the ‘Google<em>Maps Activity</em>’ template.</p>
<p><img src="http://img0.tuicool.com/Eb2i63U.png!web" alt=""></p>
<p>Android Studio – Activity Templates</p>
<p>Here are the project settings:</p>
<ul>
<li>minSdkVersion – 14</li>
<li>targetSdkVersion – 26</li>
</ul>
<p>Thanks to this, we don’t have to spend a lot of time configuring the Maps SDK and whatnot. I remember the first time I tried using Maps in Android (back in 2012). It took me well over an hour to simply display a Map!</p>
<p>But you don’t have to worry anymore as we’ve come a long way from that!</p>
<h3 id="Configuring-Google-Maps"><a href="#Configuring-Google-Maps" class="headerlink" title="Configuring Google Maps"></a>Configuring Google Maps</h3><p>Once the project has loaded, Android Studio will open the<strong>google_maps_api.xml</strong>file by default.</p>
<p><img src="http://img2.tuicool.com/Ava6Rra.png!web" alt=""></p>
<p>Auto-generated maps_api.xml</p>
<p>You’ll notice there is one step to follow to get your Google Maps API Key. Trust me, this is nothing compared to the amount of steps earlier!</p>
<p>So follow the comments on the file. Don’t worry, I’ll still walk you through them. but you’ll have to grab the URL and keys from the google_maps_api.xml file’s comments.</p>
<h4 id="1-Go-to-the-URL-provided-–console-developers-google-com"><a href="#1-Go-to-the-URL-provided-–console-developers-google-com" class="headerlink" title="1. Go to the URL provided –console.developers.google.com"></a>1. Go to the URL provided –<em>console.developers.google.com</em></h4><p>You’ll land on a page like this.</p>
<p><img src="http://img2.tuicool.com/iyInaqe.png!web" alt=""></p>
<p>Create a new project in Google Developer Console</p>
<p>Select ‘Create a Project’ from the dropdown and then hit the Continue button.</p>
<h4 id="2-Create-Google-Maps-API-Key"><a href="#2-Create-Google-Maps-API-Key" class="headerlink" title="2. Create Google Maps API Key"></a>2. Create Google Maps API Key</h4><p>In the next step (screen), click the ‘Create API Key’ button</p>
<p><img src="http://img1.tuicool.com/qa2am26.png!web" alt=""></p>
<p>Creating new API key…</p>
<h4 id="3-Get-your-generated-API-Key"><a href="#3-Get-your-generated-API-Key" class="headerlink" title="3. Get your generated API Key"></a>3. Get your generated API Key</h4><p>Google now generated your Maps API key. So copy it and paste it in your XML file for the string name ‘google_maps_key’. Replace the ‘YOUR_KEY_HERE’ with your actual API key!</p>
<p>You can optionally set up API Key restrictions if you want (see screenshot above). It’s fairly simple. Click restrictions and you’ll get a screen like this.</p>
<p><img src="http://img2.tuicool.com/bYjABrQ.png!web" alt=""></p>
<p>Generated API key restrictions</p>
<p>Choose ‘Key restriction’ as ‘Android Apps’ and hit Save button. Note that you don’t have to bother about the Package name and SHA-1 certificate fingerprint. You’ll realize that the fingerprint is same as the one in your Android Studio project comments.</p>
<p>In other words, Google took care of that for you too. Sweet? Now let’s move on.</p>
<p>With our API key in place, we’re finally ready to use Google Maps.</p>
<p>But before we get to styling, let’s check if Maps itself works. So run your app and check it out.</p>
<p>It’s always better to test every step of the way. Otherwise, you’ll never know what went wrong where.</p>
<p><img src="http://img1.tuicool.com/FbAniib.png!web" alt=""></p>
<p>NOTE:</p>
<p>Google Maps needs Google Play Services to work. So it’s safe to always run the app on a real device. Or, you can configure and use an AVD that includes Google APIs with Play Services.</p>
<p>Here’s how Google Maps loads on my phone.</p>
<p><img src="http://img1.tuicool.com/3QJrquQ.png!web" alt=""></p>
<p>Default Google Maps – Android</p>
<p>It works just fine. So let’s finally move on to styling it.</p>
<h4 id="Using-Styled-Maps"><a href="#Using-Styled-Maps" class="headerlink" title="Using Styled Maps"></a>Using Styled Maps</h4><p>Google Maps can load styling options via two different formats:</p>
<h4 id="1-–-JSON-file"><a href="#1-–-JSON-file" class="headerlink" title="1 – JSON file"></a>1 – JSON file</h4><p>You load the JSON file in the onMapReady() method.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123;</div><div class="line">    </div><div class="line">try</div><div class="line"> &#123; </div><div class="line">        </div><div class="line">// Customise map styling via JSON file </div><div class="line">boolean</div><div class="line"> success = googleMap.setMapStyle( MapStyleOptions.loadRawResourceStyle( </div><div class="line">this</div><div class="line">, R.raw.style_map_json));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>String resource Using a string resource works in a similar way.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123; </div><div class="line">    </div><div class="line">try</div><div class="line"> &#123; </div><div class="line">        </div><div class="line">// Customise map styling via String resource </div><div class="line">boolean</div><div class="line"> success = googleMap.setMapStyle(</div><div class="line">new</div><div class="line"> MapStyleOptions(getResources() .getString(R.string.style_json)));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Now we know how to load our Map styles. But how do we actually create our style? Let’s look at that next.</p>
<h2 id="Creating-a-Color-Theme-for-Google-Maps"><a href="#Creating-a-Color-Theme-for-Google-Maps" class="headerlink" title="Creating a Color Theme for Google Maps"></a>Creating a Color Theme for Google Maps</h2><p>I’ll put it bluntly. There are two ways you can go about it.</p>
<p>One, write a JSON file. Manually writing every property (do you even know them?).</p>
<p>Or two, using the Map Styling Wizard.</p>
<p>In other words, save yourself time and frustration. Go with the second option. Use the Styling Wizard. It’s a no-brainer. Seriously!</p>
<h3 id="Google-Maps-Styling-Wizard"><a href="#Google-Maps-Styling-Wizard" class="headerlink" title="Google Maps Styling Wizard"></a>Google Maps Styling Wizard</h3><p><img src="http://img0.tuicool.com/If2AZ37.png!web" alt=""></p>
<p>Welcome to Google Maps Styling Wizard</p>
<p>For this part, you just play around with the Styling Wizard. Adjust the density of features depending on how much detail you want on the map. Then select a basic, pre-defined theme to work with. Finally, you can click on ‘MORE OPTIONS’ to alter the properties of each Map object. Trust me, there’s a LOT of things you can customize that it’s easy to get lost.</p>
<p><img src="http://img1.tuicool.com/fqAVJr2.png!web" alt=""></p>
<p>Abundant customization options in Map Styling Wizard</p>
<p>I’ve chosen very light, pastel-like colors for the map. These are colors mainly for the terrain, parks, water and highways.</p>
<p>Once you’re done, click the FINISH button. Next, copy the JSON from the popup that appears.</p>
<p><img src="http://img1.tuicool.com/bi2mIfJ.png!web" alt=""></p>
<p>Auto-generated JSON from Styling Wizard</p>
<p>Head over to your Android Studio project and create a new file under<em>Project/app/src/main/res/raw/<strong>maps.style.json</strong></em>.</p>
<p>This JSON file is where we’ll paste the JSON copied from the Maps Style Wizard. Now all that’s left is to tell Google Maps to load its style from this JSON file.</p>
<p>Remember we spoke about how to do this in the<code>onMapReady()</code>method?</p>
<p>Let me remind you again. Now that we have our JSON file ready, we can call it in like this.</p>
<p>Open<strong>MapsActivity.java</strong>and go to the<code>onMapReady()</code>method. The template has this method already implemented for you.</p>
<p>So with the default template existing, here’s how to load the Styled Map.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123; </div><div class="line">    mMap = googleMap;</div><div class="line">    </div><div class="line">try</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">boolean</div><div class="line"> success = mMap.setMapStyle(</div><div class="line">                MapStyleOptions.loadRawResourceStyle(</div><div class="line">                        </div><div class="line">this</div><div class="line">, R.raw.maps_style));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It’s actually just one line of code. The try catch block just makes it look verbose.</p>
<p><img src="http://img1.tuicool.com/uABbAfF.png!web" alt=""></p>
<p>With Styled Maps now loaded, run your app and check it.</p>
<h4 id="Styled-Maps-–-Output"><a href="#Styled-Maps-–-Output" class="headerlink" title="Styled Maps – Output"></a>Styled Maps – Output</h4><p>Based on the colors I chose against a Grey- themed Google Map, mine looks like this.</p>
<p><img src="http://img0.tuicool.com/jmaAb2B.png!web" alt=""></p>
<p>My custom styled Google Maps</p>
<p>I changed parks to purple color. Just so I visually know that Styled maps are working. I know it’s an ugly map. But I’m sure you can do better!</p>
<h4 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a>Wrap Up</h4><p>In this Android tutorial, we saw how to Style our default-looking Google Maps.</p>
<p>First, we created an Android Studio project, using the Maps Activity template. We then created an API key to use with Maps.</p>
<p>Next, we used the Maps Styling Wizard to configure Google Maps to our liking. Then, we pasted the generated JSON over to our project. Finally, we told Google Maps to load its styling from that JSON file.</p>
<h4 id="Where-to-from-here"><a href="#Where-to-from-here" class="headerlink" title="Where to from here?"></a>Where to from here?</h4><p>That’s all there is to it! With Styled maps, it is now possible to customize Google Maps to be more relevant to your app color-scheme. No more out-of-place looking Maps. If used properly they can now blend well with your UI designs.</p>
<p>How are you going to customize your map? I’m very interested to see what you’ll come up with. Show me in the comments below.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/b2Mf2qJ" target="_blank" rel="external">http://blog.iamsuleiman.com/styled-google-maps-customize-color-android/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You can now style and customize your Google Maps colors and more. In this Android tutorial, let’s see how we can do that in our apps.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Apple, Google and other Nasdaq Stocks Swing Wildly in After-Hours Trading</title>
    <link href="https://gmagon.com/blog/2017/07/04/apple-google-and-other-nasdaq-stocks-swing-wildly-in-after-hours-trading/"/>
    <id>https://gmagon.com/blog/2017/07/04/apple-google-and-other-nasdaq-stocks-swing-wildly-in-after-hours-trading/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.978Z</updated>
    
    <content type="html"><![CDATA[<p>The prices of shares in some of the world’s biggest companies seemed to alternately plummet or soar in after-hours trading on Nasdaq Inc.’s flagship exchange.</p>
<p>The likes ofand Microsoft Corp.’s shares appeared to fall by more than 50 percent, while’s stock was at one stage trading 348 percent higher, data from post-market trading on the Nasdaq Stock Market showed on Monday. That gave the iPhone maker a theoretical market capitalization of $3.4 trillion, compared to the $751 billion at which it was valued when trading closed on Friday.</p>
<p>The swings came on a day that the U.S. stock market closed early at 1 p.m., on the eve of the July 4 holiday. In another unusual detail, pricing data showed more than a dozen securities including Apple, Microsoft and Nasdaq’s own company stock at the same price, $123.47. It wasn’t immediately clear if shares changed hands at those prices.</p>
<p>The apparent swings triggered trading halts in some securities, according to automatically generated messages. The halts are a mechanism exchanges use to limit the impact of particularly volatile sessions. A system status alert on Nasdaq’ssaid that systems were operating normally at 8:23 p.m. ET. After-market hours on Nasdaq typically last from 4 p.m. to 8:00 p.m.</p>
<p>Will Briganti, a spokesman for Nasdaq, was unable to immediately comment on the situation.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/fI3Ane2" target="_blank" rel="external">http://www.bloomberg.com/news/articles/2017-07-04/nasdaq-stocks-show-exaggerated-movements-in-after-hours-trading</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The prices of shares in some of the world’s biggest companies seemed to alternately plummet or soar in after-hours trading on Nasdaq Inc.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Delaware Passes Bill Recognizing Stock Trading via Blockchain Technology</title>
    <link href="https://gmagon.com/blog/2017/07/04/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/"/>
    <id>https://gmagon.com/blog/2017/07/04/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.983Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img1.tuicool.com/NVfMnuv.jpg!web" alt=""></p>
<p>Delaware has passed a bill that legally recognizes the trading of stocks using blockchain technology. Although the state has sought to promote itself as a bastion for blockchain investment, the bill is extremely limited in its scope – leading many to view Delaware’s government as attempting to cash in on bitcoin’s recent boom.</p>
<p><em><strong>Also Read: </strong></em><a href="https://news.bitcoin.com/bitwage-launches-uk-bitcoin-payroll-services/" target="_blank" rel="external"><em>Bitwage Officially Launches UK Bitcoin Payroll Services</em></a></p>
<h2 id="Delaware’s-Blockchain-Bill-Has-Been-Championed-by-Blockchain-Start-Up-Symbiont"><a href="#Delaware’s-Blockchain-Bill-Has-Been-Championed-by-Blockchain-Start-Up-Symbiont" class="headerlink" title="Delaware’s Blockchain Bill Has Been Championed by Blockchain Start-Up Symbiont"></a>Delaware’s Blockchain Bill Has Been Championed by Blockchain Start-Up Symbiont</h2><p>Recent<a href="http://www.coindesk.com/delaware-house-passes-historic-blockchain-regulation/" target="_blank" rel="external">reports</a>have announced the near unanimous passing of a<a href="http://www.coindesk.com/delaware-blockchain-stock-bill-likely-to-advance-in-house-vote-today/" target="_blank" rel="external">bill</a>in the US state of Delaware that will explicitly recognize the right to trade stocks using a blockchain. The chair of the Delaware bar association’s corporate law section describing the vote as “keep[ing] Delaware at the forefront of corporate law and in the lead in terms of enabling the use of ‘distributed ledger shares’.” The bill is expected to be signed into law by Delaware’s governor, John Carney, before the end of July.</p>
<p><img src="http://img0.tuicool.com/UZ7nueb.png!web" alt=""></p>
<p>Delaware’s blockchain bill has been championed by blockchain start-up Symbiont, who has<a href="https://bitcoinmagazine.com/articles/private-capital-market-ecosystems-meet-blockchain/" target="_blank" rel="external">partnered</a>with Hong Kong-based Privatemarket.io to build an “alternative investment marketplace for closed-end funds” that is built using Symbiont’s smart-contract software. The bill was developed under close legal guidance from Marco Santori of Cooley LLP and Symbiont’s Caitlin Long – suggesting that Symbiont will be among the early high-profile blockchain businesses seeking to operate within Delaware. When announcing the partnership with Privatemarket to offer stock trading via blockchain technology, Symbiont stated “We see blockchain technology having a significant positive impact on the investment world, and it starts with the fact that the foundational document for any investment — the registration of a company — will likely soon be possible to do on a blockchain in Delaware”.</p>
<p>The Bill Draws Attention to the Absence of Legal Consensus Pertaining to Blockchain Technology</p>
<p>Although the passing of the bill is positive step toward permissive bitcoin regulation, many see the bill having been custom tailored to the desires of Symbiont’s legal team – with the recognition of stock trading via blockchain comprises a very limited step toward blockchain regulation – especially when contrasted with recent moves by Japan, South Korea and Australia in recognizing bitcoin as a legal form of payment.</p>
<p><img src="http://img1.tuicool.com/2aUfUzb.jpg!web" alt=""></p>
<p>The passing of the bill draws attention to the absence of clear legal definitions and apparatus pertaining to blockchain technology. The lack of federal legal consensus regarding basic bitcoin and blockchain technology suggests that some theproblems within the regulatory framework dealing with cannabis-based businesses could potentially emerge within bitcoin, such as overlapping or contradicting federal laws. It is entirely possible that particular states may seek to become early bastions of blockchain investment, seeking to capitalize on a nascent booming industry in the same fashion as Colorado or Seattle with regards to the cannabis industry.</p>
<p>Although the positive ramifications from further government embracement of bitcoin and blockchain technology are undeniable, the risk of hastily rushed state legislations running afoul of future federal regulations is very real – especially given the absence of legal consensus on the definition of fundamental terminology such as ‘blockchain’. In the case of Delaware, it is entirely possible that future federal laws may not recognize stock trading via blockchain technology, creating potential future legal and logistical challenges for businesses that seek to build their operations according to the laws of a single state.</p>
<p>Do you think that Delaware passing a bill recognizing stock trading via blockchain technology is a significant step toward cryptocurrency regulations? Share your thoughts in the comments section below!</p>
<p>Images courtesy of shutterstock</p>
<p>Need to calculate your bitcoin holdings? Check our <a href="http://tools.bitcoin.com/" target="_blank" rel="external">tools</a> section.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/YbYVryF" target="_blank" rel="external">https://news.bitcoin.com/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/NVfMnuv.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Delaware has passed a bill that legally recognizes the trading of stock
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bitwage Officially Launches UK Bitcoin Payroll Services</title>
    <link href="https://gmagon.com/blog/2017/07/03/bitwage-officially-launches-uk-bitcoin-payroll-services/"/>
    <id>https://gmagon.com/blog/2017/07/03/bitwage-officially-launches-uk-bitcoin-payroll-services/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img2.tuicool.com/iYzuUvb.jpg!web" alt=""></p>
<p>After expanding services in Europe earlier this year, bitcoin payroll and wage payment service provider Bitwage announced its official launch in the UK on Monday.</p>
<p><em><strong>Also read:</strong></em><a href="https://news.bitcoin.com/bitwage-launches-new-functionality-european-customers/" target="_blank" rel="external"><em>Bitwage Launches New Functionality for European Customers</em></a></p>
<h2 id="Bitwage’s-Official-Launch-in-the-UK"><a href="#Bitwage’s-Official-Launch-in-the-UK" class="headerlink" title="Bitwage’s Official Launch in the UK"></a>Bitwage’s Official Launch in the UK</h2><p><a href="https://www.bitwage.com/" target="_blank" rel="external">Bitwage</a><img src="http://img2.tuicool.com/BJneqen.png!web" alt="">offers solutions for remote workers to receive wages in a variety of currencies including bitcoin. Using the service, workers can get paid in bitcoin without having to ask each employer to pay in the cryptocurrency or sign up with Bitwage. They simply give the employers Bitwage’s bank account details to receive payments in.</p>
<p>Bitwage claims to have over 13,000 registered workers and have processed over $21.6 million in international wages. Users can invoice employers or clients in the United States (US), United Kingdom (UK), and the European Union (EU). Wages received can be split into any ratio between different bank accounts and bitcoin wallets.</p>
<p>On Monday, the company announced the official launch of their services in the UK, stating:</p>
<p>We are now able to offer workers anywhere in the world the ability to receive wages from companies in the UK through local banking partners. This means that our workers can receive wages through Faster Payments, Bacs, Chaps or Swift into local UK GBP bank accounts.</p>
<h2 id="Bacs-Faster-Payments-and-Chaps-Now-Supported"><a href="#Bacs-Faster-Payments-and-Chaps-Now-Supported" class="headerlink" title="Bacs, Faster Payments, and Chaps Now Supported"></a>Bacs, Faster Payments, and Chaps Now Supported</h2><p>Bitwage founder and president Jonathan Chester told Bitcoin.com that the company has been beta testing this service. He explained that although the ability to receive wages in British pounds (GBP) existed previously, it was not done locally and was never publicly launched. Without local UK partners, the service was not cost-effective. Chester detailed:</p>
<p>Before this, we had a banking partner with GBP correspondent accounts in Ireland that could receive Chaps, but not Faster Payments or Bacs. This was a costly solution for potential clients in the UK, so there was very little usage. We have now been working with these same customers during the beta testing of our new local UK services.</p>
<p><img src="http://img1.tuicool.com/BbIBrau.png!web" alt="">Chaps is the UK’s same-day high-value payment system, currently used by 26 direct participants including the Bank of England and over 5,000 indirect participants. Payments are transferred over Swift and settled intraday in central bank funds. In 2016 Chap’s volumes reached a record 39 million transactions, worth £75.6 trillion.</p>
<p><img src="http://img1.tuicool.com/iyy2mu7.png!web" alt="">Bacs is responsible for the clearing and settlement of UK automated payment methods, direct debit and Bacs direct credit. The company processed 6.22 billion transactions to UK bank accounts in 2016, worth £4.8 trillion. Faster Payments is a UK banking initiative which uses the Bacs system to reduce payment times between different banks’ customer accounts from three working days to a few hours. While Chaps focuses on same-day service for high-value transactions, Faster Payments is tailored to the much larger number of smaller payments.</p>
<h2 id="Bitwage’s-Growing-List-of-Services"><a href="#Bitwage’s-Growing-List-of-Services" class="headerlink" title="Bitwage’s Growing List of Services"></a>Bitwage’s Growing List of Services</h2><p>In April, Bitcoin.comreported on Bitwage launching unique IBANs for users receiving wages in the European Union. With Monday’s launch in the UK, <img src="http://img1.tuicool.com/22QFnyf.jpg!web" alt="">employers can pay in US dollars, British pounds, and euros. In addition, Bitwage can accept Canadian dollars, Australian dollars, Swiss Francs, and Japanese yen.</p>
<p>Payouts to the workers are far more diverse and are done on the same or next day. Currencies supported include bitcoin, ether, and litecoin, as well as the US dollar, the euro, the British pound, the Brazilian Real, the Philippine peso, the Mexican peso, the Argentine peso, the Indian rupee, the Vietnamese dong, the Nigerian naira, and the Ukrainian hryvnia.</p>
<p>Would you use Bitwage to receive your wages? Let us know in the comments section below.</p>
<p>Images courtesy of Shutterstock, Chaps, Bacs, Faster Payments, and Bitwage</p>
<p>Need to calculate your bitcoin holdings? Check our <a href="http://tools.bitcoin.com/" target="_blank" rel="external">tools</a> section.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/iqQfqmi" target="_blank" rel="external">https://news.bitcoin.com/bitwage-launches-uk-bitcoin-payroll-services/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img2.tuicool.com/iYzuUvb.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;After expanding services in Europe earlier this year, bitcoin payroll a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 4 News Roundup June</title>
    <link href="https://gmagon.com/blog/2017/07/03/angular-4-news-roundup-june/"/>
    <id>https://gmagon.com/blog/2017/07/03/angular-4-news-roundup-june/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.808Z</updated>
    
    <content type="html"><![CDATA[<p>WRITTEN BY<a href="https://twitter.com/jsdiaries" target="_blank" rel="external">GARETH DUNNE @JSDIARIES</a></p>
<p>ng-June</p>
<p>June has come and gone and it has brought with it a steady month of Angular 4 news. There is a chance that you could have missed a change to key features or components so I’ve listed some of the main snippets of news that may have passed you by.</p>
<p>Although there isn’t much reading material specifically for<strong>Angular 4</strong>I recommend having a look at<strong>ng-book: The Complete Guide to Angular 4</strong><a href="http://geni.us/LCTQUAa" target="_blank" rel="external">here</a>.</p>
<p>Its updated with Angular 4 practices and is one of the few books doing so.</p>
<p>Angular 4.2</p>
<p>The most notable piece of Angular news this month is the release of<strong>Angular 4.2</strong>. This is a small update and will not break your current Angular projects via Semantic Versioning which I covered in a previous posthere.</p>
<p>All changes pertaining to the release are mentioned on the official blog here. So what are main highlights we should take our of this update?</p>
<p>Well, the changes to allow the creation of reusable animations using the<code>animation()</code>function enables our animations to become more modular.</p>
<p>I’ve listed a very similar example as the docs here for reference.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var fadeAnimation = animation([</div><div class="line">  style(&#123; </div><div class="line">opacity:</div><div class="line">&apos;&#123;&#123; start &#125;&#125;&apos;</div><div class="line"> &#125;),</div><div class="line">  animate(</div><div class="line">&apos;&#123;&#123; time &#125;&#125;&apos;</div><div class="line">,</div><div class="line">    style(&#123; </div><div class="line">opacity:</div><div class="line">&apos;&#123;&#123; end &#125;&#125;&apos;</div><div class="line">))</div><div class="line">], &#123; </div><div class="line">params:</div><div class="line"> &#123; </div><div class="line">time:</div><div class="line">&apos;1000ms&apos;</div><div class="line">, </div><div class="line">start:</div><div class="line">0</div><div class="line">, </div><div class="line">end:</div><div class="line">1</div><div class="line"> &#125;&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">useAnimation</div><div class="line">(fadeAnimation, &#123;</div><div class="line">  </div><div class="line">params</div><div class="line">: &#123;</div><div class="line">    </div><div class="line">time</div><div class="line">: </div><div class="line">&apos;2s&apos;</div><div class="line">,</div><div class="line">    </div><div class="line">start</div><div class="line">: </div><div class="line">1</div><div class="line">,</div><div class="line">    </div><div class="line">end</div><div class="line">: </div><div class="line">0</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>As you can see we assign our animations to a variable, specify its animation properties and then invoke it using the<code>useAnimation</code>function</p>
<p>Typescript 2.4</p>
<p>Typescript has also updated to a new release, bringing with it dynamic import expressions as well as Safer callback parameter checking. There could be few posts written about these changes so I’ll let the official blog post do the talking<a href="https://blogs.msdn.microsoft.com/typescript/2017/06/12/announcing-typescript-2-4-rc/" target="_blank" rel="external">here</a>.</p>
<p>I’ll just note that the dynamic imports feature in particular is a fantastic addition in this new release. It allows an even deeper layer of lazy loading and enables Webpack to split your bundles even further to only load a particular asset required in a function.</p>
<p>Angular IO</p>
<p><img src="http://img0.tuicool.com/Ar6RRbB.png!web" alt=""></p>
<p>angularIO</p>
<p>In order to coincide with Angular 4 features and benefits, the official<a href="https://angular.io/" target="_blank" rel="external">angular.io</a>website has now been converted to a full scale web application. It is now much faster and has increased its performance significantly.</p>
<p>There is also a satisfying element of practice what you preach and the Angular team have clearly rebuilt the website from the ground up with performance in mind.</p>
<p>It may seems like a minor detail but searching through the documentation has now become a better user experience which I’m sure is appreciated throughout the Angular community especially for those browsing on mobile devices.</p>
<p>These were the main notable Angular events and features this month. The framework is progressively evolving every month and if theres enough newsworthy item in July I’ll be sure to do a similar roundup.</p>
<p>Still looking to upgrade your AngularJS app to Angular 2? Check out this tutorial by Toptal<a href="https://www.toptal.com/angular-js/angular-2-upgrading-from-1-5" target="_blank" rel="external">here</a>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/JNZ3qeb" target="_blank" rel="external">http://jsdiaries.com/2017/07/03/angular-4-news-roundup-june/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WRITTEN BY&lt;a href=&quot;https://twitter.com/jsdiaries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GARETH DUNNE @JSDIARIES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ng-June&lt;/p&gt;
&lt;p&gt;June h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A New Way to Reuse DataWeave Functions and Variables in Mule Flows</title>
    <link href="https://gmagon.com/blog/2017/07/03/a-new-way-to-reuse-dataweave-functions-and-variables-in-mule-flows/"/>
    <id>https://gmagon.com/blog/2017/07/03/a-new-way-to-reuse-dataweave-functions-and-variables-in-mule-flows/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.804Z</updated>
    
    <content type="html"><![CDATA[<p>A New Dataweave Function Makes It Easier for You to Store, Reuse, and Share Dataweave Functions Between Flows and Mule Applications.</p>
<h2 id="Reusing-Dataweave-Code"><a href="#Reusing-Dataweave-Code" class="headerlink" title="Reusing Dataweave Code"></a>Reusing Dataweave Code</h2><p><a href="http://www.mulesoft.com/" target="_blank" rel="external">MuleSoft’s</a><a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/dataweave" target="_blank" rel="external">DataWeave</a>technology is a powerful and efficient way to transform complex structured data between popular data formats, including JSON, XML, CSV, and Java objects.</p>
<p>I’m a courseware developer and trainer at<a href="http://www.mulesoft.com/" target="_blank" rel="external">MuleSoft</a>, and recently I’ve been spending a lot of time learning about DataWeave.</p>
<p>In the<a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/dataweave" target="_blank" rel="external">DataWeave</a>1.x version included in the Mule runtime v3.8, there has been limited support for reusing DataWeave functions and variables between Transform Message components (the component that applies DataWeave code). In particular, there is currently no direct support for importing modules or libraries of DataWeave code. But starting with Mule Runtime v3.8.4 there is a new<code>readUrl</code>function you can now use to start reusing DataWeave code across applications and even across deployments.</p>
<p>In this post, you’ll learn how to use the new<code>readUrl</code>function to separate out reusable DataWeave code, and then reuse that code between multiple Transform Message components and flows, including flows in separate applications and MUnit flows. This is a nice new tool to add to your DataWeave tool box.</p>
<h2 id="Creating-a-Mule-Project-With-Reusable-Dataweave-Library-Files"><a href="#Creating-a-Mule-Project-With-Reusable-Dataweave-Library-Files" class="headerlink" title="Creating a Mule Project With Reusable Dataweave Library Files"></a>Creating a Mule Project With Reusable Dataweave Library Files</h2><p>An example Mule project is available in this<a href="https://github.com/ethanport/dataweave-reuse" target="_blank" rel="external">GitHub repository</a>. You can import this project into the latest Anypoint Studio to follow along with this post. Alternatively, you can create a new Mule project in Anypoint Studio and copy the examples from this blog post.</p>
<p>This project has added a folder named<code>dw</code>to<code>src/main/resources</code>, and then created a file named<code>myLib.wev</code>inside the<code>dw</code>folder. When this Mule project is exported as a deployable archive file, all the files in<code>src/main/resources</code>will be automatically added to the project’s classes folder, so will be in the classpath when the Mule application is deployed to a Mule runtime. In this sample project, the HTTP listener is listening for requests on port 8081.</p>
<p><img src="http://img0.tuicool.com/niUVRva.jpg!web" alt=""></p>
<h2 id="Coding-the-Reusable-Dataweave-File"><a href="#Coding-the-Reusable-Dataweave-File" class="headerlink" title="Coding the Reusable Dataweave File"></a>Coding the Reusable Dataweave File</h2><p>The myLib.wev file contains some reusable variables and functions.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">%dw 1.0</div><div class="line"></div><div class="line">//Reusable constant</div><div class="line">%var exchangeRateFromUSDToBritishPounds = 1.35</div><div class="line"></div><div class="line">%function convertPriceFromUSDToBritishPounds ( input )</div><div class="line">//Can </div><div class="line">use</div><div class="line"> the getIntroString() </div><div class="line">function</div><div class="line"> which </div><div class="line">is</div><div class="line"> defined further down</div><div class="line"></div><div class="line">&quot;$(getIntroString()) :  $(input * exchangeRateFromUSDToBritishPounds)&quot;</div><div class="line"></div><div class="line"></div><div class="line">%</div><div class="line">function</div><div class="line"> getIntroString()</div><div class="line"></div><div class="line">&quot;The price converted to British Pounds is&quot;</div><div class="line">---</div><div class="line"></div><div class="line">//Provide </div><div class="line">external</div><div class="line">names</div><div class="line">for</div><div class="line">variables</div><div class="line">and</div><div class="line"> functions defined </div><div class="line">in</div><div class="line"> the header</div><div class="line">&#123;</div><div class="line">  exchangeRate : exchangeRateFromUSDToBritishPounds,</div><div class="line"></div><div class="line">  convertPrice : convertPriceFromUSDToBritishPounds,</div><div class="line"></div><div class="line">  //</div><div class="line">Use</div><div class="line"> an anonymous lambda </div><div class="line">to</div><div class="line">define</div><div class="line"> the </div><div class="line">function</div><div class="line"></div><div class="line">  formatString : (aString, formatter) -</div><div class="line">&gt;</div><div class="line"> formatter(aString)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The body expression creates key names for the variables and functions. The<code>exchangeRate</code>key has as value the variable<code>exchangeRateFromUSDToBritishPounds</code>. This variable acts as a constant in other DataWeave functions.</p>
<p>The<code>convertPrice</code>key references the more lengthy function name<code>convertPriceFromUSDToBritishPounds</code>. This function requires a parameter, which is used in the function’s expression to print out the String returned from the later<code>getIntroString()</code>function, plus the result of multiplying the<code>input</code>value by the<code>exchangeRateFromUSDToBritishPounds</code>variable.</p>
<p>The<code>formatString</code>key is different from the other two keys in the body expression. The<code>formatString</code>key has a value which is an anonymous function implementation. These types of unnamed functions are also called lambdas. The lambda requires two input parameters. The first parameter labeled<code>aString</code>is supplied to the<code>formatString</code>function with any string value, which then has the<code>formatter</code>function applied to<code>aString</code>.</p>
<p>Next, you will see how to use these functions, including<code>formatString</code>, in a DataWeave flow.</p>
<h2 id="Reading-in-and-Using-an-External-Dataweave-File"><a href="#Reading-in-and-Using-an-External-Dataweave-File" class="headerlink" title="Reading in and Using an External Dataweave File"></a>Reading in and Using an External Dataweave File</h2><p>The next step is to read in this external DataWeave file and use it in a Transform Message component. The first step is to use the new readUrl function to read in the DataWeave function from the classpath. Define a variable<code>myLib</code>as a reference to the DataWeave file<code>myLib.wev</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">%dw</div><div class="line">1.0</div><div class="line">%output</div><div class="line"> application/json</div><div class="line"></div><div class="line"></div><div class="line">%var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>In this example, we are embedding the DataWeave library file inside the project, so we give the URL relative to the classpath<code>dw/myLib.wev</code>. If you are deploying into a customer-hosted on-prem Mule runtime, you could also store your DataWeave libraries in a common external location that you add to the Mule runtime’s classpath.</p>
<p>Note: This is a similar technique to the way you can store Mule application properties files in an external location. You can learn more about this technique in the Anypoint<a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/configuring-properties" target="_blank" rel="external">product documentation</a>, or<a href="https://wrapper.tanukisoftware.com/doc/english/props-envvars.html#definition" target="_blank" rel="external">Tanuki Java Service Wrapper</a>documentation.</p>
<p>Like the related read() function, readUrl() can also include a second parameter to specify the mime type, such as<code>application/java</code>,<code>application/json</code>,<code>application/csv</code>, or<code>application/xml</code>. When not specified, the default mime type is<code>application/dw</code>. So in this example, we could also have written:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">%dw</div><div class="line">1.0</div><div class="line">%output</div><div class="line"> application/json</div><div class="line"></div><div class="line"></div><div class="line">%var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">, </div><div class="line">&quot;application/dw&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>In Anypoint Studio, the file is stored in<code>src/main/resources</code>, but in the deployable archive, all the files from the<code>src/main/resources</code>folder are moved into the<code>classes</code>folder.</p>
<p>Here is a complete Transform Message component in the convertPrice flow:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">%dw </div><div class="line">1.0</div><div class="line"></div><div class="line"></div><div class="line">%output application/json</div><div class="line"></div><div class="line">%</div><div class="line">var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line">//Access functions in the myLib reference</div><div class="line"></div><div class="line">%</div><div class="line">function</div><div class="line">printPrice</div><div class="line">(priceInUSD)</div><div class="line">myLib</div><div class="line">.</div><div class="line">formatString</div><div class="line">( myLib.convertPrice</div><div class="line">(priceInUSD)</div><div class="line">, </div><div class="line">(price)</div><div class="line"> -</div><div class="line">&gt;</div><div class="line"> upper price )</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">&#123; </div><div class="line">  </div><div class="line">//Format the key</div><div class="line"></div><div class="line">  ( </div><div class="line">    myLib.formatString( </div><div class="line">&quot;result&quot;</div><div class="line">, (aString) -</div><div class="line">&gt;</div><div class="line"> capitalize aString ) </div><div class="line">  ) : </div><div class="line"></div><div class="line">  </div><div class="line">//Format the value - read in the input price as an HTTP query param</div><div class="line"></div><div class="line">  printPrice( inboundProperties.</div><div class="line">&apos;http.query.params&apos;</div><div class="line">.price )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Previewing-and-Testing-Dataweave-Code-That-Uses-External-Dataweave-Library-Files"><a href="#Previewing-and-Testing-Dataweave-Code-That-Uses-External-Dataweave-Library-Files" class="headerlink" title="Previewing and Testing Dataweave Code That Uses External Dataweave Library Files"></a>Previewing and Testing Dataweave Code That Uses External Dataweave Library Files</h2><p>You can preview example data transformations using the Preview pane in the Transform Message component editor. In the Transform Message component, in the left-side Input pane, right click on Inbound Properties &gt; http.query.params.</p>
<p><img src="http://img1.tuicool.com/bUNrIrV.jpg!web" alt=""></p>
<p>Set an example price:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">%dw </div><div class="line">1.0</div><div class="line"></div><div class="line">%output application/java</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">price:</div><div class="line">600</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In the right-side Output pane, select the Preview button, which opens the Preview pane. In the Preview pane, you should see the result of the body expression.</p>
<p><img src="http://img1.tuicool.com/E73UZrU.jpg!web" alt=""></p>
<p>Change the price from 600 to 500 and verify the output in the Preview pane also changes. This shows you that you can preview live changes to DataWeave code, even when you are reading in external DataWeave files.</p>
<p>Here is the entire<strong>reuseDataWeaveCode.</strong>xmlfile<strong>:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">&lt;</div><div class="line">?</div><div class="line">xml version=</div><div class="line">&quot;1.0&quot;</div><div class="line"> encoding=</div><div class="line">&quot;UTF-8&quot;</div><div class="line">?</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">mule</div><div class="line">xmlns:tracking</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/ee/tracking&quot;</div><div class="line">xmlns:dw</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/ee/dw&quot;</div><div class="line">xmlns:http</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/http&quot;</div><div class="line">xmlns</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/core&quot;</div><div class="line">xmlns:doc</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/documentation&quot;</div><div class="line">xmlns:spring</div><div class="line">=</div><div class="line">&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">xmlns:xsi</div><div class="line">=</div><div class="line">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation</div><div class="line">=</div><div class="line">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">http:listener-config</div><div class="line">name</div><div class="line">=</div><div class="line">&quot;HTTP_Listener_Configuration&quot;</div><div class="line">host</div><div class="line">=</div><div class="line">&quot;0.0.0.0&quot;</div><div class="line">port</div><div class="line">=</div><div class="line">&quot;8081&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;HTTP Listener Configuration&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">flow</div><div class="line">name</div><div class="line">=</div><div class="line">&quot;convertPrice&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">http:listener</div><div class="line">config-ref</div><div class="line">=</div><div class="line">&quot;HTTP_Listener_Configuration&quot;</div><div class="line">path</div><div class="line">=</div><div class="line">&quot;/&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;HTTP&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:transform-message</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;Transform Message&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:input-inbound-property</div><div class="line">doc:sample</div><div class="line">=</div><div class="line">&quot;sample_data/map_string_string.dwl&quot;</div><div class="line">propertyName</div><div class="line">=</div><div class="line">&quot;http.query.params&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:set-payload</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">![CDATA[%dw 1.0</div><div class="line">%var myLib = readUrl(&quot;classpath://dw/myLib.wev&quot;)</div><div class="line"></div><div class="line">%output application/json</div><div class="line"></div><div class="line">%function printPrice(priceInUSD)</div><div class="line">myLib.formatString( myLib.convertPrice(priceInUSD), (price) -</div><div class="line">&gt;</div><div class="line"> upper price )</div><div class="line"></div><div class="line">%function headerString ()</div><div class="line">&quot;the price2&quot;</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line"></div><div class="line">&#123; </div><div class="line">  //format the key</div><div class="line">  (myLib.formatString( &quot;result&quot;, (aString) -</div><div class="line">&gt;</div><div class="line"> capitalize aString )) : </div><div class="line"></div><div class="line">  //Read in the input price as an HTTP query param</div><div class="line">  printPrice(inboundProperties.&apos;http.query.params&apos;.price)</div><div class="line">&#125;</div><div class="line">]]</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">dw:set-payload</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">dw:transform-message</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">logger</div><div class="line">level</div><div class="line">=</div><div class="line">&quot;INFO&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;Logger&quot;</div><div class="line">message</div><div class="line">=</div><div class="line">&quot;#[message.payload]&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">flow</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">mule</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h2 id="Deploying-and-Testing-the-Application"><a href="#Deploying-and-Testing-the-Application" class="headerlink" title="Deploying and Testing the Application"></a>Deploying and Testing the Application</h2><p>Deploy the reuseDataWeaveCode project to a Mule runtime. For example, here I am deploying the project to an Anypoint Platform account from Anypoint Studio.</p>
<p><img src="http://img1.tuicool.com/YBJFRvF.jpg!web" alt=""></p>
<p>In this example, I deployed the application to a public Anypoint Platform URL<a href="http://reuse-dataweave-code.cloudhub.io/" target="_blank" rel="external">http://reuse-dataweave-code.cloudhub.io</a>.</p>
<p>After the application deploys, open a web client (you can use a web browser), and make a GET request to the HTTP listener. If you deployed to a Mule runtime on your local machine, the URL is<code>http://localhost:8081?price=300</code>. For my CloudHub deployment, I’ll make requests from a web client to<code>http://reuse-dataweave-code.cloudhub.io/?price=700</code>. You can click this URL now to try it out.</p>
<p>My web browser has a JSON parser extension and shows this response:</p>
<p><img src="http://img2.tuicool.com/iiyY7rj.jpg!web" alt=""></p>
<p>As you build up more complex DataWeave transformation for your projects, you’ll want to reuse some of your transformation logic. Today, you can do this using the readUrl() function. Please let us know what you think of this feature, and also let us know what additional modularity you’d like to see in future releases.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/bYBzUbZ" target="_blank" rel="external">https://dzone.com/articles/reusing-dataweave-functions-and-variable-in-mule-f</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A New Dataweave Function Makes It Easier for You to Store, Reuse, and Share Dataweave Functions Between Flows and Mule Applications.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Beware the cutting edge of web design</title>
    <link href="https://gmagon.com/blog/2017/07/03/beware-the-cutting-edge-of-web-design/"/>
    <id>https://gmagon.com/blog/2017/07/03/beware-the-cutting-edge-of-web-design/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.815Z</updated>
    
    <content type="html"><![CDATA[<p>Progress in web design techniques shows no signs of slowing up. As the proponents of the early web are staggering around with thousand-yard stares, you can’t help but feel a little over-awed by the plethora of techniques and frameworks available nowadays.</p>
<p>People are championing the new approaches that are about to change the way we work once again, such asFlexbox andCSS Grid. Rachel Andrew and Jen Simmons have been encouraging developers to look at these technologies now, in readiness for their arrival.</p>
<p><img src="http://img0.tuicool.com/BzuUvm2.jpg!web" alt=""></p>
<p>Is web design too formulaic, or cutting edge, these days?</p>
<p>Recently, some of the current web industry’s founders – such as Andy Clarke and Jeffrey Zeldman – have asked if it really needs to be this complicated, and whether the web is losing its soul or becoming reliant on a standard output (three-column layouts, hero blocks and the like). Have we all become enslaved to the frameworks and tools available to us?</p>
<p>Although they make a good argument, I don’t think there has been a time where there has been more choice (or opinion) about how to build digital projects. We are long past ‘HTML,CSS and a littleJavaScript’. Now there are CSS preprocessors andJS frameworks, and the components that make up a web project encompass a load of new elements – optimisation, CDN delivery andSEO, to name a few.</p>
<p>An urge to jump into new methods too early can be the worst thing to do on live client work</p>
<p>Sush Kelly</p>
<h3 id="Pioneering-web-tech"><a href="#Pioneering-web-tech" class="headerlink" title="Pioneering web tech"></a>Pioneering web tech</h3><p>The talks and conferences advocate best practices and cutting-edge tech – why we should be using X, Y and Z. This is 100 per cent necessary. After all, the web industry is relatively young and we are still defining the standards of the industry to an extent.</p>
<p>The problem is, those not using these technologies day-to-day in their work can be left feeling inadequate or somehow lacking. It is a lucky few who get to make their living pushing those boundaries and telling us all about them. Don’t get me wrong, it is essential to have these people pushing the bleeding edge, but it can result in an urge to jump into new methods too early, which can be the worst thing to do on live client work.</p>
<p>You want long, productive relationships with clients. Changing how you build sites means having to readjust and remember more skills. As much as good commenting and a README file will help, you need to make sure what you’re delivering will remain effective and usable for as long as possible.</p>
<p>As a digital director at a small creative agency,<a href="https://www.imaginate.uk.com/home" target="_blank" rel="external">Imaginate</a>, it is on my shoulders to make sure we use the right technology on client work and invest our time wisely with regards to what we learn and (in due course) adapt into our processes.</p>
<p>I completely understand how designers and developers want to adopt the next great thing. I feel the same compulsion, and it is actually one of the things that has kept me in the industry so long (since 2000). The fact is that I also have to think about the longevity of the plugin/library/software, because if it doesn’t stand the test of time, or it ends up failing or losing support due to a later development, then the responsibility falls on us.</p>
<h3 id="Educating-junior-web-developers"><a href="#Educating-junior-web-developers" class="headerlink" title="Educating junior web developers"></a>Educating junior web developers</h3><p>Many junior developers have a real thirst for knowledge. It is often an inspiration to more senior team members when they arrive in the studio, eager to show a new method or technique that is emerging and explore how it might be used on a project.</p>
<p>You want your staff to grow, to develop and to be able to work on things together, so again it’s important to make sure that you’re only taking on board advancements that are an improvement on what went before. But when the churn of technology is so quick that we have interns and junior designers who have never had to use a float and do not know life before Bootstrap, it becomes a real balancing act.</p>
<p>A good example of this is the move from LESS to SCSS and also from Grunt to Gulp. Both these technologies are similar, but different enough to mean returning to a project using LESS/Grunt becomes an exercise in re-learning – or in the case of juniors or interns, learning a new (old) technology from scratch.</p>
<h3 id="Website-layout-gambles"><a href="#Website-layout-gambles" class="headerlink" title="Website layout gambles"></a>Website layout gambles</h3><p>Flex and CSS Grids are the current darlings of frontend talk. CSS Grid has the potential to revolutionise the way we will lay websites out in the future. At the moment it is still hidden in the latest browsers, although you can access it if you enable experimental features on the likes of Chrome. We can’t use it in live work for this reason, though with an imminent launch date, Grid could bring about as big a shift in web development practice as the shift from tables to divs and floats.</p>
<p>We are using Flexbox on live work now, but only in ways that are a benefit – for example for ordering content in responsive layouts orvertically centring items. To try to use Flexbox for a full site at the moment, with iOS and Safari’s flaky support, would be a challenge that just may not be financially viable. </p>
<h3 id="Embracing-the-old-browsers"><a href="#Embracing-the-old-browsers" class="headerlink" title="Embracing the old browsers"></a>Embracing the old browsers</h3><p>Clients, especially within larger companies, likely won’t be running the latest browsers. They could also have restrictions on their web access that could affect your build. And if it turns out the main stakeholder is using IE on an old laptop, the site better work on it or the project just won’t get signed off.</p>
<p>Sometimes a client will have a good idea of what they want, or specify an incumbent system or technology that you need to work with. A key point for us as an agency is to be adaptive to these needs and to work with them, rather than dismissing what the client has and trying to force them down the route we would prefer. Sometimes this may mean having to extend an existing codebase in order to keep within the technology required.</p>
<p>When embarking on a new project, we now make sure we establish the required sign-off devices as soon as possible. However, over the years have had our fingers burnt on more than one occasion, when we have run with a new way of doing something with good intentions, only for it to cause issues as we tried to get the site signed off. This just serves to remind us that there are so many device/user combos that it just isn’t OK if a given method will only work on certain browsers.</p>
<p>Although you can make workarounds and shims, there often isn’t budget to do this. And when a client doesn’t have the right resources then you need to go with the solution that will please everyone.</p>
<p>When it comes down to it, the main aim of the studio is to produce great, forward-thinking work, which means being fully open to new methods but also picking the right time and project to use them. It is a tricky balancing act, but one that gives me a great feeling of satisfaction, especially when a new process finally becomes ‘the standard’ on live projects.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/AJbi63b" target="_blank" rel="external">http://www.creativebloq.com/advice/beware-the-cutting-edge-of-web-design</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Progress in web design techniques shows no signs of slowing up. As the proponents of the early web are staggering around with thousand-ya
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Better Software Design with Clean Architecture</title>
    <link href="https://gmagon.com/blog/2017/07/03/better-software-design-with-clean-architecture/"/>
    <id>https://gmagon.com/blog/2017/07/03/better-software-design-with-clean-architecture/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img1.tuicool.com/vqIfaeY.png!web" alt=""></p>
<p>Have you ever produced code that:</p>
<ul>
<li>was bug laden</li>
<li>was painful to debug or enhance with new features</li>
<li>was hard/impossible to test without things like a database or web server</li>
<li>had presentation logic mixed with business logic or business logic mixed in with data access logic (sql)</li>
<li>was hard for other developers to understand because it did not clearly express its intent or purpose within the application it was written for</li>
</ul>
<p>I know I have. Over time I learned about the various<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="external">Gang of Four</a>patterns and made a conscious effort to keep the<a href="https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29" target="_blank" rel="external">SOLID</a>principles running on a background thread in my mind as I wrote code. While these ideas certainly helped mitigate the problems listed above, they didn’t eliminate them. When writing web or desktop software using MVC or MVVM I still found some of the same old symptoms showing up in my projects. Things like business logic leaking into controllers, entity models being used all over the place for different purposes and large regions of the code that had no unit test coverage because they had some sort of direct dependency on a database or http client.</p>
<p>Get notified on new posts</p>
<p>Straight from me, no spam, no bullshit. Frequent, helpful, email-only content.</p>
<h2 id="The-answer"><a href="#The-answer" class="headerlink" title="The answer"></a>The answer</h2><p>One day, a colleague sent around<a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">this link</a>introducing<strong>The Clean Architecture</strong>by Uncle Bob. It resonated with me instantly as it presented a solution for the same problems I was seeing. The best part, there’s nothing mystical or complicated about Clean Architecture - it is a relatively simple and practical architecture template that can be applied to many application domains if you choose to follow just a few of its basic rules.</p>
<h2 id="How-Clean-Architecture-works"><a href="#How-Clean-Architecture-works" class="headerlink" title="How Clean Architecture works"></a>How Clean Architecture works</h2><p>The key rule behind Clean Architecture is:<strong>The Dependency Rule</strong>. The gist of this is simply that dependencies are encapsulated in each “ring” of the architecture model and these dependencies can only point inward.</p>
<p><img src="http://img1.tuicool.com/U3MBbem.jpg!web" alt=""></p>
<p>Clean Architecture keeps details like web frameworks and databases in the outer layers while important business rules and policies are housed in the inner circles and have no knowledge of anything outside of themselves. Considering this, you can start to see how it achieves a very_clean_separation of concerns. By ensuring your business rules and core domain logic in the inner circles are completely devoid of any external dependencies or 3rd party libraries means they must be expressed using pure C# POCO classes which makes testing them much easier.</p>
<p>In fact your business rules simply don’t know anything at all about the outside world.</p>
<p>There are a few other important concepts that I’m going to highlight along the way with an example below but if you’re interested in just the theory please go check out<a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">Uncle Bob’s original post introducing Clean Architecture</a>.</p>
<h3 id="Implementing-the-“Course-Registration”-use-case"><a href="#Implementing-the-“Course-Registration”-use-case" class="headerlink" title="Implementing the “Course Registration” use case"></a>Implementing the “Course Registration” use case</h3><p>Let’s see how this works using a real-world use case. For the folks doing agile scrum, I realize a use case is not the most fashionable way to describe a requirement. But for this post, it’s perfect because I’d like to show how all the details of the use case can be modeled within clean architecture. A user story would simply be too vague.</p>
<p>I’ve typed out the entire use case here for reference so you don’t need to digest the whole thing right now. We’ll cover its aspects below in detail as we walk through implementing it using clean architecture.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Title</th>
<th style="text-align:left">Register for courses</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Description</td>
<td style="text-align:left">Student accesses the system and views the courses currently available for him to register. Then he selects the courses and registers for them.</td>
</tr>
<tr>
<td style="text-align:left">Primary Actor</td>
<td style="text-align:left">Student</td>
</tr>
<tr>
<td style="text-align:left">Preconditions</td>
<td style="text-align:left">Student is logged into systemStudent has not previously enrolled or registeredStudent cannot register within 5 days of course start date</td>
</tr>
<tr>
<td style="text-align:left">Postconditions</td>
<td style="text-align:left">Student is registered for courses</td>
</tr>
<tr>
<td style="text-align:left">Main Success Scenario</td>
<td style="text-align:left">Student selects “Register New Courses” from the menu.System displays list of courses available for registering.Student selects one or more courses he wants to register for.Student clicks “Submit” button.System registers student for the selected courses and displays a confirmation message.</td>
</tr>
<tr>
<td style="text-align:left">Extensions</td>
<td style="text-align:left">(2a) No courses are available for this student.System displays error message saying no courses are available, and provides the reason &amp; how to rectify if possible.Student either backs out of this use case, or tries again after rectifying the cause.(5a) Some courses could not be registered.System displays message showing which courses were registered, and which courses were not registered along with a reason for each failure.(5b) None of the courses could be registered.System displays message saying none of the courses could be registered, along with a reason for each failure.</td>
</tr>
</tbody>
</table>
<p>This is a simple use case allowing a student to register for one or more classes and then returning either a success or error result to notify her of the outcome. We’ll use clean architecture to write this use case in a fashion that meets the goals and avoids the problems I mentioned in the intro.</p>
<h3 id="Creating-the-Entities"><a href="#Creating-the-Entities" class="headerlink" title="Creating the Entities"></a>Creating the Entities</h3><p>Entities are the heart of clean architecture and contain any_enterprise-wide_business rules and logic. Now, you might not be working in the context of an_enterprise_and that’s perfectly fine. If you’re writing a standalone application Uncle Bob suggests simply referring to these as Business Objects. The key is that they contain rules that are not<em>application specific</em>- so basically any global or shareable logic that could be reused in other applications should be encapsulated in an entity.</p>
<p>Inspecting our use case there are 2 entities we need:<code>Student</code>and<code>Course</code>.</p>
<p>Using aTDD approach I wrote a couple of tests and just enough code in the<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/Entities/Student.cs" target="_blank" rel="external">Student entity class</a>to get them passing.</p>
<p>The<code>RegisterForCourse()</code>method implements 2 rules from our use case.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">Student</div><div class="line"> : </div><div class="line">EntityBase</div><div class="line"></div><div class="line">&#123;</div><div class="line">   </div><div class="line">public</div><div class="line">string</div><div class="line"> FirstName &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line">string</div><div class="line"> LastName &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line"> IList</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"> RegisteredCourses &#123; </div><div class="line">get</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line"> IList</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"> EnrolledCourses &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line"></div><div class="line">   </div><div class="line">public</div><div class="line">Student</div><div class="line">(</div><div class="line">)</div><div class="line">   </div><div class="line">&#123;</div><div class="line">      RegisteredCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line">();</div><div class="line">      EnrolledCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line">();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">public</div><div class="line">bool</div><div class="line">RegisterForCourse</div><div class="line">(</div><div class="line">Course course</div><div class="line">)</div><div class="line">   </div><div class="line">&#123;</div><div class="line">      </div><div class="line">// student has not previously enrolled</div><div class="line">if</div><div class="line"> (EnrolledCourses.Any(ec =</div><div class="line">&gt;</div><div class="line"> ec.Code == course.Code)) </div><div class="line">return</div><div class="line">false</div><div class="line">;</div><div class="line"></div><div class="line">      </div><div class="line">// registration cannot occur with 5 days of course start date</div><div class="line">if</div><div class="line"> (DateTime.UtcNow </div><div class="line">&gt;</div><div class="line"> course.StartDate.AddDays(</div><div class="line">-5</div><div class="line">)) </div><div class="line">return</div><div class="line">false</div><div class="line">;</div><div class="line"></div><div class="line">      RegisteredCourses.Add(course);</div><div class="line">      </div><div class="line">return</div><div class="line">true</div><div class="line">;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">[Fact]</div><div class="line"></div><div class="line">public</div><div class="line">void</div><div class="line">CannotRegisterForCourseWithin5DaysOfStartDate</div><div class="line">(</div><div class="line">)</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">// arrange</div><div class="line">var</div><div class="line"> student = </div><div class="line">new</div><div class="line"> Student();</div><div class="line">  </div><div class="line">var</div><div class="line"> course = </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Biology II&quot;</div><div class="line">, StartDate = DateTime.UtcNow.AddDays(+</div><div class="line">3</div><div class="line">) &#125;;</div><div class="line"></div><div class="line">  </div><div class="line">// act</div><div class="line">var</div><div class="line"> result = student.RegisterForCourse(course);</div><div class="line"></div><div class="line">  </div><div class="line">// assert</div><div class="line"></div><div class="line">  Assert.False(result);</div><div class="line">&#125;</div><div class="line"></div><div class="line">[Fact]</div><div class="line"></div><div class="line">public</div><div class="line">void</div><div class="line">CannotRegisterForCourseAlreadyEnrolledIn</div><div class="line">(</div><div class="line">)</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">// arrange</div><div class="line">var</div><div class="line"> student = </div><div class="line">new</div><div class="line"> Student</div><div class="line">  &#123;</div><div class="line">     EnrolledCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"></div><div class="line">     &#123;</div><div class="line">       </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Biology II&quot;</div><div class="line"> &#125;,</div><div class="line">       </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;MATH-4067EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Mathematical Theory of Dynamical Systems, Chaos and Fractals&quot;</div><div class="line"> &#125;</div><div class="line">             &#125;</div><div class="line">     &#125;;</div><div class="line"></div><div class="line"> </div><div class="line">// act</div><div class="line">var</div><div class="line"> result = student.RegisterForCourse(</div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> </div><div class="line">// assert</div><div class="line"></div><div class="line"> Assert.False(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><p>Moving up from the entities we have the_Use Case_layer. The classes that live here have a few unique features and responsibilities:</p>
<ul>
<li>Contain the<br><em>application specific</em><br>business rules</li>
<li>Encapsulate and implement all of the use cases of the system. A good rule to start with is a class per use case</li>
<li>Orchestrate the flow of data to and from the entities, and can rely on their business rules to achieve the goals of the use case</li>
<li>Have NO dependency and are totally isolated from things like a database, UI or special frameworks</li>
<li>Will almost certainly require refactoring if details of the use case requirements change</li>
</ul>
<p>Use case classes are typically suffixed with the word<strong>Interactor</strong>. Uncle Bob mentions in<a href="https://www.youtube.com/watch?v=0oGpWmS0aYQ" target="_blank" rel="external">this talk</a>that he considered calling them controllers but assumed this would be too easily confused with MVC so Interactor it is!</p>
<p>Our use case is modelled in<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/UseCases/RequestCourseRegistrationInteractor.cs" target="_blank" rel="external">RequestCourseRegistrationInteractor.cs</a>.</p>
<p>There are a few important aspects of the use case class I’d like to highlight.</p>
<p>First off, it implements the<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/Contracts/IRequestHandler.cs" target="_blank" rel="external">IRequestHandler</a>interface. This interface is an example of the<a href="http://www.dofactory.com/net/mediator-design-pattern" target="_blank" rel="external">mediator pattern</a>which dictates that implementors will work with a certain request and response object in a loosely coupled fashion.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public </div><div class="line">class</div><div class="line">RequestCourseRegistrationInteractor</div><div class="line"> : </div><div class="line">IRequestHandler</div><div class="line">&lt;</div><div class="line">CourseRegistrationRequestMessage, </div><div class="line">CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>There is a single<code>TResponse Handle(TRequest message)</code>method defined on the interface which essentially performs_all the work_of our use case. Pretty simple huh?_Handle()_takes a request object as its lone parameter which will typically contain any data passed in from the outer layer (the UI) and returns a response message with both types dictated by the<code>IRequestHandler</code>interface. All of our_application specific_logic for the use case will go into this method.</p>
<p>One key aspect of the request/response messages that flow in and out of use case interactors and across boundaries is that they are simple data structures meaning they contain no special types: ie. entities, or types provided by 3rd party libs etc. - they are pure C# objects.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line"> CourseRegistrationRequestMessage : IRequest</div><div class="line">&lt;</div><div class="line">CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">public</div><div class="line">int</div><div class="line"> StudentId &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">private</div><div class="line">set</div><div class="line">; &#125;</div><div class="line">  </div><div class="line">public</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> SelectedCourseCodes &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">private</div><div class="line">set</div><div class="line">; &#125;</div><div class="line"></div><div class="line">  </div><div class="line">public</div><div class="line"> CourseRegistrationRequestMessage(</div><div class="line">int</div><div class="line"> studentId,List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> selectedCourseCodes)</div><div class="line">  &#123;</div><div class="line">    StudentId = studentId;</div><div class="line">    SelectedCourseCodes = selectedCourseCodes;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The_CourseRegistrationRequest_object consists of only a StudentId and a list of selected course codes selected by the user.</p>
<p>Here’s the full implementation of<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/UseCases/RequestCourseRegistrationInteractor.cs" target="_blank" rel="external">RequestCourseRegistrationInteractor.cs</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">RequestCourseRegistrationInteractor</div><div class="line"> : </div><div class="line">IRequestHandler</div><div class="line">&lt;</div><div class="line">CourseRegistrationRequestMessage, CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly IStudentRepository _studentRepository;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly ICourseRepository _courseRepository;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly IAuthService _authService;</div><div class="line">  </div><div class="line">public</div><div class="line"> RequestCourseRegistrationInteractor(IAuthService authService, IStudentRepository studentRepository, ICourseRepository courseRepository)</div><div class="line">  &#123;</div><div class="line">    _authService = authService;</div><div class="line">    _studentRepository = studentRepository;</div><div class="line">    _courseRepository = courseRepository;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">public</div><div class="line"> CourseRegistrationResponseMessage Handle(CourseRegistrationRequestMessage message)</div><div class="line">&#123;</div><div class="line">   </div><div class="line">// student must be logged into system</div><div class="line">if</div><div class="line"> (!_authService.IsAuthenticated())</div><div class="line">   &#123;</div><div class="line">     </div><div class="line">return</div><div class="line"> new CourseRegistrationResponseMessage(</div><div class="line">false</div><div class="line">,</div><div class="line">null</div><div class="line">,</div><div class="line">&quot;Operation failed, not authenticated.&quot;</div><div class="line">);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">// get the student</div><div class="line">var</div><div class="line"> student = _studentRepository.GetById(message.StudentId);</div><div class="line"></div><div class="line">   </div><div class="line">// save off any failures</div><div class="line">var</div><div class="line"> errors = new List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line">();</div><div class="line"></div><div class="line">   foreach (</div><div class="line">var</div><div class="line"> c </div><div class="line">in</div><div class="line"> message.SelectedCourseCodes)</div><div class="line">   &#123;</div><div class="line">     </div><div class="line">var</div><div class="line"> course = _courseRepository.GetByCode(c);</div><div class="line"></div><div class="line">     </div><div class="line">if</div><div class="line"> (!student.RegisterForCourse(course))</div><div class="line">     &#123;</div><div class="line">         errors.Add($</div><div class="line">&quot;unable to register for &#123;course.Code&#125;&quot;</div><div class="line">);</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   _studentRepository.Save(student);</div><div class="line">   </div><div class="line">return</div><div class="line"> new CourseRegistrationResponseMessage(!errors.Any(), errors);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note the use of<code>_authService</code>,<code>_studentRepository</code>and<code>_courseRepository</code>. These services are typically referred to as_Gateways_within clean architecture and get injected into the Use Case layer as per the dependency rule. These are the things that deal with the database, rest services or other external agencies and their implementation belongs in the_Interface Adapters_layer. Interactors only know_what_behavior these gateways offer by way of their interface definition. They have no idea_how_they do their work because those details are encapsulated in an outer layer which the Use Cases know nothing about.</p>
<h3 id="Interface-Adapters"><a href="#Interface-Adapters" class="headerlink" title="Interface Adapters"></a>Interface Adapters</h3><p>The purpose of the interface adapter layer is to act as a connector between the business logic in our interactors and our framework-specific code. For example, in an ASP.Net MVC app, this is where the models, views, and controllers live. Gateways like services and repositories are also implemented here.</p>
<p>It is this layer, for example, that will wholly contain the MVC architecture of a GUI. The Presenters, Views, and Controllers all belong in here.</p>
<p>Also in this layer is any other adapter necessary to convert data from some external form, such as an external service, to the internal form used by the use cases and entities.</p>
<p>In this example I’m using a basic console app to consume my use case so this serves as my interface adapter layer. It contains the concrete implementations of the required<a href="https://github.com/mmacneil/CleanArchitecture/tree/master/CleanArchitecture.ConsoleApp/Gateways" target="_blank" rel="external">Gateways</a>and has<a href="https://github.com/mmacneil/CleanArchitecture/tree/master/CleanArchitecture.ConsoleApp/Presentation" target="_blank" rel="external">Presentation</a>logic to format the response from the Use Case into something friendly for the UI.</p>
<p>In the Main() method we can see the usage of calling the use case and presenting the results.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">**</div><div class="line">// Here we&apos;re connecting our app framework layer with our Use Case Interactors</div><div class="line">// This would typically go in a Controller Action in an MVC context or ViewModel in MVVM etc.</div><div class="line">//</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">**</div><div class="line">// 1. instantiate Course Registration Use Case injecting Gateways implemented in this layer</div><div class="line">var courseRegistraionRequestUseCase = new RequestCourseRegistrationInteractor(authService, studentRepository, courseRepository);</div><div class="line"></div><div class="line">// 2. create the request message passing with the target student id and a list of selected course codes </div><div class="line">var useCaseRequestMessage = new CourseRegistrationRequestMessage(1, new List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> &#123; userInput.ToUpper() &#125;);</div><div class="line"></div><div class="line">// 3. call the use case and store the response</div><div class="line">var responseMessage = courseRegistraionRequestUseCase.Handle(useCaseRequestMessage);</div><div class="line"></div><div class="line">// 4. use a Presenter to convert the use case response to a user friendly ViewModel</div><div class="line">var courseRegistraionResponsePresenter = new CourseRegistrationRequestResponsePresenter();</div><div class="line">var vm = courseRegistraionResponsePresenter.Handle(responseMessage);</div><div class="line"></div><div class="line">Console.Clear();</div><div class="line"></div><div class="line">// render results</div><div class="line"></div><div class="line">if (vm.Success)</div><div class="line">&#123;</div><div class="line">  Console.BackgroundColor = ConsoleColor.DarkGreen;</div><div class="line">  Console.ForegroundColor = ConsoleColor.White;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">  Console.BackgroundColor = ConsoleColor.Red;</div><div class="line">  Console.ForegroundColor = ConsoleColor.White;</div><div class="line">&#125;</div><div class="line">Console.WriteLine();</div><div class="line">Console.WriteLine(vm.ResultMessage);</div><div class="line">Console.WriteLine();</div></pre></td></tr></table></figure>
<h4 id="Presentation"><a href="#Presentation" class="headerlink" title="Presentation"></a>Presentation</h4><p>We’d like to show something friendly to the user when we get a response back from the interactor. To accomplish this, I created<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.ConsoleApp/Presentation/CourseRegistrationResponsePresenter.cs" target="_blank" rel="external">CourseRegistrationResponsePresenter</a>which has the single responsibility of converting a_CourseRegistrationResponseMessage_into a<em>CourseRegistrationResponseViewModel</em>. I’ll mention again that the response message and viewmodel are POCO objects containing no special types or data structures, just everyday collection and value types.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">CourseRegistrationResponsePresenter</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">public</div><div class="line"> CourseRegistrationResponseViewModel </div><div class="line">Handle</div><div class="line">(</div><div class="line">CourseRegistrationResponseMessage responseMessage</div><div class="line">)</div><div class="line">  </div><div class="line">&#123;</div><div class="line">    </div><div class="line">if</div><div class="line"> (responseMessage.Success)</div><div class="line">    &#123;</div><div class="line">         </div><div class="line">return</div><div class="line">new</div><div class="line"> CourseRegistrationResponseViewModel(</div><div class="line">true</div><div class="line">,</div><div class="line">&quot;Course registration successful!&quot;</div><div class="line">);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">var</div><div class="line"> sb = </div><div class="line">new</div><div class="line"> StringBuilder();</div><div class="line">    sb.AppendLine(</div><div class="line">&quot;Failed to register course(s)&quot;</div><div class="line">);</div><div class="line">    </div><div class="line">foreach</div><div class="line"> (</div><div class="line">var</div><div class="line"> e </div><div class="line">in</div><div class="line"> responseMessage.Errors)</div><div class="line">    &#123;</div><div class="line">       sb.AppendLine(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">return</div><div class="line">new</div><div class="line"> CourseRegistrationResponseViewModel(</div><div class="line">false</div><div class="line">,sb.ToString());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Frameworks-and-Drivers"><a href="#Frameworks-and-Drivers" class="headerlink" title="Frameworks and Drivers"></a>Frameworks and Drivers</h3><p>This layer contains tools like databases or frameworks. By default, we don’t write very much code in this layer, but it’s important to clearly state the place and priority that those tools have in the architecture.</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>_Clean Architecture_provides a simple and effective framework for separating the different aspects of our system producing a highly decoupled, testable architecture.</p>
<p>Let’s recap some key benefits:</p>
<ul>
<li><p>Use Cases are encapsulated in one place meaning they are <strong>very visible and easier to understand</strong>. Business rules are not scattered all over the place making debugging and modification of the code painful.</p>
</li>
<li><p>The Dependency Rule and use of abstracted Gateways mean the core business logic in our Interactors and Entities is<strong>easily testable</strong>and not hampered by external things like databases and RESTful web services. The lack of 3rd party, feature-laden frameworks in our business logic also means thecode there is only focused on the important rules and policies of our application.</p>
</li>
<li><p>Flexibleand<strong>portable</strong>- because the Use Cases are completely decoupled from any UI or infrastructure it’s easy to do things like switch the database or web framework or even port to an entirely new platform. Our example runs in a console app but it could just as easily work on the web, desktop or a phone.</p>
</li>
</ul>
<p>Like most design decisions there are tradeoffs to be made when considering Clean Architecture. For the benefits I highlighted there are also a few disadvantages:</p>
<ul>
<li><p>Your team’s ability to ramp up and effectively apply Clean Architecture. There’s nothing radically complex in here but there certainly is a learning curve and time required to adapt to any new design or architectural style.</p>
</li>
<li><p>Applying Clean Architecture adds some bloat in the form of many separate classes for all the Presenters, Use Case Request/Response dtos, Use Case Interactors, Entities, Gateways etc plus all the test cases :). Not a huge deal but a valid knock on the impact of this approach to the size of your project.</p>
</li>
</ul>
<p>I hope this guide has provided some insight on how Clean Architecture can improve your software design and prevent many of the common pitfalls that hinder projects. Like any pattern, it takes a little familiarity with the concepts and principles before they can be effectively applied. A good exercise to start might be to think of some use cases near and dear to you currently - can you map them out mentally using Clean Architecture? Do you have a sense of the Entities, what the Use Case Interactor might look like, what data needs to flow back and forth in the request and response messages? Running your use cases through these questions can help you get started in modeling them using Clean Architecture.</p>
<p>Thanks for reading!</p>
<p><a href="https://github.com/mmacneil/CleanArchitecture/" target="_blank" rel="external">source code</a></p>
<p>Get notified on new posts</p>
<p>Straight from me, no spam, no bullshit. Frequent, helpful, email-only content.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/YBj6ZvE" target="_blank" rel="external">https://fullstackmark.com/post/11/better-software-design-with-clean-architecture</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/vqIfaeY.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Have you ever produced code that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;was bug laden&lt;/li&gt;
&lt;li&gt;w
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The 5-Minute Interview: Anirban Chatterjee &amp; Keshav Ranganathan, IBM</title>
    <link href="https://gmagon.com/blog/2017/06/30/the-5-minute-interview-anirban-chatterjee-and-keshav-ranganathan-ibm/"/>
    <id>https://gmagon.com/blog/2017/06/30/the-5-minute-interview-anirban-chatterjee-and-keshav-ranganathan-ibm/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:03:41.555Z</updated>
    
    <content type="html"><![CDATA[<p>ByRachel Howard, Community Editor | June 30, 2017</p>
<p>“As the relationship really started to take shape, we realized what the two technologies could solve much more effectively when they worked together,”said<a href="http://www.linkedin.com/in/keshavranganathan" target="_blank" rel="external">Keshav Ranganathan</a>, Senior Offering Manager at<a href="http://www-03.ibm.com/systems/power/solutions/bigdata-analytics/" target="_blank" rel="external">IBM Power Systems</a>.</p>
<p><img src="http://img0.tuicool.com/ArQ36jj.jpg!web" alt="">The Neo4j partnership with IBM Power Systems is one of many that have been formed over the last several years, making the native graph database an even more effective enterprise solution for companies that span industries and continents.</p>
<p>In this week’s 5-Minute Interview (conducted at<a href="http://graphconnect.com/?ref=blog" target="_blank" rel="external">GraphConnect San Francisco</a>), we discuss the ways in which the IBM Power Systems and Neo4j partnership came to fruition, and the powerful benefits both companies are able to provide to customers because of it.</p>
<h3 id="Talk-to-us-about-why-you-all-at-IBM-Power-Systems-decided-to-partner-with-Neo4j"><a href="#Talk-to-us-about-why-you-all-at-IBM-Power-Systems-decided-to-partner-with-Neo4j" class="headerlink" title="Talk to us about why you all at IBM Power Systems decided to partner with Neo4j."></a>Talk to us about why you all at IBM Power Systems decided to partner with Neo4j.</h3><p>Anirban Chatterjee:We partnered with Neo4j because of the hover platform that we sell,<a href="http://www-03.ibm.com/systems/power/" target="_blank" rel="external">IBM Power Systems</a>.</p>
<p>We’ve been working withNeo4j to optimize it to run even more efficiently onIBM POWER8. In fact, we’re at about 80-90% faster per price performance on Power Systems compared to the equivalent x86. Which means that if you were to buy two socket servers from us instead of Intel, we’ll provide up to 80 or 90% better performance.</p>
<p>At a base level, that’s the value we offer. On top of that, we’ve been doing some work with Neo4j to add<a href="http://www.ibm.com/developerworks/community/blogs/fe313521-2e95-46f2-817d-44a4f27eba32/entry/power8_capi_flash_in_memory_expansion_to_speed_data_access?lang=en" target="_blank" rel="external">CAPI Flash support</a>. This means you can search large graphs in memory without high memory costs, because of the ability to take flash memory and hook it directly into the system.</p>
<p>This makes it act more like real memory without all the latencies you see with flash, so it’s a much cheaper way to get a large graph onto the system.</p>
<h3 id="What-made-you-choose-to-work-with-Neo4j"><a href="#What-made-you-choose-to-work-with-Neo4j" class="headerlink" title="What made you choose to work with Neo4j?"></a>What made you choose to work with Neo4j?</h3><p>Keshav Ranganathan:We first looked at the capabilities of graphs, such as searching large amounts of data and uncoveringnew relationships. And when you look at some of the IBM Power System capabilities and the amount of memory that can be on a single system, we knew we had to support both scale-out and scale-up configurations.</p>
<p>It seemed like a natural partnership, especially as databases were becoming much larger and with the emergence of big data. As the partnership really started to take shape, we realized what the two technologies could solve much more effectively when they worked together.</p>
<p>What is the most interesting result or project you’ve encountered through your partnership with Neo4j?</p>
<p>Ranganathan:We are getting clients jointly, in which we see huge opportunities. This is especially true as data size grows beyond a terabyte of data, or maybe a few hundred million nodes. What we jointly bring to the table is going to make a huge different for our clients, and we’re really looking forward to this partnership.</p>
<h3 id="Can-you-tell-us-more-about-IBM’s-partnership-with-Neo4j"><a href="#Can-you-tell-us-more-about-IBM’s-partnership-with-Neo4j" class="headerlink" title="Can you tell us more about IBM’s partnership with Neo4j?"></a>Can you tell us more about IBM’s partnership with Neo4j?</h3><p>Ranganathan:Well, this is not really a client partnership; rather it’s a synergistic partnership between two vendors, who bring technologies jointly to market to address client needs. I think we are making really good progress, and I’m happy with where we are in terms of our relationship with Neo4j.</p>
<p>The new Causal Clustering capabilities are quite exciting, and we’re going to make sure we have that capability on Power Systems. We’re also leveraging some of the capabilities in Power Systems to increase scalability, and we are really looking forward to growing our partnership.</p>
<h3 id="Is-there-anything-else-you’d-like-to-add-or-say"><a href="#Is-there-anything-else-you’d-like-to-add-or-say" class="headerlink" title="Is there anything else you’d like to add or say?"></a>Is there anything else you’d like to add or say?</h3><p>Ranganathan:It’s pretty exciting to hear how much the community has grown over the last several years; that<a href="http://graphconnect.com/?ref=blog" target="_blank" rel="external">GraphConnect</a>was a 200 person event in 2012 and is now a 1300 person event — that’s phenomenal.</p>
<p>And it’s really interesting to learn about the connected enterprise concept in terms of data, relationship between data, and how to extract insight from the data. Watching Neo4j transform from a niche tool applied in a handful of cases to being an enterprise solution is really exciting as well. We look forward to the continued growth ofgraph databases, Neo4j and IBM Power Systems.</p>
<p><em>Want to share about your Neo4j project in a future 5-Minute Interview? Drop us a line atcontent@neo4j.com</em></p>
<p>Learn more about running Neo4j on IBM POWER8 with CAPI Flash: Click below to get all the information you need on large scale graph processing with IBM Power Systems and Neo4j.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/mMfEVnU" target="_blank" rel="external">https://neo4j.com/blog/anirban-chatterjee-keshav-ranganathan-ibm/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ByRachel Howard, Community Editor | June 30, 2017&lt;/p&gt;
&lt;p&gt;“As the relationship really started to take shape, we realized what the two tech
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Issue of lazy loading property</title>
    <link href="https://gmagon.com/blog/2017/06/30/issue-of-lazy-loading-property/"/>
    <id>https://gmagon.com/blog/2017/06/30/issue-of-lazy-loading-property/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:03:41.547Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve got some<code>readonly</code>properties in my .h file. And when I tried to lazy loading them as usual like this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">// MyView.h</div><div class="line">@property</div><div class="line"> (</div><div class="line">nonatomic</div><div class="line">, </div><div class="line">strong</div><div class="line">, </div><div class="line">readonly</div><div class="line">) </div><div class="line">UIImageView</div><div class="line"> *imageView;</div><div class="line"></div><div class="line"></div><div class="line">// MyView.m</div><div class="line"></div><div class="line">- (</div><div class="line">UIImageView</div><div class="line"> *)imageView</div><div class="line">&#123;</div><div class="line">    </div><div class="line">if</div><div class="line"> (!_imageView)</div><div class="line">    &#123;</div><div class="line">        _imageView = [</div><div class="line">UIImageView</div><div class="line"> new];</div><div class="line">        _imageView.translatesAutoresizingMaskIntoConstraints = </div><div class="line">NO</div><div class="line">;</div><div class="line">        _imageView.backgroundColor = [</div><div class="line">UIColor</div><div class="line"> clearColor];</div><div class="line">        _imageView.contentMode = </div><div class="line">UIViewContentModeScaleAspectFit</div><div class="line">;</div><div class="line">        _imageView.userInteractionEnabled = </div><div class="line">NO</div><div class="line">;</div><div class="line">        _imageView.accessibilityIdentifier = </div><div class="line">@&quot;empty set image view&quot;</div><div class="line">;</div><div class="line"></div><div class="line">        _imageView.image = _defaultImage;</div><div class="line"></div><div class="line">        [_contentView addSubview:_imageView];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">return</div><div class="line"> _imageView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Then…bang! It threw out errors in bulk, yelling “Use of undeclared identifier ‘_imageView’”. What the hell have I done!</p>
<p>Luckily, I found some explainations<a href="http://stackoverflow.com/a/13670924/1594792" target="_blank" rel="external">here</a>. It says:</p>
<p>Newer Xcode versions can create a @synthesize statement automatically and use the underscore prefix for instance variables. In this case however,since the property is read-only and you provide a getter method, Xcode does not synthesize the property automatically.</p>
<p>So, I have to @synthesize the property on my own, and now it’s quiet and cute again. :P</p>
<h4 id="—-Update-2017-05-30-—"><a href="#—-Update-2017-05-30-—" class="headerlink" title="— Update: 2017-05-30 —"></a>— Update: 2017-05-30 —</h4><p>I happened to recall this issue when clearing up the whole system of Objective-C. Let’s dig deeper about this issue and find if there’s a diamond in it. :P</p>
<p>This issue has references of two points:<code>@property</code>and<code>@synthesize</code>. Let’s dig more details one by one.</p>
<ul>
<li><code>@property</code><br>: I’d love to reference this paragraph of<br><a href="http://rypress.com/tutorials/objective-c/properties" target="_blank" rel="external">Ry’s Objective-C Tutorial</a><br>to show the goal of @property in Objective-C.</li>
</ul>
<p>An object’s properties let other objects inspect or change its state. But, in a well-designed object-oriented program, it’s not possible to directly access the internal state of an object. Instead, accessor methods (getters and setters) are used as an abstraction for interacting with the object’s underlying data.</p>
<p><img src="http://img0.tuicool.com/7raeeq3.png!web" alt=""></p>
<p>The goal of the @property directive is to make it easy to create and configure properties by automatically generating these accessor methods. It allows you to specify the behavior of a public property on a semantic level, and it takes care of the implementation details for you.</p>
<ul>
<li><code>@synthesize</code><br>: First of all, this feature is called<br><strong>autosynthesis</strong><br>of properties and it’s an<br><a href="http://clang.llvm.org/docs/LanguageExtensions.html#objective-c-autosynthesis-of-properties" target="_blank" rel="external">Objective-C language extension supported by clang</a><br>, which is the default compiler used by Xcode.</li>
</ul>
<p>Thanks to autosynthesis you don’t need to explicitly synthesize the property as it will be automatically synthesized by the compiler as<code>@synthesize propertyName = _propertyName</code>.</p>
<p>While, there’re some exceptions here:</p>
<ul>
<li>Readwrite property with custom getter and setter;</li>
<li>Readonly property with custom getter;</li>
<li>@dynamic (which is opposited to<br><code>@synthesize</code><br>);</li>
<li>Properites declared in a @protocol;</li>
<li>Properties declared in a category;</li>
<li>Overriden properties.</li>
</ul>
<p><img src="http://img1.tuicool.com/QNryQrn.png!web" alt=""></p>
<p>In this condition, property<code>name</code>is set to be<code>readwrite</code>(as it is by default) with custom getter and setter. At this time, compiler believes that you want to take full control over<code>@property</code>manually, and then forbids autosynthesis for you.</p>
<p>We’ve already been used to not defining ivars on our own, once you have to use ivar, while autosynthesis is invalid, you’ll have to use<code>@synthesize</code>to compound ivars(i.e. let out the comment for line 24 in the image above).</p>
<p>Here’s a little sample.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">@interface</div><div class="line">Car</div><div class="line">:</div><div class="line">NSObject</div><div class="line">@property</div><div class="line"> (</div><div class="line">strong</div><div class="line">, </div><div class="line">readwrite</div><div class="line">) </div><div class="line">NSString</div><div class="line"> *name;</div><div class="line"></div><div class="line">@end</div><div class="line">@implementation</div><div class="line">Car</div><div class="line">@end</div><div class="line">@interface</div><div class="line">Tesla</div><div class="line">:</div><div class="line">Car</div><div class="line">@property</div><div class="line"> (</div><div class="line">strong</div><div class="line">, </div><div class="line">readwrite</div><div class="line">) </div><div class="line">NSString</div><div class="line"> *name;</div><div class="line"></div><div class="line"></div><div class="line">@end</div><div class="line">@implementation</div><div class="line">Tesla</div><div class="line">@synthesize</div><div class="line"> name;</div><div class="line"></div><div class="line">- (</div><div class="line">void</div><div class="line">)printVar</div><div class="line">&#123;</div><div class="line">	</div><div class="line">super</div><div class="line">.name = </div><div class="line">@&quot;Car&quot;</div><div class="line">;</div><div class="line">	</div><div class="line">NSLog</div><div class="line">(</div><div class="line">@&quot;Tesla: Hello %@, ivar: %@，super: %@&quot;</div><div class="line">, </div><div class="line">self</div><div class="line">.name, </div><div class="line">self</div><div class="line">-</div><div class="line">&gt;</div><div class="line">name, </div><div class="line">super</div><div class="line">.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Output in console:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">2017-06-30</div><div class="line">16</div><div class="line">:02</div><div class="line">:03.946</div><div class="line">BlockSample</div><div class="line">[86278:38771956]</div><div class="line">Tesla</div><div class="line">: </div><div class="line">Hello</div><div class="line">Tesla</div><div class="line">, </div><div class="line">ivar</div><div class="line">: </div><div class="line">Tesla</div><div class="line">，</div><div class="line">super</div><div class="line">: </div><div class="line">Car</div></pre></td></tr></table></figure>
<p>It’s also fine to get subclass’s ivar<code>name</code>simply by<code>name</code>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/mQJbiaj" target="_blank" rel="external">http://www.calios.gq/2017/05/30/Issue-of-lazy-loading-property/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve got some&lt;code&gt;readonly&lt;/code&gt;properties in my .h file. And when I tried to lazy loading them as usual like this.&lt;/p&gt;
&lt;figure class=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Minoca OS 0.4: We love the eighties!</title>
    <link href="https://gmagon.com/blog/2017/06/30/minoca-os-04-we-love-the-eighties/"/>
    <id>https://gmagon.com/blog/2017/06/30/minoca-os-04-we-love-the-eighties/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:06:34.697Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img0.tuicool.com/AzmmqmR.png!web" alt=""></p>
<p>fceux running on the first Minoca OS X server</p>
<p>We’re pleased to announce the release of version 0.4 of Minoca OS. In the eight months since we released 0.3, our very first open source release, a lot has changed. Most notably Minoca is now sporting the_early_signs of a desktop. And of course no desktop would be complete without an application to run on it. So we’ve added<a href="http://www.fceux.com/web/home.html" target="_blank" rel="external">fceux</a>, an NES emulator, which we used to test both graphics performance and sound. Hopefully you’ll be better at Super Mario Brothers than Chris, who I watched blatantly kill Mario probably upwards of 50 times in the name of testing sound. Here’s what, how, and why we did it.</p>
<p>For those who have never heard of us before, Minoca OS is a new operating system built completely from the ground up. It’s designed to be lean, portable, modular, and modern (NES emulator notwithstanding). We’re trying to do more with less, so devices with limited power and resource budgets can get full OS functionality with minimal overhead.</p>
<h3 id="What’s-New"><a href="#What’s-New" class="headerlink" title="What’s New"></a>What’s New</h3><p>Some new drivers in 0.4:</p>
<ul>
<li>AHCI (the controller usually behind your SATA port)</li>
<li>e1000 (Intel gigabit networking driver)</li>
<li>USB and PS/2 mouse</li>
<li>Intel HD Audio and Raspberry Pi PWM audio</li>
</ul>
<p>Some new third-party packages worth noting:</p>
<ul>
<li>Xorg-server</li>
<li>SDL</li>
<li>fceux (NES emulator)</li>
<li>miniDLNA</li>
<li>Mesa3D (software rendering)</li>
<li>GTK+</li>
</ul>
<p>You can grab the latest OS images on ourdownloads page. Bugs and feature requests can be filed on our<a href="https://github.com/minoca/os" target="_blank" rel="external">GitHub</a>page. You can fire up X for yourself by running “opkg update; opkg install fceux xinit; startx”.</p>
<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>First of all I’d like to say a huge thank you to everyone who tried out Minoca OS since we went open source back in November. An even bigger thank you goes to the intrepid folks who submitted bugs and pull requests on our GitHub page. Chris and I really appreciate that, please continue to do it!</p>
<p>One of the requests we seemed to get a lot was “where’s the GUI” or “can I run this graphical application XYZ?” When we launched 0.3 we had done no work towards a graphical environment, mostly citing the fact that accelerated graphics are hard. That’s still true, and we still don’t have accelerated graphics (remember these are the_beginnings_of a desktop), but we were curious to find out how far out we were from having some sort of basic graphical environment.</p>
<p>The goal here was not to put out 0.4 with the message of “behold, the glorious desktop GUI has arrived”, but rather to provide the elements and building blocks for people familiar with compiling software to potentially make progress on their own.</p>
<h3 id="All-Roads-Lead-to-X"><a href="#All-Roads-Lead-to-X" class="headerlink" title="All Roads Lead to X"></a>All Roads Lead to X</h3><p>Our initial thought was actually to port over DirectFB, a Linux library for interacting directly with the frame buffer. In fact we went so far as to port DirectFB to Minoca. Things fell apart a bit when we went looking for applications built on top of DirectFB. There aren’t so many of those. Wayland/Weston looks super cool and new, but it also appeared to be pretty Linux-specific, so it didn’t seem like the ideal choice to start with. No, everything graphical seems to compile against X. The ancient terrifying medusa that is X. It was on the very bottom of my mental list of possible options, but it was becoming clear that it really was the_only_option.</p>
<p>X is not just one thing that you download and compile. It’s composed of over a hundred different packages. As developers of a new OS, we generally feel it’s a pretty good day if we’ve added one or two new packages. The idea of adding over 100 new packages even if they all ported perfectly seems daunting. And though we’ve worked hard to build a POSIX compatible C library, life has a way of not going that smoothly.</p>
<h3 id="Into-the-Abyss"><a href="#Into-the-Abyss" class="headerlink" title="Into the Abyss"></a>Into the Abyss</h3><p>There’s really no way to check and see if you’re going to get stuck on a missing OS feature in package number 67 of 140, you just have to start building and hope the obstacles are surmountable. The chapter on X in the<a href="http://www.linuxfromscratch.org/blfs/view/svn/x/installing.html" target="_blank" rel="external">Linux From Scratch</a>book is a precious map in an otherwise endless labyrinth. I have no idea how anyone built the X server before that book. Most of it isn’t super Linux-specific, with some light editing they could call it “Any OS From Scratch”.</p>
<p>It also helps that nearly everything is autoconfed. Not that I don’t struggle with autoconf and especially libtool, but I’d say autoconf and I have an “understanding” with each other. It’s the devil I know, at least.</p>
<p>The first batch of 25 or so packages contain mostly headers. A warmup round to get your fingers loose, I suppose. Then comes another batch of 30 or so library packages. To my surprise these seem to go by pretty smoothly, and even cross compile!</p>
<p>I hit my biggest obstacle with Mesa, the 3D graphics library responsible for libraries like libGL. Mesa was one of the few non-Xorg packages in the quest for the X server, and required some monkeying to get right. Supplying the right configure parameters for a non-Linux software-only pipeline that the X server was happy with took some trial and error. There were also a few OS-specific bits of code that needed the obligatory “and here’s Minoca, too” code snippets. The nastiest<a href="https://bugs.freedesktop.org/show_bug.cgi?id=35268" target="_blank" rel="external">barb</a>, which I’d only discover later, was their forced use of the “initial-exec” thread-local storage model. I know this was done in the name of performance, but it leaves a bit of a mess for the OS designers, who either have to 1) accommodate it with a brittle “might work for Mesa but I hope no one else does this” kind of hack, or 2) force programs using libGL to load it on initial program load, which the X server wouldn’t have ordinarily done. We went for option 2, which leaves you feeling only slightly less dirty.</p>
<p>The remaining packages leading up to running an X server went surprisingly smoothly. My compliments to the Xorg developers. Xterm, a non-Xorg package, required a bit of work. There are some code bases that have a “shove your OS in here with ifdefs” vibe to them, xterm is one of those. It’s usually pretty easy to do, but it never feels very good.</p>
<h3 id="Minoca-I-O"><a href="#Minoca-I-O" class="headerlink" title="Minoca I/O"></a>Minoca I/O</h3><p>In theory we had a running X server, but given that X couldn’t display video or receive input, there wasn’t much proof. I added Minoca framebuffer support, and wrote an input driver to allow X to gather keyboard and mouse events from the kernel. This also required actually adding mouse support to Minoca, including a USB HID parser. After some false starts, I was presented with this beauty:</p>
<p>Source:　<a href="http://www.tuicool.com/articles/hit/yyYNjyB" target="_blank" rel="external">https://blog.minocacorp.com/minoca-os-0-4-we-love-the-eighties-170a93112db1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/AzmmqmR.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;fceux running on the first Minoca OS X server&lt;/p&gt;
&lt;p&gt;We’re pleased to a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bid Farewell to These 6 Worst Website Design Habits</title>
    <link href="https://gmagon.com/blog/2017/06/30/bid-farewell-to-these-6-worst-website-design-habits/"/>
    <id>https://gmagon.com/blog/2017/06/30/bid-farewell-to-these-6-worst-website-design-habits/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:03:41.540Z</updated>
    
    <content type="html"><![CDATA[<p>Your website is the primary online identity of your business. Hence, it has to be flawless. It is the space through which your potential clients can gather all their information on your company. A well designed<a href="https://www.perth-web-design.com.au/website-design-portfolio/" target="_blank" rel="external">web design</a>can make or break your business. Hence, it is crucial that you avoid some of the common design mistakes which do not speak well to the visitors.</p>
<h2 id="Lack-of-User-Friendliness"><a href="#Lack-of-User-Friendliness" class="headerlink" title="Lack of User Friendliness"></a>Lack of User Friendliness</h2><p>The first and foremost thing to keep in mind while designing your website is its user friendliness. You cannot assume all of your visitors to be extremely tech savvy. If your website is not easy to access and browse through for users of different levels of technological competence, it can give rise to frustration, which in turn, will make them customers abandon your space. Therefore, make sure all the necessary content or contact information is displayed clearly. Use easily accessible menu tabs, call to action buttons and whatever else it takes to ensure a smooth experience for your visitors.</p>
<h2 id="Thoughtless-use-of-Colors"><a href="#Thoughtless-use-of-Colors" class="headerlink" title="Thoughtless use of Colors"></a>Thoughtless use of Colors</h2><p>It is important to know what your company represents and how to present all of it though your web design. Using the right kind of color scheme and design is crucial else you might end up<a href="https://tech.co/employee-benefits-package-millennial-2017-01" target="_blank" rel="external">damaging your company’s image</a>. Choose your colors wisely, keeping in mind the image you want to portray. Keep it simple but stunning. First, decide if you want a complimentary or contrasting color scheme, and once decided, stick to it.</p>
<h2 id="Lack-of-White-Space"><a href="#Lack-of-White-Space" class="headerlink" title="Lack of White Space"></a>Lack of White Space</h2><p>If there is one thing that annoys a visitor infinitely, it is the lack of white space. White space is a stretch of blank space on your website, which is intended to strike a balance between the matter so as to ensure a better view of the content. Gone are the shiny, glittery designs of the nineties where websites tend to cram everything into one page. Minimalism offers a clean look which helps your viewer focus on the content better.</p>
<p><img src="http://img2.tuicool.com/7FRVNbQ.jpg!web" alt=""></p>
<h2 id="Autoplays-and-Pop-Ups"><a href="#Autoplays-and-Pop-Ups" class="headerlink" title="Autoplays and Pop Ups"></a>Autoplays and Pop Ups</h2><p>Often websites choose to include a small pop up page to ask their users to register or to advertise their content but it is not an advisable design. Concentrate more on the content than on such mindless advertisement. If your website is informative and well structured, viewers will automatically choose to register or look into your other content. Don’t distract your visitors with an annoying pop up. Similarly, autoplay can be an extremely infuriating feature on a website. For example, if someone is checking your website out at work or on a cab, it can be frustrating if an<a href="http://www.dreamytricks.net/free-music-download-apps-for-android/" target="_blank" rel="external">music starts playing automatically</a>. Give your users the choice to play it instead of forcing it upon them.</p>
<h2 id="Slow-Loading-Design"><a href="#Slow-Loading-Design" class="headerlink" title="Slow Loading Design"></a>Slow Loading Design</h2><p>Always keep this in mind that your viewers will not spend an extra second waiting for your website to load. Therefore, make sure that your website is not too loaded to compromise loading speed. You can get rid of heavy designs like carousels, too many pictures, videos, etc., which slow down the loading process. Make sure you put only the most essential content on your page above the fold. Your user will not mind scrolling over to the next page but aslow loading page will definitely make you lose out on visitors.</p>
<h2 id="Non-Responsive-Design"><a href="#Non-Responsive-Design" class="headerlink" title="Non Responsive Design"></a>Non Responsive Design</h2><p>As more and more people are shifting to hand held mobile devices to access the internet, it is almost a crime to not make your website mobile responsive. Lack of responsiveness will not only make your website difficult to view on a smaller device like a tablet or a mobile phone, it will also push down your ratings on the Google search, which can be disastrous for any website.</p>
<p>Design your website wisely as it is the face of your company. It is what gives your potential clients an idea about your organization and helps you turn your visitors into clients. Hence, avoid these mistakes to ensure an excellent viewing experience for your visitors.</p>
<p>Read more<a href="https://tech.co/entrepreneur/development-design" target="_blank" rel="external">about designing a quality website for your company</a>at TechCo</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/ENfiyi3" target="_blank" rel="external">https://tech.co/bid-farewell-worst-design-habits-2017-06</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Your website is the primary online identity of your business. Hence, it has to be flawless. It is the space through which your potential 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Get epic graphic design skills and the diploma to prove it</title>
    <link href="https://gmagon.com/blog/2017/06/30/get-epic-graphic-design-skills-and-the-diploma-to-prove-it/"/>
    <id>https://gmagon.com/blog/2017/06/30/get-epic-graphic-design-skills-and-the-diploma-to-prove-it/</id>
    <published>2017-06-30T00:00:00.000Z</published>
    <updated>2017-06-30T10:03:41.544Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img1.tuicool.com/BvQbAzQ.jpg!web" alt=""></p>
<p>You know when you see a simple new company logo then hear that they paid<strong>half a million dollars</strong>for it? A graphic designer did that. If you want to get in on this action, the<a href="https://goo.gl/LEaxcr" target="_blank" rel="external"><strong>Graphic Design Certification School</strong></a>can teach you the skills <strong>and get you certified</strong>in the process.</p>
<p>It’s not enough to be creative these days, to make it as a designer you need to have an<strong>intimate knowledge of the software</strong>. This learning kit comprises<strong>expert training</strong>in the big three Adobe design packages.</p>
<h2 id="Here’s-what-you-get"><a href="#Here’s-what-you-get" class="headerlink" title="Here’s what you get:"></a>Here’s what you get:</h2><p><a href="https://goo.gl/LEaxcr" target="_blank" rel="external">Photoshop Course</a>– $399 value</p>
<p><a href="https://goo.gl/LEaxcr" target="_blank" rel="external">InDesign Course</a>– $399 value</p>
<p><a href="https://goo.gl/LEaxcr" target="_blank" rel="external">Illustrator Course</a>– $399 value</p>
<p>Starting from the basics you’ll<strong>learn everything you need to know</strong>about<strong>creating and editing images and documents</strong>for print or online publishing. From fundamentals like pixels to layering and creating 3D images. You’ll<strong>also learn the need-to-know details</strong>associated with graphic design, such as image rights.</p>
<p>You could sign up for these courses out of<strong>pure interest</strong>, but there are<strong>great extras</strong>too. The package is<strong>CPD certified</strong>so you’re both learning and accumulating CPD hours. If that doesn’t mean much to you, then how about this – Each course includes an online assessment, which leads to<strong>a DTP Master Diploma</strong>. How do you like those apples.</p>
<p>You’ll learn everything you need to know about creating and editing images</p>
<p>There’s a stonking<a href="https://goo.gl/LEaxcr" target="_blank" rel="external"><strong>96% discount</strong></a>on this toolkit right now, so this tasty bundle is all yours for<a href="https://goo.gl/LEaxcr" target="_blank" rel="external"><strong>just $39.</strong></a>That’s for<strong>lifetime access</strong>too, so if you fancy taking it on at any time then<strong> sign up now while it’s on offer.</strong></p>
<p>Don’t leave it too late.<strong>Hit the button below</strong>to join the 2,000 people already enrolled.</p>
<p><a href="https://goo.gl/LEaxcr" target="_blank" rel="external">check it out!</a></p>
<p>Is this deal not quite right for you? Head over to the<a href="https://goo.gl/WPGPbB" target="_blank" rel="external">AAPICKS HUB</a>for more savings you’re going to love! For notifications of offers and price drops, sign up for our<a href="https://goo.gl/WbwVpc" target="_blank" rel="external">Deal Alerts</a>newsletter.</p>
<p>We may get a small percent from purchases made through our posts. However, the AA Picks team only showcases verified, legitimate deals. It’s a nice way to help keep the lights on around here, and it decreases our reliance on pesky ads. If you have questions or concerns, please reach out at<a href="mailto:aapicks@androidauthority.com" target="_blank" rel="external">aapicks@androidauthority.com</a>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/j6nEnm" target="_blank" rel="external">http://www.androidauthority.com/graphic-design-school-2-782862/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/BvQbAzQ.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You know when you see a simple new company logo then hear that they pai
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Repetition, Pattern, and Rhythm</title>
    <link href="https://gmagon.com/blog/2017/06/28/repetition-pattern-and-rhythm/"/>
    <id>https://gmagon.com/blog/2017/06/28/repetition-pattern-and-rhythm/</id>
    <published>2017-06-28T00:00:00.000Z</published>
    <updated>2017-06-28T10:01:53.444Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s look at three subjects that, at first glance, may strike you as being incredibly basic and self-explanatory. However, although they mayseemlike they should need no introduction, we should study them. By understanding these concepts, you’ll be able to apply them more effectively to captivate your users’ attention while making your designs more effective.</p>
<p>Say “repetition” and you might think about someone who says the same thing over and over again. However, it’s different indesign. Repeating things does not have to be boring! In fact, it canempowera design when used in the right way. It can also ensure that messages are better understood. As designers, we have threerepetition methods:<strong>repetition</strong>,<strong>patterns</strong>, and<strong>rhythm</strong>.</p>
<h2 id="Repetition"><a href="#Repetition" class="headerlink" title="Repetition"></a>Repetition</h2><p>Repetition is simply repeating a single element many times in a design. For example, you could draw aline horizontally and then draw several others next to it.</p>
<p><img src="http://img2.tuicool.com/qyeMfyB.jpg!web" alt=""></p>
<p>Repetition can be useful in web and app design. For example, you’d expect the logo of a business to be repeated on every page and in the same place. Menu items are also often repeated in the same place on a page. This helps provide a consistentuser experience. By repeatingelements, we as designers not onlydeliver according to our users’expectations in this way, but we also improve their experience. Our being consistent makes the users more comfortable. Remember that the eye works in a certain way by default. Using repetition to keep the eye familiar with our design’s elements means we’re taking advantage of this tendency. We can also use shapes, colors, textures, fonts, etc. to maintain this consistency via repetition.</p>
<p>You can also achieve repetition by using repeated messages. If you want your customers to know that you’re the cheapest or the fastest in the business, you’ll want to tell them that on more than one occasion if you want the message to stick. In this instance, we use repetition forreinforcement. You may rememberlearning your times tables by repeating them until you drummed them into your mind. The principle here is the same. We retain information better the more often we encounter it and internalize it.</p>
<h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><p>Patterns are simply a repetition of more tan one design element working in concert with each other. Aseamless patternis one where every element within a design (no matter how often it’s repeated) combines to form a whole. This is most common in backgrounds on web and app pages. It’s also popular in carpet and wallpaper design. Look around you: your bed cover, wall, notebook cover. If you see a seamless pattern, look at it closely. Do you see how the elements (circles, spirals, cones, pineapples, etc.) appear again and again in the same way? Sometimes, they touch; sometimes, they have space between them.</p>
<p><img src="http://img0.tuicool.com/qYzEJfu.jpg!web" alt=""></p>
<p>Author/Copyright holder: Dirk Stoop. Copyright terms and licence: CC BY-NC 2.0</p>
<p>As you might expect, designers base most patterns on colors, textures and shapes, rather than words. We can recognize shapes far more quickly than words, which we have to read, no matter how quickly. You can find such patterns in architecture, too. Architects tend to include a unifying motif on the inside and outside of buildings to enhance the aesthetic appeal. This is nothing new. Think of ancient Greek buildings such as the Parthenon. Ancient designers could be ingenious in their use of patterns of such elements as lines and spirals.</p>
<p>When you consider using patterns in your web or app design, you’ll want to think about the pattern’s complexity. While it might seem like a nice idea to tile a single image as a background, this can make it much harder to read the text that lies over the pattern. If you want tocreate a design for a site that deals with travel to Greece, you could use the top of an ancient column for your design. At first, it looks great; you’ve got a beautiful design that features circles and grape leaves.</p>
<p>However, you still have to add text. So, writing over this, you soon notice a problem. The dark writing sometimes falls over the image’s dark lines. You could use brighter text, such as white or yellow, but you’ll find that the gray stone makes it hard to read, too.You’rehaving trouble reading it, and so will your users. They want to engage with your design, not work to try and read text.Simplicity andsubtlety are key considerations if you want to maintain the user experience, keeping usersonyour page.</p>
<h2 id="Rhythm"><a href="#Rhythm" class="headerlink" title="Rhythm"></a>Rhythm</h2><p>When you repeat elements, the intervals between those repetitions can create a sense of rhythm in the viewer and a sense ofmovement. Musicians create rhythm in the spacing between notes, effectively making these “silent” gapsplay offthe notes. Designers insert spacing between elements to makerhythm. There are, broadly speaking, five types of visual rhythm.</p>
<p><img src="http://img2.tuicool.com/AfeAVnA.jpg!web" alt=""></p>
<p>Author/Copyright holder: Eden-Lys. Copyright terms and licence: CC BY-NC-ND 2.0</p>
<p><strong>Random rhythm</strong>–Repeating elements with nospecific regular interval creates random rhythms. The spacing could be a millimeter here, a centimeter there, while the elements could be all over the place. Think of falling snow, pebbles on a beach, traffic movements: they are all examples of random rhythms in action.</p>
<p>It’s also worth noting that a rhythm mayappearrandom if you examine asmall section of the rhythm. However, if you step back and examine a larger section, it may be that there is a regular but complex rhythm applied to the design. Remember that you have positive and negative images, which you can use so that both the elements and the spaces between them make your design hard to “predict”. By using a larger series of elements, you’ll have virtually limitless possibilities toplay with. The artist René Magritte made particularly interesting use of random rhythm.</p>
<p><strong>Regular rhythm</strong>–Like the beating of aheart, the regular rhythm follows the same intervals over and over again. You can easily make a regular rhythm just by creating a grid or a series of vertical lines. The user’s eye will instantly recognize a regular rhythm, scanning it for any irregularities in the process. Remember, the eye “likes” to be drawn to outstanding elements. Therefore, there is a risk that when you’re using a regular rhythm in a design that it can become monotonous (like the dripping of a tap).</p>
<p><strong>Alternating rhythm</strong>–You can repeat more than one element in a design. In an alternating design, you use a 1-2-1-2-1-2 pattern. Think of the black and white squares on a chessboard: that’s an alternating rhythm in play. An alternating rhythm is, in fact, a regular rhythm with more complexity. It could be as straightforward as our chessboard, or we could envision something more intricate. Some fantastic alternating rhythms include rows of fish, birds, or other animals. Taking fish as an example, we can see that each identical fish is following another. Below, the sequence is repeated; however, thenegative space betweenthe rows shows fish of theothercolor (which we take to be the background) swimming the other way, the fine lines of their fins and tails interlocking with those of the first pattern of fish. M.C. Escher’sLizard(1942) is another great example of this, incorporating three colors of lizards with a pair of lizards of each color facing away from each other, tail to tail. As simple or complex as we want to make an alternating rhythm, it can be an easy way to break up the monotony of a regular rhythm.</p>
<p><strong>Flowing rhythm</strong>–A flowing rhythm shows the repeated elements following bends, curves, and undulations. In nature, you can see this in the waves on a beach or sand dunes. As designers, we can mimic nature by making wonderful patterns of elements with flowing rhythm. We can show clumps of seaweed underwater, their strands gently facing in a series of directions. The user imagines them washing against each other.</p>
<p><strong>Progressive rhythm</strong>–We can make a progressive rhythm simply by changing one characteristic of a motif as we repeat it. We could draw a series of circles, one above the other, making each lower one larger. Do you see how the largest one at the bottom looks like it’s closest to you? We can make a progressive rhythm change subtly or dramatically. You could add shade to the smaller circles progressively so that the smallest one at the top is dark, the middle one in partial shade, and the biggest one only slightly shaded. Progressive rhythms surround us. If you were tovideo someone dancing and then examine that video frame-by-frame, you would have a progressive rhythm.</p>
<h2 id="Designing-with-Repetition-Pattern-and-Rhythm"><a href="#Designing-with-Repetition-Pattern-and-Rhythm" class="headerlink" title="Designing with Repetition, Pattern, and Rhythm"></a>Designing with Repetition, Pattern, and Rhythm</h2><p>The use of repeated visual elements is a technique designers commonly employ inweb design. You can repeat design elements, for example, to provide a consistent visual experience. It will make it easier for users to focus on the content because they know where they can find specific types of content ornavigation options.</p>
<p>You can also use repetition to draw attention to a particular area of content or design. You can use it to show relationships between content blocks, too.</p>
<p>Also, you can use patterns for backgrounds to addtexture and consistency, and you can deploy them to deliver consistency between pages of the same type.</p>
<p>As designers, we can use rhythm to create excitement (building gradually over time) or reassurance (a heartbeat might be perfect on a page aimed at expectant mothers, for example). Or, we can use it to influence otheremotions.</p>
<h2 id="The-Take-Away"><a href="#The-Take-Away" class="headerlink" title="The Take Away"></a>The Take Away</h2><p>As a designer, you have three types of repetition:</p>
<ul>
<li>Repetition</li>
<li>Patterns</li>
<li>Rhythm</li>
</ul>
<p>You can use these toshape the user experience of your web or app. Through repetition,patterns, or rhythm, you set “the mood” of theuser interface and use these elements to either reinforce your message and/or create the look and feel of your product.</p>
<p>Repetition is the simplest element you can use. Pattern is a combination of elements that are repeated. Rhythm involves using intervals or spaces between elements to give the user an impression of rhythm or movement. We can use five types of rhythm:</p>
<ul>
<li>Random Rhythm</li>
<li>Regular Rhythm</li>
<li>Alternating Rhythm</li>
<li>Flowing Rhythm</li>
<li>Progressive Rhythm</li>
</ul>
<p>There is also another conception of pattern that comes from architect Christopher Alexander. We will examine that in a later article. Rhythm, like in music, helps build a cadence in your design, engaging your users with all sorts of interesting variations. With some thought, you can maximize the impact of your message by working the right rhythm into your design.</p>
<h2 id="References-amp-Where-to-Learn-More"><a href="#References-amp-Where-to-Learn-More" class="headerlink" title="References &amp; Where to Learn More"></a>References &amp; Where to Learn More</h2><ul>
<li>Hero Image: Author/Copyright holder: Jonas Bengtsson. Copyright terms and licence: CC BY 2.0</li>
<li>Design in Art: Repetition, Pattern, and Rhythm.<br>Sophia Learning.<br>Retrieved from: <a href="http://www.sophia.org/tutorials/design-in-art-repetition-pattern-and-rhythm" target="_blank" rel="external">http://www.sophia.org/tutorials/design-in-art-repetition-pattern-and-rhythm</a>. [2014, Aug]</li>
<li>Swinburne. BasicDesign Principles. Retrieved from: <a href="http://www.swinburne.edu.au/design/tutorials/design/design/\#four" target="_blank" rel="external">http://www.swinburne.edu.au/design/tutorials/design/design/\#four</a>. [2014 Aug]</li>
</ul>
<p>Source: <a href="http://www.tuicool.com/articles/hit/QfAJN3N" target="_blank" rel="external">https://www.interaction-design.org/literature/article/repetition-pattern-and-rhythm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s look at three subjects that, at first glance, may strike you as being incredibly basic and self-explanatory. However, although they
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Google News shows off its minimalist new look</title>
    <link href="https://gmagon.com/blog/2017/06/28/google-news-shows-off-its-minimalist-new-look/"/>
    <id>https://gmagon.com/blog/2017/06/28/google-news-shows-off-its-minimalist-new-look/</id>
    <published>2017-06-28T00:00:00.000Z</published>
    <updated>2017-06-28T10:01:53.436Z</updated>
    
    <content type="html"><![CDATA[<p>Google today rolled out a brand new look for News. The redesign is modern, clutter-free, and puts the emphasis on what’s important when browsing dozens of news stories.</p>
<p>According to Google:</p>
<p>“To make news more accessible and easier to navigate, we redesigned the desktop website with a renewed focus on facts, diverse perspectives, and more control for users.”</p>
<p>Scrolling through the news feed, you’ll find easily scannable content.Google’s Story card format allowsusers to quickly pinpoint key bits of information like news source, headline, and publish time. The Story cards also allow users to look at the different perspectives surrounding the story ー encouraging readers to gain a more informative understanding of the issue.</p>
<p>And if you glance at the top of the page, you’ll see a new navigation bar for “Headlines,” “Local” and “For You.” “Local” is exactly what it sounds like ー keeping tabs on stories from any part of the world. And then there’s “For You,” a feature that personalizes the news feed based on your interests.</p>
<p><img src="http://img2.tuicool.com/73uyMnN.png!web" alt=""></p>
<p>The icing on the cake is the Fact Check block, which makes it a lot easier to vet a story’s credibility.</p>
<p>The feature is only available to US readers at the moment, but Google plans to slowly roll out the update globally.</p>
<p><a href="https://thenextweb.com/company/google/" target="_blank" rel="external">Google</a><a href="https://thenextweb.com/section/insights/" target="_blank" rel="external">Insights</a></p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/3yquAfB" target="_blank" rel="external">https://thenextweb.com/google/2017/06/28/google-news-shows-off-its-minimalist-new-look/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Google today rolled out a brand new look for News. The redesign is modern, clutter-free, and puts the emphasis on what’s important when b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pnpm version 1 is out!</title>
    <link href="https://gmagon.com/blog/2017/06/28/pnpm-version-1-is-out/"/>
    <id>https://gmagon.com/blog/2017/06/28/pnpm-version-1-is-out/</id>
    <published>2017-06-28T00:00:00.000Z</published>
    <updated>2017-06-28T10:01:53.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pnpm-version-1-is-out"><a href="#pnpm-version-1-is-out" class="headerlink" title="_pnpm_version 1 is out!"></a>_pnpm_version 1 is out!</h2><p>Today we’re excited to announce the release of<a href="https://github.com/pnpm/pnpm" target="_blank" rel="external">pnpm</a>1!</p>
<p>Why only now? The initial commit to pnpm was made byRico Sta. Cruz on<a href="https://github.com/pnpm/pnpm/commit/4b42e5fcc402310d028ac54ba8fe979f7c4470af" target="_blank" rel="external">Jan 27, 2016</a>. It was based on the ideas of<a href="https://github.com/alexanderGugel/ied" target="_blank" rel="external">ied</a>by<a href="https://twitter.com/alexanderGugel" target="_blank" rel="external">Alexander Gugel</a>with initial commit on<a href="https://github.com/alexanderGugel/ied/commit/d8bae2d63750030b019e9653ce9ea71de93be5c7" target="_blank" rel="external">Aug 6, 2015</a>!</p>
<p>Unlike<em>Yarn</em>, which has decided to use the same<strong>node_modules</strong>structure that_npm_creates,_pnpm_uses a completely new approach (about which you can read more inthis article). It was_really_hard to make a symlinked<strong>node_modules</strong>structure work with most of the existing npm packages! All the different problems that we have encountered and the dozens of breaking changes we had to make, deserves a post of its own. Finally, almost 2 years since the idea of a symlinked<strong>node_modules</strong>structure has born, we can tell with confidence: it is possible and<strong>it does work</strong>.</p>
<h3 id="So-what-does-version-1-mean"><a href="#So-what-does-version-1-mean" class="headerlink" title="So what does version 1 mean?"></a>So what does version 1 mean?</h3><p>Version 1 means that:</p>
<ul>
<li>The<br><a href="https://github.com/pnpm/pnpm/blob/master/docs/about-the-package-store.md" target="_blank" rel="external">store structure</a><br>that pnpm uses since<br><a href="https://github.com/pnpm/pnpm/releases/tag/v0.70.0" target="_blank" rel="external">version 0.70</a><br>is reliable enough and we are confident that there will be no need in breaking changes in its structure.</li>
<li><p><a href="https://github.com/pnpm/pnpm/blob/master/docs/symlinked-node-modules-structure.md" target="_blank" rel="external">The<strong>node_modules</strong>layout</a><br>that pnpm creates works with most of the ecosystem.</p>
<p><em>pnpm@1</em><br>also ships with an experimental<br><strong>node_modules</strong><br>layout that can be turned on with the<br><a href="https://github.com/pnpm/pnpm#independent-leaves" target="_blank" rel="external">independent-leaves</a><br>config. The experimental layout boosts installation speed by 8% and works almost with all projects. However, we were not confident enough to make it the default yet.</p>
</li>
<li>The format of the<br><strong>shrinkwrap.yaml</strong><br>file, which is pnpm’s lockfile, is good enough for being committed to VCS.</li>
<li>When possible,<br><em>pnpm@1</em><br>works the way<br><em>npm@5</em><br>does.</li>
</ul>
<p>You can rely on these things and they won’t get breaking changes in version 1.</p>
<h3 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h3><p>Even faster!The goal is to make installations<em>subsecond fast</em>. So fast that it would run on every Git operation. Maybe one day it would be even integrated to Git?!</p>
<p>As of now, pnpm is faster than Yarn when installing with cold cache but may be a bit slower in different scenarios. For a detailed comparison of npm/pnpm/Yarn speed, see “<a href="https://intoli.com/blog/node-package-manager-benchmarks/" target="_blank" rel="external">Why I still don’t use Yarn</a>”. However, there is no reason for pnpm to be slower than Yarn or npm. So we’ll have to find the issues and make pnpm faster.</p>
<p>Simpler codebase.pnpm is currently very hard to contribute to, so it will have to be split into separate packages. The first step will probably be separation of the installation engine.</p>
<p>PR.Although pnpm is public for a longer period of time than Yarn, it is far less popular. So more articles, more documentation, and more interesting tools will be created to promote pnpm. Let’s make our<a href="https://github.com/pnpm/awesome-pnpm" target="_blank" rel="external">awesome list</a>huge!</p>
<h3 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h3><p>Just install pnpm via npm:<code>npm install -g pnpm</code>. And use it instead of npm whenever you want to install something:<code>pnpm i foo</code>.</p>
<p>Also, you can read more info at the<a href="https://github.com/pnpm/pnpm" target="_blank" rel="external">pnpm GitHub repo</a>. You can follow<a href="https://twitter.com/pnpmjs" target="_blank" rel="external">pnpm on Twitter</a>or ask for help at the<a href="https://gitter.im/pnpm/pnpm" target="_blank" rel="external">pnpm Gitter Chat Room</a>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/euQnUn7" target="_blank" rel="external">https://medium.com/pnpm/pnpm-version-1-is-out-935a07af914</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pnpm-version-1-is-out&quot;&gt;&lt;a href=&quot;#pnpm-version-1-is-out&quot; class=&quot;headerlink&quot; title=&quot;_pnpm_version 1 is out!&quot;&gt;&lt;/a&gt;_pnpm_version 1 is ou
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5 ways type can define brands</title>
    <link href="https://gmagon.com/blog/2017/06/28/5-ways-type-can-define-brands/"/>
    <id>https://gmagon.com/blog/2017/06/28/5-ways-type-can-define-brands/</id>
    <published>2017-06-28T00:00:00.000Z</published>
    <updated>2017-06-28T10:01:53.415Z</updated>
    
    <content type="html"><![CDATA[<p>Choosing the right typeface is a crucial part of thelogo design process, but when it comes to defining the unique characteristics of a brand, it can also play a much more subtle role in shaping its personality and tone of voice.</p>
<p>For smaller brands, this tends to be as simple as selecting an existing typeface that’s best suited for their particular needs. But the ultimate solution, for those with the time and budget to do so, is a bespoke font tweaked to perfection.</p>
<p>Studios such as<a href="https://www.daltonmaag.com/" target="_blank" rel="external">Dalton Maag</a>,<a href="https://commercialtype.com/" target="_blank" rel="external">Commercial Type</a>,<a href="http://www.fontsmith.com/" target="_blank" rel="external">Fontsmith</a>and<a href="https://www.typography.com/" target="_blank" rel="external">Hoefler &amp; Co</a>haver extensive experience in developing bespoke typefaces for brands, and many of their clients have honed their personality across many different platforms as a result.</p>
<p>Read on to discover how bespoke typography has enhanced brands across five different sectors…</p>
<h3 id="01-Motion-friendly-type-for-broadcasters"><a href="#01-Motion-friendly-type-for-broadcasters" class="headerlink" title="01. Motion-friendly type for broadcasters"></a>01. Motion-friendly type for broadcasters</h3><p>On-screen branding provides a particular challenge for bespoke typefaces, as motion graphics come into play alongside all manner of other uses, from billboards to corporate stationery.</p>
<p><a href="http://brody-associates.com/" target="_blank" rel="external">Brody Associates</a>’ highly distinctive typeface for Channel 4 is a great example of the versatility required to convey personality in this field. Within the same family, it combines a functional text face (Chadwick) with a highly expressive display version (Horseferry).</p>
<p><img src="http://img1.tuicool.com/fERJBbY.jpg!web" alt=""></p>
<p>Channel 4 can choose between text face Chadwick and display face Horseferry</p>
<p>Horseferry incorporates elements from Channel 4’s logo into the letterforms, with highly unconventional, striking results that can only function at large sizes, such as for advertising. Chadwick follows the same basic structure, but calms things down to help with legibility, particularly when used to communicate information on screen.</p>
<p><img src="http://img2.tuicool.com/vy6Brm6.jpg!web" alt=""></p>
<p>The curves of the ITV logotype are echoed in its typeface</p>
<p>For ITV, Fontsmith was given the task of translating the smooth, flowing curves of the broadcaster’s logotype into a whole typeface family to be used across the brand, including TV, online and on-demand applications.</p>
<p>The resulting typeface is detailed and wide proportioned, with a subtle calligraphic feel. According to Fontsmith: “When you take a pen off the page when writing, you get the sense of a rounded ending to the stroke or line creating a subtle, modern and bouncy script tone of voice.”</p>
<h3 id="02-Standout-typography-for-packaging"><a href="#02-Standout-typography-for-packaging" class="headerlink" title="02. Standout typography for packaging"></a>02. Standout typography for packaging</h3><p>When it comes to brands that express themselves on packaging, on-shelf standout becomes a critical factor to consider in a typeface. And where global brands are concerned, different language support also comes into play as that packaging needs to cater to different markets.</p>
<p><img src="http://img0.tuicool.com/Qj2eqeZ.jpg!web" alt=""></p>
<p>Colgate Ready was translated into a range of different scripts</p>
<p>Another Fontsmith case study is Colgate, in collaboration with The Partners and Red Fuse Communications. The brief was to reflect the “emotional and tonal dimensions” of the brand through a Roman/Latin typeface in three different weights, and ‘Colgate Ready’ was the result.</p>
<p>Colgate Ready was translated into Cyrillic, Eastern European, Devanagari and Thai, with a consistent stroke weight, x-height, cap height, width proportions and terminals.</p>
<p><img src="http://img2.tuicool.com/2iQNR3f.jpg!web" alt=""></p>
<p>Hoefler &amp; Co’s bespoke typeface is used sparingly on Tiffany &amp; Co’s packaging</p>
<p>At the other end of the scale, in the luxury market, Tiffany &amp; Co’s unique typeface, created by Hoefler &amp; Co, is used sparingly on the jeweller’s minimalist packaging, making those iconic duck-egg-blue boxes even more desirable.</p>
<h3 id="03-Flexible-typography-for-retail"><a href="#03-Flexible-typography-for-retail" class="headerlink" title="03. Flexible typography for retail"></a>03. Flexible typography for retail</h3><p>Another fascinating application of bespoke type is in the retail space, where applications range from signage and wayfinding, to point-of-sale displays, to own-brand packaging.</p>
<p>Dalton Maag was commissioned to create a bespoke font for Lush, translating the boutique cosmetics brand’s distinctive chalkboard-style handwritten signage into a more neutral and contemporary typeface.</p>
<p>“Every letter had two alternate versions, while the most-used letters had three alternates,” explains designer Riccardo de Franceschi. “On top of these we created ligatures, and selected them according to not only frequency of use, but also the way the Lush handwriters write.”</p>
<p><img src="http://img1.tuicool.com/q6NzAzr.jpg!web" alt=""></p>
<p>For Lush’s typeface, each character needed two or three alternative versions</p>
<p>Lush’s typeface helps develop its boutique, artisan brand voice, but larger stores need to tread a finer line between personality and functionality – such as Fontsmith’s bespoke typeface for Sainsbury’s, which uses the foundry’s own FS Lola as a starting point.</p>
<p>“The new font needed to successfully stretch across a wide range of channels including above the line marketing, online, publications, packaging, in-store services, in-store navigation and in-store pricing,” reveals the agency. “It had to work from 400pt, all the way down to 6pt.”</p>
<p><img src="http://img1.tuicool.com/NRzQbe6.jpg!web" alt=""></p>
<p>Sainsbury’s’ font needed to stretch across a wide range of uses</p>
<p>FS Lola’s distinctive slab serifs were softened, while regularly used brand words – particularly those that featured in wayfinding and signage – were adjusted on a case by case basis to improve legibility while conveying the supermarket’s personality.</p>
<h3 id="04-Scalable-typography-for-mobile"><a href="#04-Scalable-typography-for-mobile" class="headerlink" title="04. Scalable typography for mobile"></a>04. Scalable typography for mobile</h3><p>When it comes to mobile use, the need for functionality and legibility at tiny sizes on small screens can all too easily overwhelm brand personality. But it’s not impossible.</p>
<p><img src="http://img1.tuicool.com/EFVvQvq.jpg!web" alt=""></p>
<p>For Nokia, Dalton Maag faced a massive, multi-platform, multi-language project</p>
<p>Bespoke type projects don’t get much more in-depth than Dalton Maag’s breakthrough project for global giant Nokia, which saw the agency expand massively to handle the demands of the multi-platform, multi-language project – including Hebrew, Arabic, Thai, Greek and Russian.</p>
<p>“This was all about going back to Finnish design roots – clean, simple, pure – and functionality was the primary objective,” explains Bruno Maag. “There was a big discussion about whether the brand fonts should have more personality or not. While the UI fonts need to be functional and readable, the display fonts have to do something else for their job.”</p>
<p><img src="http://img2.tuicool.com/jURzmi6.jpg!web" alt=""></p>
<p>Fontsmith created this bespoke semi-slab serif typeface for Movistar</p>
<p>Fontsmith collaborated with Interbrand on a bespoke semi-slab serif typeface for Movistar, Telefónica’s Spanish and Latin American mobile operator. According to the agency: “We needed to be mindful that the slab wasn’t too static, that it had rhythm, progression, an approachable nature, and was authentic.”</p>
<h3 id="05-Apt-typography-for-editorial"><a href="#05-Apt-typography-for-editorial" class="headerlink" title="05. Apt typography for editorial"></a>05. Apt typography for editorial</h3><p>One of the most varied uses for a bespoke typeface is in a newspaper or magazine, purely because there are so many sizes, weights and styles involved in different capacities.</p>
<p><img src="http://img0.tuicool.com/INFbyaq.jpg!web" alt=""></p>
<p>Commercial Type designed this multi-weight typeface for The Guardian in 2005</p>
<p>A particularly high-profile example of this is Commercial Type’s multi-weight typeface for The Guardian, which coincided with the newspaper’s transition to the Berliner format in 2005. It has served the newspaper well ever since, although the recent announcement that it’ll shrink to tabloid size in 2018 may prompt another refresh.</p>
<p>The extensive family incorporates several interrelated families: an Egyptian for headlines; a Text Egyptian; four different widths of Sans for headlines; and finally an Agate Sans. Between them, they can handle everything from hard-hitting headlines to tiny financial listings.</p>
<p><img src="http://img1.tuicool.com/6R3mm2B.jpg!web" alt=""></p>
<p>Wired is synonymous with innovative typography</p>
<p>One magazine that’s synonymous with innovative use of type is Condé Nast’s Wired – and again, Hoefler &amp; Co rose to the challenge with Forza, an adaptable sans serif based on a rounded rectangle structure that, like Guardian Collection, is available commercially.</p>
<p>“Wired commissioned us to design a square sans as its editorial workhorse – one that could handle everything from philosophical essays to down-to-earth service pieces,” reports Hoefler &amp; Co. “Forza’s sophisticated visual vocabulary makes it alert and engaging, and its broad palette of weights ensures it can meet the needs of the most demanding designer.”</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/yIzmAnr" target="_blank" rel="external">http://www.creativebloq.com/features/5-ways-type-can-define-brands</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Choosing the right typeface is a crucial part of thelogo design process, but when it comes to defining the unique characteristics of a br
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Design. Prototype. Propose. How One Man Used Adobe XD To Ask ‘Will You Marry Me?’</title>
    <link href="https://gmagon.com/blog/2017/06/28/design-prototype-propose-how-one-man-used-adobe-xd-to-ask-will-you-marry-me/"/>
    <id>https://gmagon.com/blog/2017/06/28/design-prototype-propose-how-one-man-used-adobe-xd-to-ask-will-you-marry-me/</id>
    <published>2017-06-28T00:00:00.000Z</published>
    <updated>2017-06-28T10:01:53.433Z</updated>
    
    <content type="html"><![CDATA[<p>Adobe XD is known as a powerful design and prototyping tool, but at its core it’s a communication tool that lets users share ideas quickly and easily. We’ve seen lots of examples of great work<a href="https://twitter.com/search?q=%23madewithadobexd&amp;src=typd" target="_blank" rel="external">shared online with #MadeWithAdobeXD</a>, but nothing quite like this. When Lee Chapman, a Latvia-based project manager for Cake HR, was introduced to XD by his boss, he started dreaming up a plan to use the program outside of work. It was a mission of love.</p>
<p><img src="http://img1.tuicool.com/zERZV3z.jpg!web" alt=""></p>
<p>Lee was dreaming up a creative way to propose to his girlfriend Zane (pronounced Zana), and he decided Adobe XD was going to be the way to do it.</p>
<p>“Zane and I met on Tinder, and I wanted her to relive the experience of our first date, so I decided to mock-up my own version of Tinder,” said Lee. The only problem — Lee isn’t a pro designer and had never used XD before, but that didn’t stop him! “I started on Monday and I proposed to her on Friday. That’s the amazing thing about XD, how quickly I could do this.” His first design and prototype was a milestone in many ways.</p>
<h3 id="The-Plan"><a href="#The-Plan" class="headerlink" title="The Plan"></a>The Plan</h3><p>Chapman spent nights working on his prototype, hiding the computer screen from Zane so she wouldn’t see what he was up to. Leveraging the prototyping power of XD, Lee created an immersive treasure hunt for Zane, mimicking the buttons and interactions of Tinder. The prototype led her from their home to the street corner where they first met, then on to the coffee shop where they had their first date. Lee simply wired up his design so each button interaction took her to a different screen, guiding her along the journey Chapman had planned.</p>
<p>“You could say I was able to quickly onboard her through the engagement experience. I quickly learned I could use the tool to direct her where I wanted her to go,” he said.</p>
<p>On Friday morning, after he had finished his design, Lee headed to work and sent Zane the link to his prototype, telling her to follow along with strict instructions not to skip ahead. She went on the journey, following the directions to locations and reading the love letters Chapman had composed on artboards throughout.</p>
<p>“The love letters detailed how our lives are going to be changing, and she told me while she was reading this in the middle of the street she was bawling her eyes out,” said Chapman.</p>
<p>As Zane was completing her treasure hunt throughout the city, Chapman was at home getting ready to ‘pop the question.’</p>
<p><img src="http://img0.tuicool.com/7BZNfe2.jpg!web" alt=""></p>
<h3 id="The-Proposal"><a href="#The-Proposal" class="headerlink" title="The Proposal"></a>The Proposal</h3><p>The final screen in Chapman’s prototype led Zane back to their house.</p>
<p>“She let me know she was having the best time ever and crying her eyes out, and she was completely naive to what was next. It was also her birthday, so she thought it was her birthday present. She didn’t have any clue of the big finish until she came home,” he said.</p>
<p>That’s where Chapman was waiting in a tuxedo with flowers and a big question. He asked her to marry him.</p>
<p>“She said yes, and she loved the entire experience. To be honest, I think I nailed a pretty unique proposal.”</p>
<p>He calls his creation an MVP (minimum viable proposal) on a personal level, and says the end result felt like an immersive story, since it was so easy for Zane to use.</p>
<p>“I was able to give her that personal touch and that WOW moment throughout the whole experience, with every single push of a button.”</p>
<h3 id="Easy-to-Design-Prototype-and-Share"><a href="#Easy-to-Design-Prototype-and-Share" class="headerlink" title="Easy to Design, Prototype, and Share"></a>Easy to Design, Prototype, and Share</h3><p>Because Zane would be using the prototype on her own, Chapman wanted to make sure it worked perfectly on her phone as she travelled to ‘their spots’ in the city.</p>
<p>“XD provides artboard templates to her version of iPhone, so actually having the dimensions there was so helpful. What I also love and found super useful were the UI kits, like the one for Apple iOS, which made it easy to add in the default images for the mobile application design,” he said.</p>
<p>He also found it easy to create a working prototype that would give Zane the open feel of an app, but still guide her on the experience he wanted to create.</p>
<p>“I really loved how you can create a prototype with click functionality. My design was very basic, but that’s because Tinder is very basic, and I wanted to ensure the prototype I made gave the impression of a real application,” he said.</p>
<p>Chapman has lots of reasons to be excited. On top of getting married, he and Zane are expecting a child, and no doubt their son or daughter has a lot of Adobe XD treasure hunts to look forward to.</p>
<p>“On a personal level, this is experience has helped me on my journey to learning how to be a UX designer. I’m not the best at UI or UX, but I was able to open up my world to create that user experience that no one’s going to have.”</p>
<p><em>You can follow Lee Chapman’s work on</em><a href="http://twitter.com/leefranchap" target="_blank" rel="external"><em><strong>his Twitter</strong></em></a><em><strong>, and</strong></em><a href="http://www.adobe.com/products/experience-design.html" target="_blank" rel="external"><em><strong>click here to learn more about Adobe XD</strong></em></a><em><strong>and its powerful prototyping tools.</strong></em></p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/AJzQBjy" target="_blank" rel="external">https://blogs.adobe.com/creativecloud/design-prototype-propose-how-one-man-used-adobe-xd-to-ask-will-you-marry-me</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Adobe XD is known as a powerful design and prototyping tool, but at its core it’s a communication tool that lets users share ideas quickl
    
    </summary>
    
    
  </entry>
  
</feed>
