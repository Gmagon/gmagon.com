<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gmagon Software Official Website - Fast, simple &amp; powerful solutions for everyone.</title>
  <subtitle>Gmagon Software Official Website - Fast, simple &amp; powerful solutions for everyone and more. Visit the site to learn, buy, and get support.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmagon.com/"/>
  <updated>2017-07-06T10:09:59.048Z</updated>
  <id>https://gmagon.com/</id>
  
  <author>
    <name>Gmagon Inc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tonsser, the social app for youth soccer players, partners with Nike and raises new funding</title>
    <link href="https://gmagon.com/blog/2017/07/06/tonsser-the-social-app-for-youth-soccer-players-partners-with-nike-and-raises-new-funding/"/>
    <id>https://gmagon.com/blog/2017/07/06/tonsser-the-social-app-for-youth-soccer-players-partners-with-nike-and-raises-new-funding/</id>
    <published>2017-07-06T00:00:00.000Z</published>
    <updated>2017-07-06T10:09:59.048Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img2.tuicool.com/EneaUnz.jpg!web" alt=""></p>
<p><a href="http://tonsser.com/" target="_blank" rel="external">Tonsser</a>, the Copenhagen-based startup that offers a vertical social network aimed at youth soccer players who want to build their own online profile and potentially get discovered by a bigger club, continues to grow at a clip, both in terms of signups but also the influence it wants to have on the beautiful game. The company has signed on Nike as its first brand channel partner, and now has 380,000 youth players registered, up from 100,000 just over a year ago.</p>
<p>The Danish startup has also raised a new round of funding as it gears up for a 2018 expansion to the U.K., home to the English Premier League and a huge potential youth football market for the startup. It is also quite a fragmented one, in terms of youth leagues, so it will be interesting to see how quickly Tonsser can grow here. The app is currently live in France, Germany, Denmark, Sweden and Norway.</p>
<p>In a call with co-founder and CEO Peter Holm (and after we spent the first ten minutes catching up with the latest Tottenham Hotspur news, as we are inclined to do), he told me that Tonsser is evolving from a social app that was<a href="https://techcrunch.com/2016/06/08/tonsser/" target="_blank" rel="external">mainly about youth players making a profile of themselves and tracking scores and stats</a>in order to get noticed by scouts — a bit like a real life Football Manager video game — to offer even more user-generated content where players can learn skills from each other and in turn become influencers on the platform.</p>
<p><img src="http://img1.tuicool.com/MVFbMzJ.jpg!web" alt="">“Since the internet you no longer need to go to Harvard to learn and be educated by the best. You can go to Youtube, masterclasses or see a Ted talk. We believe it should be the same in football where don’t need to be at the best or most expensive academy to learn and be inspired by the best players and coaches,” he says.</p>
<p>This is seeing top youth players, including from PSG, Lyon, and Dortmund, and “freestylers and local heroes” create video content, such as how to take a free kick, to inspire other young soccer players in Europe.</p>
<p>Related to this, Tonsser has signed on Nike to be the first brand to get access to the platform with their own channel, where they are posting what Holm calls “edutainment,” including drills with from players in Barcelona’s La Masia academy. This also points towards the makings of a revenue model for the free to access social app.</p>
<p>“Next is opening [the platform up] to top clubs to show drills and practice from their academies. [We are] currently in talks with international top clubs from England, Germany, Holland and Denmark,” adds Holm.</p>
<p>He also tells me Tonsser is working on integrations with wearable devices to “empower players to become more data-driven and compare physical data including pace, acceleration, distance covered, form, etc”.</p>
<p>Meanwhile, I understand the startup has raised €2.5 million in new funding. Backing the round are existing investors Wellington Partners, SEED Capital, Arthur Kosten (Booking.com), and unnamed professional soccer players. The long term ambition is “to become the de facto platform for the next generation of football,” says the Tonsser CEO.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/Qr6VZjV" target="_blank" rel="external">https://techcrunch.com/2017/07/06/tonsser-the-social-app-for-youth-soccer-players-partners-with-nike-and-raises-new-funding/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img2.tuicool.com/EneaUnz.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tonsser.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tonsser&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Small Elements, Big Impact: Types and Functions of UI Icons.</title>
    <link href="https://gmagon.com/blog/2017/07/06/small-elements-big-impact-types-and-functions-of-ui-icons/"/>
    <id>https://gmagon.com/blog/2017/07/06/small-elements-big-impact-types-and-functions-of-ui-icons/</id>
    <published>2017-07-06T00:00:00.000Z</published>
    <updated>2017-07-06T10:09:59.045Z</updated>
    
    <content type="html"><![CDATA[<p>Icons in user interfaces are the elements that cannot be overestimated. Small and meaningful, they solve numerous problems. They become little keys to usability and intuitive navigation. And only designers know how much time and effort is needed to make them simple, helpful and expressive.</p>
<p>Guru of user experience design Steve  Jobs said: «Details matter, it’s worth waiting to get it right.» Obviously, icons are on the top of details making interface usable and navigable. So, today let’s discuss what are their types and how they can be used in interfaces.</p>
<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>In general terms, an icon can be defined as an image which has a high symbolic value and is used for the purpose of communication. Icons present signs which are informative and support data exchange between the informer and addressee alongside with words and sentences: while copy is served with letters or characters, icons communicate via the images showing pictorial resemblance with an object of the physical world. In computing and digital design, icons are pictograms or ideograms used in the web or mobile interface to support its usability and provide the successful flow of human-computer interaction.</p>
<p>Diving into the benefits of icons, one of the most important among them is the ability to replace the text. In one of our earlier articles, we gave details about the<a href="http://tubikstudio.com/visual-perception-icons-vs-copy-in-ui/" target="_blank" rel="external">relations of copy and icons</a>and their influence on usability. The process of the research showed that usage of recognizable and clear icons had a great potential in strengthening navigation as most people perceive images faster than words. However, even the slightest misperception can become the reason of poor UX so the solutions on the type of icons should be carefully tested to reach the good balance of icons and copy for a particular target audience.</p>
<p><img src="http://img0.tuicool.com/7vIF7bn.jpg!web" alt=""></p>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>Obviously, icons weren’t invented by interface designers. As an object of communication, they have a long and diverse history rooting in ancient times. They are found in maps, signs, schemes, manuals and many other sources of information. However, with the advent of new technologies and graphical user interfaces, icons experienced the new twist of progress. Historically, Xerox is mentioned in credits for creating the first icons for a graphical UI in the early 1970s: the icons were implemented in a machine called Xerox Alto which was very expensive and didn’t really go to the wide masses. Still, that was a beginning of a long story: in 1981, Xerox Star was released and it’s referred to as the first consumer computer which used icons as a part of its interface. In particular, it applied the icons of folders and trash bins which have been used so far.</p>
<p><img src="http://img0.tuicool.com/rIRVjmb.png!web" alt=""></p>
<p><a href="https://www.interaction-design.org/literature/article/a-brief-history-of-the-origin-of-the-computer-icon" target="_blank" rel="external"><em>Source</em></a></p>
<p>Another milestone easily remembered on this way is presented with the color icons Apple revealed first in 1991 and then later with their further updates for Macintosh. They featured another approach to the style when icons combined functionality and informative capacity with attractive and harmonic appearance.</p>
<p><img src="http://img2.tuicool.com/vANvaqY.png!web" alt=""></p>
<p><a href="https://www.interaction-design.org/literature/article/a-brief-history-of-the-origin-of-the-computer-icon" target="_blank" rel="external"><em>Source</em></a></p>
<p>These days icons are presented in digital design with numerous packs and sets in all the themes and styles possible. Although there are many ready-made packs, the database of icons is growing all the time in search of new solutions appealing to users.</p>
<p>Talking about the classification of icons, we can mark out several aspects of grouping them on types.</p>
<h2 id="Types-based-on-functions"><a href="#Types-based-on-functions" class="headerlink" title="Types based on functions"></a>Types based on functions</h2><h3 id="Clarifying-icons"><a href="#Clarifying-icons" class="headerlink" title="Clarifying icons"></a>Clarifying icons</h3><p>These are the icons aimed at explanation. They are visual markers explaining particular features or marking out categories of content. In some cases, they are not the layout elements of direct interaction; also, you can often find them in combination with copy supporting their meaning. This trick activates multiple elements of perception in one interaction providing better recognizability for call-to-action elements. People, who instantly understand the symbol transferred with the icon, won’t pay big attention to the copy. The same will happen to those who have problems with fast copy recognition. However, using the copy together with the icon decreases the risk of misunderstanding or wrong interactions for people who can possibly misinterpret the meaning of the image.</p>
<p><img src="http://img1.tuicool.com/3AZbqaf.png!web" alt=""></p>
<p><a href="https://dribbble.com/shots/3440889-Homey-App" target="_blank" rel="external"><em>Homey App</em></a></p>
<p><img src="http://img0.tuicool.com/rUjuUjj.png!web" alt=""></p>
<p>Category icons forSaily app</p>
<h3 id="Interactive-icons"><a href="#Interactive-icons" class="headerlink" title="Interactive icons"></a>Interactive icons</h3><p>The icons of this type are directly involved into interaction process and are the core supporters of navigation. They are clickable or tappable and respond to the users request doing the action symbolized by them. Their main goal is to inform users about the functions or featuresbehindthe buttons, controls and any other elements of interaction.</p>
<p><img src="http://img1.tuicool.com/AJ3a6nA.gif" alt=""></p>
<p><a href="https://dribbble.com/shots/2071319-GIF-of-the-Tapbar-Interactions" target="_blank" rel="external"><em>Tab Bar interactions</em></a></p>
<p><img src="http://img2.tuicool.com/z6NnMfE.gif" alt=""></p>
<p><a href="https://dribbble.com/shots/2267219-UI-Navigation-Concept" target="_blank" rel="external"><em>Menu interaction concept</em></a></p>
<h3 id="Decorative-and-entertaining-icons"><a href="#Decorative-and-entertaining-icons" class="headerlink" title="Decorative and entertaining icons"></a>Decorative and entertaining icons</h3><p>The icons of this type give more about aesthetic appeal than functionality. However, this aspect is also significant and needs to be considered as the style and appearance corresponding to the target audience preferences and expectations set the solid ground for high desirability. Applied wisely, it is one of the features that can not only attract but also retain users and add much to the positive user experience. Decorative icons are often used to present seasonal features and special offers.</p>
<p><img src="http://img0.tuicool.com/VnMrA3a.jpg!web" alt=""></p>
<p><a href="https://dribbble.com/shots/2007927-Easter-and-spring-themed-icons" target="_blank" rel="external"><em>Easter and spring themed icons</em></a></p>
<h3 id="App-icons"><a href="#App-icons" class="headerlink" title="App icons"></a>App icons</h3><p>App icons are the interactive brand signs that present the application on different platforms supporting the original identity of the digital product. In most cases, it features the logo of the app designed according to the requirements set for this kind of icons. However, it also can apply something else, for example, a mascot or an abstract combination of corporate colors. The effective solution is usually based on thorough market and competition research with the aim of creating an original icon which won’t get lost on the screen full of other app icons.</p>
<p><img src="http://img2.tuicool.com/eM732av.png!web" alt=""></p>
<p><a href="https://dribbble.com/shots/2852836-Elephun-Icon" target="_blank" rel="external"><em>Elephun App Icon</em></a></p>
<h3 id="Favicon"><a href="#Favicon" class="headerlink" title="Favicon"></a>Favicon</h3><p>Favicon, also known as URL icon or bookmark icon, is a special type of symbol which represents the product or brand in the URL-line of the browser as well as in the bookmark tab. It allows users to get a quick visual connection with it while they are browsing. This interface element proved itself effective for productive website promotion and good recognizability of its visual identity.</p>
<h2 id="Types-based-on-visual-performance"><a href="#Types-based-on-visual-performance" class="headerlink" title="Types based on visual performance"></a>Types based on visual performance</h2><h3 id="Glyph-icons"><a href="#Glyph-icons" class="headerlink" title="Glyph icons"></a>Glyph icons</h3><p>The term “glyph”[glif] has come to design from the field of typography. The word takes its roots from the Greek word which means “carving”. Originally, the term presents an elements symbols or pictogram which is included in the set of symbols agreed upon many users (readers, writers etc.): it presents a readable character enabling people to write it.</p>
<p>In the sphere of typography, it is a certain graphic representation of an element of written language within a particular system of writing or particular typeface: it can be a grapheme, or part of a grapheme, or sometimes several graphemes in combination (a composed glyph). Here’s the set of ancient Celtic glyphs, for example.</p>
<p><img src="http://img2.tuicool.com/63IF3mM.jpg!web" alt=""></p>
<p><a href="http://td-brushes.deviantart.com/art/Pictish-Rune-Meanings-40202186" target="_blank" rel="external"><em>Source</em></a></p>
<p>In modern digital design, the word “glyph” reinvented its meaning but not into a sort of revolution. It is used to define a graphic symbol that provides the appearance or form for a character: it can be an alphabetic or numeric font as well as a symbol picturing an encoded character. Talking about icons, glyph icons are first of all described as a typographic symbol that represents something else, not letter or number. Among popular examples, you will also find the «@» symbol representing the preposition «at». For example, here is the set of icons for material design from Google.</p>
<p><img src="http://img0.tuicool.com/jURniiq.jpg!web" alt=""></p>
<p><a href="https://material.io/icons/" target="_blank" rel="external"><em>Material icons</em></a></p>
<p>Glyph icons use simplified and universal shapes and images to be recognizable and flexible in terms of responsive design. They play the big role in the issues of navigation for a digital product.</p>
<p><img src="http://img2.tuicool.com/QJ7RZ3E.png!web" alt=""></p>
<p><a href="https://dribbble.com/shots/2396211-Weather-Icons-Set" target="_blank" rel="external"><em>Weather icons</em></a></p>
<h3 id="Flat-and-semi-flat-icons"><a href="#Flat-and-semi-flat-icons" class="headerlink" title="Flat and semi-flat icons"></a>Flat and semi-flat icons</h3><p>Flat icons are usually a bit more complex than glyph: they can apply color combinations, filling of the elements and present a bit more complicated images. Nevertheless, they are also focused on simple and recognizable visual metaphors quickly transferring the required meaning. The most prominent feature which actually has inspired the name of this direction is applying flat 2-dimensional visual details as the opposite to highly realistic and detailed skeuomorphic images. Flat style allows designers to be more flexible in applying the expressive power of colors and shapes not losing in legibility of the presented items.</p>
<p><img src="http://img0.tuicool.com/eABB7vY.png!web" alt=""></p>
<p><a href="https://dribbble.com/shots/2082509-Blog-App" target="_blank" rel="external"><em>Blog App</em></a></p>
<h3 id="Skeuomorphic-icons"><a href="#Skeuomorphic-icons" class="headerlink" title="Skeuomorphic icons"></a>Skeuomorphic icons</h3><p>Skeuomorphism is the design direction somehow opposite to flat. It is based on the idea of reflecting images in 3D look very close to the original natural look of the physical objects. It was popular for GUI of different types and functionality several years ago. But then it was gradually replaced with flat design in UI which is simpler and therefore more flexible and practical for the needs of digital interfaces. Nevertheless, the skeuomorphic icons are still widely used in game design and app icons in game sector.</p>
<h3 id="SVG-icons"><a href="#SVG-icons" class="headerlink" title="SVG icons"></a>SVG icons</h3><p>SVG icons, decoded as Scalable Vector Graphics, are responsive icons built on XML-based 2D vector images. They are designed and integrated according to an open standard developed by the World Wide Web Consortium (W3C) since 1999, and supported by all major browsers. SVG icons are growing their popularity as today websites are used on the diversity of platforms and devices and need to be responsive to provide positive UX.</p>
<h2 id="Types-based-on-applied-image-metaphor"><a href="#Types-based-on-applied-image-metaphor" class="headerlink" title="Types based on applied image metaphor"></a>Types based on applied image metaphor</h2><p>This direction of icons typology is based on the research provided by the famous expert in usability Jackob Nielsen and revealed in hisarticlefor Nielsen Norman Group. In this perspective, icons can be divided into three core types according to the type of the metaphor they reflect.</p>
<p>Resemblance iconsare the symbols directly depicting a physical object the icon represents. These are, for example, the magnifier for search, the shopping cart, the envelope for mail etc.</p>
<p>Reference iconsare the symbols depicting an object on the basis of analogy. For instance, a picture of a clamp representing a file-compression utility (because it squeezes) goes to this group.</p>
<p>Arbitrary iconsare the symbols which currently do not set direct connections with the objects and their recognizability is based on convention and power of habit. This is when we should remember about floppy disc representing «Save» function: although initially it was a reference icon, for many users now it doesn’t work like that — they just know the meaning solidly connected to this image for many years.</p>
<p><img src="http://img2.tuicool.com/FJBRfqZ.jpg!web" alt=""></p>
<p><a href="https://dribbble.com/shots/2117638-Multimedia-icon-set" target="_blank" rel="external"><em>Multimedia Icon Set</em></a></p>
<h2 id="Key-features-of-effective-icons"><a href="#Key-features-of-effective-icons" class="headerlink" title="Key features of effective icons"></a>Key features of effective icons</h2><p>In one of our previous articles devoted to the role of icons in user interfaces, we have already described all the essential features making the icons efficient, so today let’s just quickly recall them.</p>
<ul>
<li><strong>clear</strong><br>— the meaning of the icon is understandable and accessible to the target audience</li>
<li><strong>meaningful</strong><br>— the icon transfers the informative value</li>
<li><strong>recognizable</strong><br>— the visual symbol applied in the icon is presented in the form which can be recognized and decoded correctly by users</li>
<li><strong>simple</strong><br>— the icon isn’t overloaded with non-essential graphic elements which allows it to be quickly perceived and understood without too much effort</li>
<li><strong>original and noticeable</strong><br>— the icon stands out among other similar elements of the interface which is especially actual for the app icons</li>
<li><strong>scalable and flexible</strong><br>— the icon saves its unity, integrity, and legibility in different sizes and resolutions</li>
<li><strong>attractive</strong><br>— the icon satisfies aesthetic expectations and sets harmonic visual appeal</li>
<li><strong>non-offensive</strong><br>— the icon doesn’t have hidden meanings or misperceptions which could feel offensive or rude for any part of the target audience</li>
<li><strong>consistent</strong><br>— the icon corresponds to the general stylistic concept of the layout it is applied for.</li>
</ul>
<p><img src="http://img1.tuicool.com/rQBfqyv.jpg!web" alt=""></p>
<h2 id="Recommended-reading"><a href="#Recommended-reading" class="headerlink" title="Recommended reading"></a>Recommended reading</h2><p>Here is a bunch of articles for further exploration of the topic:</p>
<p><a href="https://www.nngroup.com/articles/classifying-icons/" target="_blank" rel="external">Icon Classification: Resemblance, Reference, and Arbitrary Icons</a></p>
<p><a href="https://www.interaction-design.org/literature/article/a-brief-history-of-the-origin-of-the-computer-icon" target="_blank" rel="external">A Brief History of the Origin of the Computer Icon</a></p>
<p><a href="http://tubikstudio.com/iconic-simplicity-the-vital-role-of-icons/" target="_blank" rel="external">Iconic Simplicity. The Vital Role of Icons.</a></p>
<p><a href="http://tubikstudio.com/visual-perception-icons-vs-copy-in-ui/" target="_blank" rel="external">Visual Perception: Icons VS Copy in UI.</a></p>
<p><a href="https://icons8.com/articles/how-to-combine-icons-from-different-sets-in-your-ui/" target="_blank" rel="external">How to Combine Icons from Different Sets in Your UI</a></p>
<p>Welcome to see the designs by Tubik Studio on <a href="https://dribbble.com/Tubik" target="_blank" rel="external">Dribbble</a>and <a href="https://www.behance.net/Tubik" target="_blank" rel="external">Behance</a></p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/IfqYJz7" target="_blank" rel="external">http://tubikstudio.com/small-elements-big-impact-types-and-functions-of-ui-icons/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Icons in user interfaces are the elements that cannot be overestimated. Small and meaningful, they solve numerous problems. They become l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Image Correction for Color Blindness</title>
    <link href="https://gmagon.com/blog/2017/07/06/image-correction-for-color-blindness/"/>
    <id>https://gmagon.com/blog/2017/07/06/image-correction-for-color-blindness/</id>
    <published>2017-07-06T00:00:00.000Z</published>
    <updated>2017-07-06T10:09:59.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Color-blind-image-correction"><a href="#Color-blind-image-correction" class="headerlink" title="Color blind image correction"></a>Color blind image correction</h2><p>Color blind image correction</p>
<p><a href="http://www.vischeck.com/daltonize/runDaltonize.php" target="_blank" rel="external">(Run Daltonize online here)</a></p>
<p>One of the most common questions that we are asked is:</p>
<p><strong>  
</strong></p>
<p>Is there a way to cure color blindness?</p>
<p>From a medical point of view, the answer is ‘not really’. There are some devices (colored contact lenses or filter spectacles) that are claimed to improve the vision of color blind people but in general, people report very mixed results with them. There is currently no effective way to recover full trichromatic vision if you are red/green colorblind.</p>
<p>So in one sense, color blindness is ‘incurable’. But a deeper question is “what is color good for?”. Apart from its aethetic appeal, seeing many different colors allows us to distinguish things in the world. Take the example below.</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>How many types of fruit is this man selling?</strong> People with three different cone types (“trichromats”) can see 5 distinct piles of fruit on the ground. From back to front, they look ‘red’, ‘green’, ‘red’, ‘yellow’ and ‘light orange’. There are also some baskets on the shelf containing three piles of fruit.</th>
<th style="text-align:left"><img src="http://img0.tuicool.com/ZJZFNnV.jpg!web" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">But people with red/green color blindness usually have trouble seeing all the different fruits.They see something that can be simulated like this: Note that there now seem to be only three or four different types of fruit on the ground. It is also hard to tell how many distinct piles of fruit there are on the shelves.</td>
<td style="text-align:left"><img src="http://img0.tuicool.com/iUNRfi7.jpg!web" alt=""></td>
</tr>
</tbody>
</table>
<p>In some pictures, a lot of important information is conveyed by variations in reds and greens. This is a real problem for color blind people who will miss this information. The important point to understand is that<strong>the ‘true’ color of something may be irrelevant but the fact that it is different from its surroundings is very important.</strong></p>
<p>Here is another example:</p>
<table>
<thead>
<tr>
<th style="text-align:left"><img src="http://img2.tuicool.com/Y3MBVvr.jpg!web" alt=""></th>
<th style="text-align:left"><img src="http://img2.tuicool.com/j6rUryi.jpg!web" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>1) Cells labelled with three types of fluorescent markers to show up three different structures.</strong></td>
<td style="text-align:left"><strong>2) Red/green color blind simulation of fluorescent cell picture.</strong></td>
</tr>
</tbody>
</table>
<p>Here, a color blind scientist would be unable to tell the red and green labels apart. They would miss important information about the structure of the cells.</p>
<p>How to fix it?</p>
<p>We can use image processing techniques to improve this situation. There are two ways that we can make information in pictures available to color blind people.</p>
<p><strong>1)</strong>The simplest way is simply to increase the red/green contrast in the image. Many color blind people have some residual red/green discrimination. Increasing the red/green contrast makes them more likely to see these types of color variations.</p>
<p><strong>2)</strong>We can analyze the information conveyed by variations in the red/green direction and convert these into changes in brightness and/or blue/yellow coloration.  This allows us to map information from a color dimension that is invisible to dichromats into those that they can see.</p>
<p>We call the combination of these two processes ‘Daltonization’ after John Dalton, the British scientist who was one of the first people to investigate color blindness.</p>
<p>The result of applying these algorithms is shown below.:</p>
<table>
<thead>
<tr>
<th style="text-align:left"><img src="http://img2.tuicool.com/INjiey2.jpg!web" alt=""></th>
<th style="text-align:left"><img src="http://img1.tuicool.com/QZ7vUji.jpg!web" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">3) Daltonized version of three-color-labelled fluorescent cells.</td>
<td style="text-align:left"><strong>4) Dichromat (red/green color blind) simulation of the  Daltonized image.</strong></td>
</tr>
</tbody>
</table>
<p>Here, the algorithm has mapped changes in the reds and greens into slight changes in brightness and bluishness. The result is that when viewed by someone with color blindness, the different labelled structures in the cell are clearly visible.</p>
<p>Here are some more examples. In each case, the images are numbered 1 to 4 where<strong>1</strong>) is the original full-color image,<strong>2</strong>) is a simulation of the color-blind view of the full color image,<strong>3</strong>) is the Daltonized version of the full color image and<strong>4</strong>) is the color blind simulation of the Daltonized image showing improved red/green discrimination. To see how well the Daltonization algorithm works for someone with color blindness, compare images<strong>2</strong>) and<strong>4</strong>).</p>
<p>Example: Gauguin painting</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>1</strong>)<img src="http://img1.tuicool.com/AR3U73r.jpg!web" alt=""></th>
<th style="text-align:left"><strong>2</strong>)<img src="http://img0.tuicool.com/rA7jqiJ.jpg!web" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>3</strong>)<img src="http://img1.tuicool.com/INjieiZ.jpg!web" alt=""></td>
<td style="text-align:left"><strong>4</strong>)<img src="http://img0.tuicool.com/QfE7fui.jpg!web" alt=""></td>
</tr>
</tbody>
</table>
<p>In this case, the Daltonization transformation must be judged on a more aesthetic level. While there is more ‘information’ present in image<strong>4)</strong>compared to image<strong>2)</strong>the disruption in the color balance may be unsettling (or fascinating) to some dichromats.</p>
<p>Here is an Ishihara plate - a common aid for diagnosing color blindness. The number ‘45’ in the center of the disk is invisible to  someone with red/green color blindness.</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>1</strong>)<img src="http://img0.tuicool.com/quMZJbn.jpg!web" alt=""></th>
<th style="text-align:left"><strong>2</strong>)<img src="http://img2.tuicool.com/vi6v6rA.jpg!web" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>3</strong>)<img src="http://img0.tuicool.com/A3ANFjE.jpg!web" alt=""></td>
<td style="text-align:left"><strong>4</strong>)<img src="http://img0.tuicool.com/A3ANFjE.jpg!web" alt=""></td>
</tr>
</tbody>
</table>
<p>There are several things to note about this example. First of all, although the enhancement of the red/green information in the Daltonized version is striking, this is not a good<strong>general</strong>test of an algorithm to modify images for color blind observers. The reason is that the Ishihara plates are (deliberately) artificial images, and do not represent the range of colors that people see in everyday life. It would be rather easy to design an algorithm to ‘improve’ Ishihara plates (for example one that replaced all reds with blues) that would nevertheless destroy other types of information in the image. One nice feature of the Daltonization algorithm is that it analyses the information content of the image beforehand and attempts to preserve existing color variations.</p>
<p>Note also that the Daltonizing algorithm does not enable people to “pass” the Ishihara test in any way. It is a digital image processing technique that can make print or video display more salient to color blind people without distorting the color balance to an unnacceptable degree.</p>
<p>And finally, here’s the fruit market we showed you at the start:</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>1</strong>)<img src="http://img0.tuicool.com/ZJZFNnV.jpg!web" alt=""></th>
<th style="text-align:left"><strong>2</strong>)<img src="http://img1.tuicool.com/EJR73qz.jpg!web" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>3</strong>)<img src="http://img0.tuicool.com/qqA3y26.jpg!web" alt=""></td>
<td style="text-align:left"><strong>4</strong>)<img src="http://img2.tuicool.com/NZRNj23.jpg!web" alt=""></td>
</tr>
</tbody>
</table>
<p>The different piles of fruit on the floor are now clearly visible in image<strong>4</strong>).</p>
<p><strong>What is it good for?</strong>We envisage a number of applications for this algorithm. Here are some examples:</p>
<p><strong>As part of a digital microscope</strong>(see the ‘cells’ example above): Color blind users could flick a switch to improve the visibility of red/green fluorescent labels or intrinsic color contrast…</p>
<p><strong>In digital video recorders and display systems</strong>: Viewers could turn on the Daltonize algorithm much as they might vary the brightness or volume using a remote control. Operating on a real-time video stream, the algorithm could improve the appearence of TV for color blind viewers (for example, making sports teams playing in red strip on a green field far more visible) without significantly disturbing the color balance for other members of the audience….</p>
<p><strong>Computer display devices</strong>: Computer users could turn on the Daltonize algorithm from as part of their computer video card controls. All output appearing on the monitor (including web-pages, videos and still images) would automatically be processed and rendered more salient to dichromats.</p>
<p><strong>Print media</strong>: Images can be Daltonized before printing. Print applications where legibility is essential (for example, public safety documents, maps, technical instructions) can all be made more legible for color-blind users….</p>
<p><strong>  
</strong></p>
<p>You can play with the algorithm onlineon this web page. Please be aware that this page is taking a lot of hits at the moment and may seem a little slow to respond. If you have any particularly interesting images that you would like us to process, send them to us by email atinfo@vischeck.com and we will run them ‘by hand’. Please keep them to a reasonable size :)</p>
<p>We would also like to hear your feedback about this algorithm - especially if you are color blind. Let us know what you think!</p>
<p>If you would like to license the Daltonizing algorithm for use in your own applications, please contact us at<a href="mailto://daltonize_license@vischeck.com" target="_blank" rel="external">daltonize_licence@vischeck.com</a>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/6B3qMvb" target="_blank" rel="external">http://www.vischeck.com/daltonize/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Color-blind-image-correction&quot;&gt;&lt;a href=&quot;#Color-blind-image-correction&quot; class=&quot;headerlink&quot; title=&quot;Color blind image correction&quot;&gt;&lt;/a&gt;Co
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Micro frontends – a microservice approach to front-end web development</title>
    <link href="https://gmagon.com/blog/2017/07/06/micro-frontends-a-microservice-approach-to-front-end-web-development/"/>
    <id>https://gmagon.com/blog/2017/07/06/micro-frontends-a-microservice-approach-to-front-end-web-development/</id>
    <published>2017-07-06T00:00:00.000Z</published>
    <updated>2017-07-06T10:09:59.031Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img0.tuicool.com/7BFRBrz.png!web" alt=""></p>
<p>For web apps, the front end is becoming bigger and bigger, and the back end is getting less important. Our web app at<a href="https://www.weld.io/?utm_source=medium.com&amp;utm_content=micro-frontends" target="_blank" rel="external"><strong>Weld</strong>(web/app creation tool)</a>is 90% front-end code, with a very thin back end. I can imagine that a majority of new web apps being built today are dealing with a similar situation.</p>
<p>Web apps also change over time, as do development techniques and frameworks. This requires support for allowing different front-end frameworks to co-exist, e.g. older modules built in JQuery or AngularJS 1.x, combined with newer modules built in React or Vue.</p>
<h3 id="The-monolithic-approach-doesn’t-work-for-larger-web-apps"><a href="#The-monolithic-approach-doesn’t-work-for-larger-web-apps" class="headerlink" title="The monolithic approach doesn’t work for larger web apps"></a>The monolithic approach doesn’t work for larger web apps</h3><p>Having a monolithic approach to a large front-end app becomes unwieldly. There needs to be a way of breaking it up into smaller modules that can act independently.</p>
<p>Example:</p>
<ul>
<li><code>myapp.com/</code><ul>
<li>landing page built with static HTML.</li>
</ul>
</li>
<li><code>myapp.com/settings</code><ul>
<li>old settings module built in AngularJS 1.x.</li>
</ul>
</li>
<li><code>myapp.com/dashboard</code><ul>
<li>new dashboard module built in React.</li>
</ul>
</li>
</ul>
<p>I would imagine the following is needed:</p>
<ol>
<li>A<br><strong>shared codebase</strong><br>in pure JavaScript e.g. managing routing and user sessions. Also some shared CSS. Both should be as thin as possible.</li>
<li>A<br><strong>collection of separate modules</strong><br>, “mini-apps”, built in various frameworks. Stored in different code repositories.</li>
<li>A deployment system that<br><strong>bundles all the modules together</strong><br>from different repositories and deploys to a server, whenever a module is updated.</li>
</ol>
<h3 id="The-solution-“micro-frontends”"><a href="#The-solution-“micro-frontends”" class="headerlink" title="The solution: “micro frontends”"></a>The solution: “micro frontends”</h3><p>But as it turns out, a lot of other people is thinking about the same ideas. The common term is<em>“micro frontends”</em>.</p>
<p>Companies like<a href="https://news.ycombinator.com/item?id=13009285" target="_blank" rel="external">Spotify</a>,<a href="https://news.ycombinator.com/item?id=13012916" target="_blank" rel="external">Klarna</a>,<a href="https://www.mosaic9.org/" target="_blank" rel="external">Zalando</a>,<a href="https://www.upwork.com/blog/2017/05/modernizing-upwork-micro-frontends/" target="_blank" rel="external">Upwork</a>, and<a href="http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html" target="_blank" rel="external">Allegro</a>are using the micro frontends approach to build their web apps.</p>
<h3 id="Implementing-micro-frontends"><a href="#Implementing-micro-frontends" class="headerlink" title="Implementing micro frontends"></a>Implementing micro frontends</h3><p>Here’s a few different approaches to implementing micro frontends:</p>
<ol>
<li>Isolating micro-apps into<br><a href="https://news.ycombinator.com/item?id=13009285" target="_blank" rel="external"><strong>IFrames</strong>using libraries and Window.postMessage APIs</a><br>to coordinate. IFrames share APIs exposed by their parent window.</li>
<li><a href="https://news.ycombinator.com/item?id=13011795" target="_blank" rel="external">Multiple single-page apps that live at different URLs</a><br>. The apps use NPM/Bower components for shared functionality.</li>
<li>Using<br><a href="http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html" target="_blank" rel="external"><strong>Varnish Cache</strong>to integrate different modules</a><br>.</li>
<li><a href="https://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/" target="_blank" rel="external"><strong>Web Components</strong>as the integration layer</a><br>.</li>
<li><a href="https://news.ycombinator.com/item?id=13012916" target="_blank" rel="external">“Blackbox”<strong>React</strong>components</a><br>.</li>
</ol>
<h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><ul>
<li><a href="https://news.ycombinator.com/item?id=13009285" target="_blank" rel="external">Ask Hacker News: “What do you use to build micro-front ends?”</a></li>
<li><a href="https://www.mosaic9.org/" target="_blank" rel="external">Project Mosaic</a><br>by Zalando, a set of libraries to support a microservice style architecture for large scale websites. See also<br><a href="https://www.microservices.com/talks/mosaic-microservices-zalando-tech/" target="_blank" rel="external">this presentation from Zalando Tech</a><br>.</li>
<li><a href="https://github.com/neuland/micro-frontends" target="_blank" rel="external">Micro Frontends (GitHub)</a><br>— will contain techniques, strategies and recipes for building a modern web app with multiple independent teams.</li>
</ul>
<p>Source: <a href="http://www.tuicool.com/articles/hit/aeM3Ybf" target="_blank" rel="external">https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/7BFRBrz.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;For web apps, the front end is becoming bigger and bigger, and the back
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Creating a Simple Game With Core ML in Swift 4</title>
    <link href="https://gmagon.com/blog/2017/07/06/creating-a-simple-game-with-core-ml-in-swift-4/"/>
    <id>https://gmagon.com/blog/2017/07/06/creating-a-simple-game-with-core-ml-in-swift-4/</id>
    <published>2017-07-06T00:00:00.000Z</published>
    <updated>2017-07-06T10:09:59.025Z</updated>
    
    <content type="html"><![CDATA[<p>WWDC 2017 brought many amazing and powerful APIs to iOS. Among the most popular is<a href="https://developer.apple.com/documentation/coreml" target="_blank" rel="external">Core ML</a>(of course, ARKit is hot too!). Core ML allows developers to use machine learning models in their apps without the knowledge of neural networks or machine learning algorithms. Today, I will show you how simple it is to create a game using Core ML. We will be creating a simple scavenger hunt game which will have the player running around the room looking for objects. We have already covered<a href="http://www.appcoda.com/coreml-introduction" target="_blank" rel="external">the basics of Core ML in our tutorial</a>which I suggest you read over before continuing.</p>
<p>Note:You will need Xcode 9 beta to for this tutorial. You will also need a device that is running iOS 11 beta in order to test out the app. This app will NOT run in the simulator. The also might run slow on older devices such as the iPhone 5s. While Xcode 9 beta supports both Swift 3.2 and 4.0, all the code in this tutorial is written in Swift 4.</p>
<h2 id="App-Overview"><a href="#App-Overview" class="headerlink" title="App Overview"></a>App Overview</h2><p>The game that we are making today is simple to create and play. After the user taps the Start button, the name of a random object will appear at the top of the screen. It is the player’s job to find that object. Once the player does, they will point the phone at it. Using the machine learning algorithm, the iPhone will recognize the object and then ask for another one. Every object found adds a point to the score. The player also has the option to skip an object if they cannot find it.</p>
<p>This app recognizes objects slightly differently than the one demonstrated in the Introduction to Core ML tutorial. This is mainly because we will have a live camera view and predicting objects in real time rather than choosing a single photo.</p>
<p><img src="http://img0.tuicool.com/NJnu2mQ.png!web" alt=""></p>
<h2 id="Creating-the-Project"><a href="#Creating-the-Project" class="headerlink" title="Creating the Project"></a>Creating the Project</h2><p>First things first! Let’s open Xcode 9 beta and create a new project. Choose the_Single View App_template for this app. Though we are building a game, the Single View Application template is good enough. I will be naming the project_CoreMLScavenge_but you can name it whatever you wish. Make sure to set the language to<em>Swift</em>.</p>
<p><img src="http://img1.tuicool.com/fyyeieJ.png!web" alt=""></p>
<p>Once the project is created, uncheck the boxes next to<code>Landscape Left</code>and<code>Landscape Right</code>. We will stick to portrait mode for this game.</p>
<p><img src="http://img0.tuicool.com/AvQbmuF.png!web" alt=""></p>
<h2 id="Creating-the-User-Interface"><a href="#Creating-the-User-Interface" class="headerlink" title="Creating the User Interface"></a>Creating the User Interface</h2><p>Now it’s time to have fun! Go to the<code>Main.storyboard</code>file in the project navigator. Start by adding a<code>View</code>to the top and bottom of the View Controller. Stretch the widths to the size of the View Controller and make the height around 85 pixels for each. The entire background is going to be the live camera feed, so we are adding these views so we can see the labels and buttons on top of it. Make the background of the view a light-gray color. This way we know not to accidentally put any elements on top of it.</p>
<p><img src="http://img1.tuicool.com/Yvi2EzV.png!web" alt=""></p>
<p>In the top view, add a<code>UILabel</code>to the center and another one to the left. The center label will show the object for the player to find, so stretch it out a bit so it can fit longer words. The label on the left will show the score. You can condense it a bit since it will only need to show two digits.</p>
<p><img src="http://img1.tuicool.com/eE32MjY.png!web" alt=""></p>
<p>In the bottom view, add two<code>UILabel</code>s and two<code>UIButtons</code>. One label will show the score, and the other will show the player’s highest score. Make one of the buttons say “start”, which will of course start the game. Make the other button say “skip”. The players can tap this if they cannot find the object and want another one.</p>
<p><img src="http://img1.tuicool.com/uaqQnmN.png!web" alt=""></p>
<p>I will not cover how to add layout constraints to these elements in this tutorial. However, I highly suggest that you do. Check out ourAuto Layout Tutorial if you would like to learn how to use it. If you are not going to use Auto Layout, be sure to make your view controller’s size to the type of the device you are going to run the app on.</p>
<h2 id="Setting-Up-the-View"><a href="#Setting-Up-the-View" class="headerlink" title="Setting Up the View"></a>Setting Up the View</h2><p>Now that the UI is done, we can start coding. Select the<code>ViewController.swift</code>file in the project navigator. Let’s start by importing the necessary frameworks above the class.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import</div><div class="line"> MobileCoreServices</div><div class="line"></div><div class="line">import</div><div class="line"> Vision</div><div class="line"></div><div class="line">import</div><div class="line"> CoreML</div><div class="line"></div><div class="line">import</div><div class="line"> AVKit</div></pre></td></tr></table></figure>
<p>Next add the outlets so we can connect our code to the UI. We need to add 8 outlets in total.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">scoreLabel</div><div class="line">: UILabel!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">highscoreLabel</div><div class="line">: UILabel!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">timeLabel</div><div class="line">: UILabel!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">objectLabel</div><div class="line">: UILabel!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">startButton</div><div class="line">: UIButton!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">skipButton</div><div class="line">: UIButton!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">topView</div><div class="line">: UIView!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">bottomView</div><div class="line">: UIView!</div></pre></td></tr></table></figure>
<p>Your code should now look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">import</div><div class="line">UIKit</div><div class="line">import</div><div class="line">MobileCoreServices</div><div class="line">import</div><div class="line">Vision</div><div class="line">import</div><div class="line">CoreML</div><div class="line">import</div><div class="line">AVKit</div><div class="line">class</div><div class="line">ViewController</div><div class="line">: </div><div class="line">UIViewController</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">scoreLabel</div><div class="line">: UILabel!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">highscoreLabel</div><div class="line">: UILabel!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">timeLabel</div><div class="line">: UILabel!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">objectLabel</div><div class="line">: UILabel!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">startButton</div><div class="line">: UIButton!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">skipButton</div><div class="line">: UIButton!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">topView</div><div class="line">: UIView!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line"> var </div><div class="line">bottomView</div><div class="line">: UIView!</div><div class="line"> </div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        </div><div class="line">super</div><div class="line">.viewDidLoad</div><div class="line">()</div><div class="line">        </div><div class="line">// Do any additional setup after loading the view, typically from a nib.</div><div class="line"></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    </div><div class="line">override</div><div class="line">func</div><div class="line">didReceiveMemoryWarning</div><div class="line">() &#123;</div><div class="line">        </div><div class="line">super</div><div class="line">.didReceiveMemoryWarning</div><div class="line">()</div><div class="line">        </div><div class="line">// Dispose of any resources that can be recreated.</div><div class="line"></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now we need to create some global variables. Let’s add the following variables right under where we added the outlets.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var</div><div class="line"> cameraLayer: CALayer!</div><div class="line">    </div><div class="line">var</div><div class="line"> gameTimer: Timer!</div><div class="line">    </div><div class="line">var</div><div class="line"> timeRemaining = </div><div class="line">60</div><div class="line">var</div><div class="line"> currentScore = </div><div class="line">0</div><div class="line">var</div><div class="line"> highScore = </div><div class="line">0</div></pre></td></tr></table></figure>
<p>Let me explain each variable one by one:</p>
<p>Line #1:This is the camera layer which we will add to the view later on. It will take up the entire background of the screen.</p>
<p>Line #2:We will initialize the game timer later. We are making it global so we can invalidate it (stop it) from any function.</p>
<p>Line #3:This variable will hold the time remaining in the game and it is initialized to 60 so the game lasts one minute. Feel free to change it to another number if you want the game to be shorter or longer.</p>
<p>Line #4:This will hold the player’s score and increase by one each time they find an object.</p>
<p>Line #5:This will hold the player’s high score. It will be set from UserDefaults each time the app loads.</p>
<p>Putting a lot of code in the<code>viewDidLoad</code>can make our code look messy and unorganized. To fix this, we’re going to add a<code>viewSetup</code>function right after the<code>viewDidLoad</code>to take care of some of the basic UI settings that need to be done at runtime.</p>
<p>Add this into the<code>viewDidLoad</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">viewSetup</div><div class="line">()</div></pre></td></tr></table></figure>
<p>Then add this right after the<code>viewDidLoad</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">func</div><div class="line">viewSetup</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">    </div><div class="line">let</div><div class="line"> backgroundColor = </div><div class="line">UIColor</div><div class="line">.</div><div class="line">init</div><div class="line">(red: </div><div class="line">255</div><div class="line">/</div><div class="line">255</div><div class="line">, green: </div><div class="line">255</div><div class="line">/</div><div class="line">255</div><div class="line">, blue: </div><div class="line">255</div><div class="line">/</div><div class="line">255</div><div class="line">, alpha: </div><div class="line">0.8</div><div class="line">)</div><div class="line">    topView.backgroundColor = backgroundColor</div><div class="line">    bottomView.backgroundColor = backgroundColor</div><div class="line">    scoreLabel.text = </div><div class="line">&quot;0&quot;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What this is doing is adding some transparency to the top and bottom views so we can see the live camera feed behind them. We are also setting the score label text to 0.</p>
<p>Your code should now look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line">import</div><div class="line"> UIKit</div><div class="line"></div><div class="line">import</div><div class="line"> MobileCoreServices</div><div class="line"></div><div class="line">import</div><div class="line"> Vision</div><div class="line"></div><div class="line">import</div><div class="line"> CoreML</div><div class="line"></div><div class="line">import</div><div class="line"> AVKit</div><div class="line"> </div><div class="line"></div><div class="line">class</div><div class="line">ViewController</div><div class="line">: </div><div class="line">UIViewController</div><div class="line">&#123;</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line">var</div><div class="line"> scoreLabel: </div><div class="line">UILabel</div><div class="line">!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line">var</div><div class="line"> highscoreLabel: </div><div class="line">UILabel</div><div class="line">!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line">var</div><div class="line"> timeLabel: </div><div class="line">UILabel</div><div class="line">!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line">var</div><div class="line"> objectLabel: </div><div class="line">UILabel</div><div class="line">!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line">var</div><div class="line"> startButton: </div><div class="line">UIButton</div><div class="line">!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line">var</div><div class="line"> skipButton: </div><div class="line">UIButton</div><div class="line">!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line">var</div><div class="line"> topView: </div><div class="line">UIView</div><div class="line">!</div><div class="line">    </div><div class="line">@IBOutlet</div><div class="line">var</div><div class="line"> bottomView: </div><div class="line">UIView</div><div class="line">!</div><div class="line">    </div><div class="line">    </div><div class="line">var</div><div class="line"> cameraLayer: </div><div class="line">CALayer</div><div class="line">!</div><div class="line">    </div><div class="line">var</div><div class="line"> gameTimer: </div><div class="line">Timer</div><div class="line">!</div><div class="line">    </div><div class="line">var</div><div class="line"> timeRemaining = </div><div class="line">60</div><div class="line">var</div><div class="line"> currentScore = </div><div class="line">0</div><div class="line">var</div><div class="line"> highScore = </div><div class="line">0</div><div class="line">override</div><div class="line">func</div><div class="line">viewDidLoad</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">super</div><div class="line">.viewDidLoad()</div><div class="line">        </div><div class="line">        viewSetup()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">func</div><div class="line">viewSetup</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">        </div><div class="line">let</div><div class="line"> backgroundColor = </div><div class="line">UIColor</div><div class="line">.</div><div class="line">init</div><div class="line">(red: </div><div class="line">255</div><div class="line">/</div><div class="line">255</div><div class="line">, green: </div><div class="line">255</div><div class="line">/</div><div class="line">255</div><div class="line">, blue: </div><div class="line">255</div><div class="line">/</div><div class="line">255</div><div class="line">, alpha: </div><div class="line">0.8</div><div class="line">)</div><div class="line">        topView.backgroundColor = backgroundColor</div><div class="line">        bottomView.backgroundColor = backgroundColor</div><div class="line">        scoreLabel.text = </div><div class="line">&quot;0&quot;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    </div><div class="line">override</div><div class="line">func</div><div class="line">didReceiveMemoryWarning</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">super</div><div class="line">.didReceiveMemoryWarning()</div><div class="line">        </div><div class="line">// Dispose of any resources that can be recreated.</div><div class="line"></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Setting-Up-the-Camera"><a href="#Setting-Up-the-Camera" class="headerlink" title="Setting Up the Camera"></a>Setting Up the Camera</h2><p>Now it’s time to setup the live camera feed which will the entire background of the view. Before we start adding code, we need to ask the user’s permission to use the camera. iOS will take care of most of the work related to this. However, we need to provide a description of why we need the camera.</p>
<p>Head over to the<code>info.plist</code>file in the project navigator. Add a row with the key_Privacy – Camera Usage Description_and type a description in the value.</p>
<p><img src="http://img2.tuicool.com/uMv63uz.png!web" alt=""></p>
<p>Now it’s time to add code. To keep things organized, we will add the code to prepare the camera in a function called<code>cameraSetup</code>.</p>
<p>Add the following to the<code>viewDidLoad</code>under<code>viewSetup</code>method call:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cameraSetup</div><div class="line">()</div></pre></td></tr></table></figure>
<p>Next, add the following function after the<code>viewSetup()</code>function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func</div><div class="line">cameraSetup</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now we are going to create something called<code>AVCaptureSession</code>which will make it possible to have a real time capture. Add the following to the<code>cameraSetup</code>function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">let</div><div class="line"> captureSession = AVCaptureSession()</div><div class="line">captureSession.sessionPreset = AVCaptureSession.Preset.photo</div><div class="line"></div><div class="line">let</div><div class="line"> backCamera = AVCaptureDevice.</div><div class="line">default</div><div class="line">(.builtInWideAngleCamera, </div><div class="line">for</div><div class="line">: .video, position: .back)!</div><div class="line"></div><div class="line">let</div><div class="line"> input = </div><div class="line">try</div><div class="line">! AVCaptureDeviceInput(device: backCamera)</div><div class="line">captureSession.addInput(input)</div></pre></td></tr></table></figure>
<p>So what is going on here?</p>
<p>Line #1:We create the<code>AVCaptureSession</code>constant.</p>
<p>Line #2:We set the preset for the caption which pretty much sets the quality for the output. We are setting it to photo for it to be high resolution.</p>
<p>Line #3:We create an AVCaptureDevice which is the back camera. There is no reason to use the front camera for this game.</p>
<p>Line #4:We specify that we are using the back camera by referencing the backCamera AVCaptureDevice.</p>
<p>Line #5:We are adding the backCamera device as the input for the captureSession.</p>
<p>Remember the variable we made earlier called<code>cameraLayer</code>? Now it’s time to use it. We’re going to be adding the camera layer as a sublayer and setting it to the view controller’s size.</p>
<p>Add the following after the code we just added for the capture session:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">cameraLayer = AVCaptureVideoPreviewLayer(session: captureSession)</div><div class="line"></div><div class="line">view</div><div class="line">.layer.addSublayer(cameraLayer)</div><div class="line">cameraLayer.frame = </div><div class="line">view</div><div class="line">.bounds</div><div class="line"> </div><div class="line"></div><div class="line">view</div><div class="line">.bringSubview(toFron</div><div class="line">t:</div><div class="line"> topView)</div><div class="line"></div><div class="line">view</div><div class="line">.bringSubview(toFron</div><div class="line">t:</div><div class="line"> bottomView)</div></pre></td></tr></table></figure>
<p>Line #1-3:Here we are initializing the<code>cameraLayer</code>as an<code>AVCaptureVideoPreviewLayer</code>and setting the setting parameter to<code>captureSession</code>. After that, we add it to the view as a sublayer and set the size to the size of the entire view controller.</p>
<p>Line #5-6:Here we are bringing the top and bottom views to the front. This way, the camera layer doesn’t cover them.</p>
<p>To finish off this function, add the following code under what we just added:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">let videoOutput = AVCaptureVideoDataOutput()</div><div class="line">videoOutput.setSampleBufferDelegate(self, </div><div class="line">queue:</div><div class="line"> DispatchQueue(</div><div class="line">label:</div><div class="line">&quot;buffer delegate&quot;</div><div class="line">))</div><div class="line">videoOutput.recommendedVideoSettings(</div><div class="line">forVideoCodecType:</div><div class="line"> .jpeg, </div><div class="line">assetWriterOutputFileType:</div><div class="line"> .mp4)</div><div class="line"> </div><div class="line">captureSession.addOutput(videoOutput)</div><div class="line">captureSession.sessionPreset = .high</div><div class="line">captureSession.startRunning()</div></pre></td></tr></table></figure>
<p>Line #1-3:Here we are creating the data output and specifying the output settings. You will see an error here but don’t worry about it. We will take care of that soon.</p>
<p>Line #5-7:Finally, we add the video output to the capture session and start running it.</p>
<p>The<code>cameraSetup</code>function should now look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">func cameraSetup() &#123;</div><div class="line">    </div><div class="line">let</div><div class="line"> captureSession = AVCaptureSession()</div><div class="line">    captureSession.sessionPreset = AVCaptureSession.Preset.photo</div><div class="line">        </div><div class="line">    </div><div class="line">let</div><div class="line"> backCamera = AVCaptureDevice.default(.builtInWideAngleCamera, </div><div class="line">for</div><div class="line">: .video, position: .back)!</div><div class="line">    </div><div class="line">let</div><div class="line">input</div><div class="line"> = try! AVCaptureDeviceInput(device: backCamera)</div><div class="line">        </div><div class="line">    captureSession.addInput(</div><div class="line">input</div><div class="line">)</div><div class="line">        </div><div class="line">    cameraLayer = AVCaptureVideoPreviewLayer(session: captureSession)</div><div class="line">    </div><div class="line">view</div><div class="line">.layer.addSublayer(cameraLayer)</div><div class="line">    cameraLayer.frame = </div><div class="line">view</div><div class="line">.bounds</div><div class="line">    </div><div class="line">view</div><div class="line">.bringSubview(toFron</div><div class="line">t:</div><div class="line"> topView)</div><div class="line">    </div><div class="line">view</div><div class="line">.bringSubview(toFron</div><div class="line">t:</div><div class="line"> bottomView)</div><div class="line">        </div><div class="line">    </div><div class="line">let</div><div class="line"> videoOutput = AVCaptureVideoDataOutput()</div><div class="line">    videoOutput.setSampleBufferDelegate(self, queue: DispatchQueue(labe</div><div class="line">l:</div><div class="line">&quot;buffer delegate&quot;</div><div class="line">))</div><div class="line">    videoOutput.recommendedVideoSettings(forVideoCodecType: .jpeg, assetWriterOutputFileType: .mp4)</div><div class="line">        </div><div class="line">    captureSession.addOutput(videoOutput)</div><div class="line">    captureSession.sessionPreset = .high</div><div class="line">    captureSession.startRunning()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Adding-the-Core-ML-Data-Model"><a href="#Adding-the-Core-ML-Data-Model" class="headerlink" title="Adding the Core ML Data Model"></a>Adding the Core ML Data Model</h2><p>After setting up the UI and camera, it is time to work with Core ML for object recognition.</p>
<p>Before we continue coding, we need to add the Core ML data model into the project. In order to use Core ML, you need to have a pre-trained model. While it is possible to build your own model for this game, we will use a model available on Apple’s developer website.</p>
<p>Go to<a href="https://developer.apple.com/machine-learning/" target="_blank" rel="external">“Apple’s machine learning website”</a>and scroll to the bottom. Here you will find four different pre-trained Core ML models available for download.</p>
<p><img src="http://img0.tuicool.com/zI7bAvr.png!web" alt=""></p>
<p>For this game, we will be using the_Inception V3_model. Once you have the model downloaded, drag it into the Xcode project’s project navigator. Click on it and observe what is displayed.</p>
<p><img src="http://img0.tuicool.com/URbymuU.png!web" alt=""></p>
<p>Note:Please make sure that Target Membership of the project is selected, otherwise, your app will not be able to access the file.</p>
<p>As you can see, this model has a type of a<em>Neural Network Classifier</em>. It takes in an image size 299×299 and outputs two things. A dictionary which is the probability or confidence level for the calculations of the model, and a string with the actual name of the object in the picture.</p>
<h2 id="Predicting-the-Object"><a href="#Predicting-the-Object" class="headerlink" title="Predicting the Object"></a>Predicting the Object</h2><p>Now our little field trip is over and it’s time go to back to the<code>View Controller</code>and add two awesome functions that make the magic happen.</p>
<p>First we’re going to add the<code>predict</code>function. Add the following code after the<code>cameraSetup</code>function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">func</div><div class="line">predict</div><div class="line">(image: CGImage)</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">let</div><div class="line"> model = </div><div class="line">try</div><div class="line">! </div><div class="line">VNCoreMLModel</div><div class="line">(</div><div class="line">for</div><div class="line">: </div><div class="line">Inceptionv3</div><div class="line">().model)</div><div class="line">    </div><div class="line">let</div><div class="line"> request = </div><div class="line">VNCoreMLRequest</div><div class="line">(model: model, completionHandler: results)</div><div class="line">    </div><div class="line">let</div><div class="line"> handler = </div><div class="line">VNSequenceRequestHandler</div><div class="line">()</div><div class="line">    </div><div class="line">try</div><div class="line">! handler.perform([request], on: image)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Don’t let its size fool you, this is a powerful function. Here is what the code does:</p>
<p>Line #2:We create a model constant for the Inception V3 model.</p>
<p>Line #3:We create a<code>VNCoreMLRequest</code>which will call the results function (we are writing that next, so don’t worry about the error.)</p>
<p>Line #4-5:We create a constant for a<code>VNSequenceRequestHandler</code>object and then perform it with the image passed into the predict function via its parameter.</p>
<p>Next, it’s time to add the<code>results</code>function which will handle the results of the<code>predict</code>method and keep the game moving forward.</p>
<p>Add the following code after the<code>predict</code>function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">func</div><div class="line">results</div><div class="line">(request: VNRequest, error: Error?)</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">guard</div><div class="line">let</div><div class="line"> results = request.results </div><div class="line">as</div><div class="line">? [</div><div class="line">VNClassificationObservation</div><div class="line">] </div><div class="line">else</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">print</div><div class="line">(</div><div class="line">&quot;No result found&quot;</div><div class="line">)</div><div class="line">        </div><div class="line">return</div><div class="line"></div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    </div><div class="line">guard</div><div class="line"> results.</div><div class="line">count</div><div class="line"> != </div><div class="line">0</div><div class="line">else</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">print</div><div class="line">(</div><div class="line">&quot;No result found&quot;</div><div class="line">)</div><div class="line">        </div><div class="line">return</div><div class="line"></div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    </div><div class="line">let</div><div class="line"> highestConfidenceResult = results.first!</div><div class="line">    </div><div class="line">let</div><div class="line"> identifier = highestConfidenceResult.identifier.</div><div class="line">contains</div><div class="line">(</div><div class="line">&quot;, &quot;</div><div class="line">) ? </div><div class="line">String</div><div class="line">(describing: highestConfidenceResult.identifier.</div><div class="line">split</div><div class="line">(separator: </div><div class="line">&quot;,&quot;</div><div class="line">).first!) : highestConfidenceResult.identifier</div><div class="line">        </div><div class="line">    </div><div class="line">if</div><div class="line"> identifier == objectLabel.text! &#123;</div><div class="line">        currentScore += </div><div class="line">1</div><div class="line">/</div><div class="line">extObject()</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This function is called after a prediction. It first has two guards to make sure that there is actually a result. If there is, it will take the result with the highest confidence and put it into its own string called<code>identifier</code>. Then the function will check to see if the identifier is the same as the object label’s text. If they are equal, that means the player found the correct object and the score will be increased. There is also a function call for<code>nextObject</code>which is commented out. We have not yet created that function so leave it that way for now.</p>
<p>Okay! So we are done with the majority of the Core ML code for the game. Isn’t that easy? Your<code>predict</code>and<code>results</code>functions should look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">func</div><div class="line">predict</div><div class="line">(image: CGImage)</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">let</div><div class="line"> model = </div><div class="line">try</div><div class="line">! </div><div class="line">VNCoreMLModel</div><div class="line">(</div><div class="line">for</div><div class="line">: </div><div class="line">Inceptionv3</div><div class="line">().model)</div><div class="line">    </div><div class="line">let</div><div class="line"> request = </div><div class="line">VNCoreMLRequest</div><div class="line">(model: model, completionHandler: results)</div><div class="line">    </div><div class="line">let</div><div class="line"> handler = </div><div class="line">VNSequenceRequestHandler</div><div class="line">()</div><div class="line">    </div><div class="line">try</div><div class="line">! handler.perform([request], on: image)</div><div class="line">&#125;</div><div class="line">    </div><div class="line"></div><div class="line">func</div><div class="line">results</div><div class="line">(request: VNRequest, error: Error?)</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">guard</div><div class="line">let</div><div class="line"> results = request.results </div><div class="line">as</div><div class="line">? [</div><div class="line">VNClassificationObservation</div><div class="line">] </div><div class="line">else</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">print</div><div class="line">(</div><div class="line">&quot;No result found&quot;</div><div class="line">)</div><div class="line">        </div><div class="line">return</div><div class="line"></div><div class="line">    &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">    </div><div class="line">guard</div><div class="line"> results.</div><div class="line">count</div><div class="line"> != </div><div class="line">0</div><div class="line">else</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">print</div><div class="line">(</div><div class="line">&quot;No result found&quot;</div><div class="line">)</div><div class="line">        </div><div class="line">return</div><div class="line"></div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    </div><div class="line">let</div><div class="line"> highestConfidenceResult = results.first!</div><div class="line">    </div><div class="line">let</div><div class="line"> identifier = highestConfidenceResult.identifier.</div><div class="line">contains</div><div class="line">(</div><div class="line">&quot;, &quot;</div><div class="line">) ? </div><div class="line">String</div><div class="line">(describing: highestConfidenceResult.identifier.</div><div class="line">split</div><div class="line">(separator: </div><div class="line">&quot;,&quot;</div><div class="line">).first!) : highestConfidenceResult.identifier</div><div class="line">        </div><div class="line">    </div><div class="line">if</div><div class="line"> identifier == objectLabel.text! &#123;</div><div class="line">        currentScore += </div><div class="line">1</div><div class="line">/</div><div class="line">extObject()</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>One more thing we need to do before we are done with the Core ML part of this game. We need to add an extension to call the predict function. Add the following code the the very bottom of the file, after the last bracket:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">extension</div><div class="line">ViewController</div><div class="line">: </div><div class="line">AVCaptureVideoDataOutputSampleBufferDelegate</div><div class="line">&#123;</div><div class="line">    </div><div class="line">func</div><div class="line">captureOutput</div><div class="line">(</div><div class="line">_</div><div class="line"> output: AVCaptureOutput, didOutput sampleBuffer: CMSampleBuffer, from connection: AVCaptureConnection)</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">guard</div><div class="line">let</div><div class="line"> pixelBuffer = </div><div class="line">CMSampleBufferGetImageBuffer</div><div class="line">(sampleBuffer) </div><div class="line">else</div><div class="line"> &#123; </div><div class="line">fatalError</div><div class="line">(</div><div class="line">&quot;pixel buffer is nil&quot;</div><div class="line">) &#125;</div><div class="line">        </div><div class="line">let</div><div class="line"> ciImage = </div><div class="line">CIImage</div><div class="line">(cvPixelBuffer: pixelBuffer)</div><div class="line">        </div><div class="line">let</div><div class="line"> context = </div><div class="line">CIContext</div><div class="line">(options: </div><div class="line">nil</div><div class="line">)</div><div class="line">        </div><div class="line">        </div><div class="line">guard</div><div class="line">let</div><div class="line"> cgImage = context.createCGImage(ciImage, from: ciImage.extent) </div><div class="line">else</div><div class="line"> &#123; </div><div class="line">fatalError</div><div class="line">(</div><div class="line">&quot;cg image&quot;</div><div class="line">) &#125;</div><div class="line">        </div><div class="line">let</div><div class="line"> uiImage = </div><div class="line">UIImage</div><div class="line">(cgImage: cgImage, scale: </div><div class="line">1.0</div><div class="line">, orientation: .leftMirrored)</div><div class="line">        </div><div class="line">        </div><div class="line">DispatchQueue</div><div class="line">.main.sync &#123;</div><div class="line">            predict(image: uiImage.cgImage!)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This extension adopts the<code>AVCaptureVideoDataOutputSampleBufferDelegate</code>protocol to process the captured video sample buffers, and creates a CGImage from the video feed. With the images, we pass it to the predict function. You should now be able to build your project without any errors. This is how we continuously capture video and pass it to the built-in machine learning model for object recognition.</p>
<h2 id="Preparing-an-Array-of-Objects-for-the-Game"><a href="#Preparing-an-Array-of-Objects-for-the-Game" class="headerlink" title="Preparing an Array of Objects for the Game"></a>Preparing an Array of Objects for the Game</h2><p>In order for the game to give the player random objects to look for, we have to prepare a list of objects to choose from. To do this, we will create an array with the names of a bunch of objects. Later we will create a function to choose an element from this array randomly and tell the player to go find it.</p>
<p>This is going to be a somewhat lengthy array, so for organization purposes, I have decided to create it in a struct in a separate Swift file. Right click in the project navigator and choose<code>New File...</code>.</p>
<p>Now select the Swift File option and click<em>next</em>. Name the file “Objects” and click<em>create</em>. Place the following code snippet into the file after the<code>import</code>statement:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">struct</div><div class="line">Objects</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">let</div><div class="line"> objectArray = [</div><div class="line">&quot;computer keyboard&quot;</div><div class="line">, </div><div class="line">&quot;mouse&quot;</div><div class="line">, </div><div class="line">&quot;iPod&quot;</div><div class="line">, </div><div class="line">&quot;printer&quot;</div><div class="line">, </div><div class="line">&quot;digital clock&quot;</div><div class="line">, </div><div class="line">&quot;digital watch&quot;</div><div class="line">, </div><div class="line">&quot;backpack&quot;</div><div class="line">, </div><div class="line">&quot;ping-pong ball&quot;</div><div class="line">, </div><div class="line">&quot;envelope&quot;</div><div class="line">, </div><div class="line">&quot;water bottle&quot;</div><div class="line">, </div><div class="line">&quot;combination lock&quot;</div><div class="line">, </div><div class="line">&quot;lampshade&quot;</div><div class="line">, </div><div class="line">&quot;switch&quot;</div><div class="line">, </div><div class="line">&quot;lighter&quot;</div><div class="line">, </div><div class="line">&quot;pillow&quot;</div><div class="line">, </div><div class="line">&quot;spider web&quot;</div><div class="line">, </div><div class="line">&quot;sandal&quot;</div><div class="line">, </div><div class="line">&quot;vacuum&quot;</div><div class="line">, </div><div class="line">&quot;wall clock&quot;</div><div class="line">, </div><div class="line">&quot;bath towel&quot;</div><div class="line">, </div><div class="line">&quot;wallet&quot;</div><div class="line">, </div><div class="line">&quot;poster&quot;</div><div class="line">, </div><div class="line">&quot;chocolate&quot;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Here I have created an array called<code>objectArray</code>of some common, random, household objects that the Core ML model looks for. These are just a select few so feel free to add more.</p>
<p>Now go back to<code>ViewController.swift</code>before we jump into the next step.</p>
<h2 id="Saving-the-Score"><a href="#Saving-the-Score" class="headerlink" title="Saving the Score"></a>Saving the Score</h2><p>We will be saving the player’s highest score using<code>UserDefaults</code>. This means that we need a setter function to save the score into UserDefaults and a getter function to retrieve it.</p>
<p>Add the following two functions to your code after the results function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">func</div><div class="line">getHighScore</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">if</div><div class="line">let</div><div class="line"> score = </div><div class="line">UserDefaults</div><div class="line">.standard.object(forKey: </div><div class="line">&quot;highscore&quot;</div><div class="line">) &#123;</div><div class="line">        highscoreLabel.text = </div><div class="line">&quot;</div><div class="line">\(score)</div><div class="line">&quot;</div><div class="line"></div><div class="line">        highScore = score </div><div class="line">as</div><div class="line">! </div><div class="line">Int</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">else</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">print</div><div class="line">(</div><div class="line">&quot;No highscore, setting to 0.&quot;</div><div class="line">)</div><div class="line">        highscoreLabel.text = </div><div class="line">&quot;0&quot;</div><div class="line"></div><div class="line">        highScore = </div><div class="line">0</div><div class="line"></div><div class="line">        setHighScore(score: </div><div class="line">0</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"></div><div class="line">func</div><div class="line">setHighScore</div><div class="line">(score: Int)</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">UserDefaults</div><div class="line">.standard.</div><div class="line">set</div><div class="line">(score, forKey: </div><div class="line">&quot;highscore&quot;</div><div class="line">)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The first function,<code>getHighScore</code>, uses an<code>if let</code>statement to check if there is already a saved score in UserDefaults. If there is, it sets the<code>highScore</code>variable to it, if not, it sets the<code>highScore</code>to 0. The second function,<code>setHighScore</code>, simply sets the current score as the high score. We will call this when the player beats their score.</p>
<p>The<code>getHighScore</code>function needs to be called when the app loads up. This way, the player can see their high score when they open the app.</p>
<p>Add<code>getHighScore()</code>to the<code>viewDidLoad</code>under the<code>cameraSetup</code>function call. Your<code>ViewDidLoad</code>should look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">override</div><div class="line">func</div><div class="line">viewDidLoad</div><div class="line">() &#123;</div><div class="line">    </div><div class="line">super</div><div class="line">.viewDidLoad</div><div class="line">()</div><div class="line">        </div><div class="line">    </div><div class="line">viewSetup</div><div class="line">()</div><div class="line">    </div><div class="line">cameraSetup</div><div class="line">()</div><div class="line">    </div><div class="line">getHighScore</div><div class="line">()</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Handling-the-Game-Play"><a href="#Handling-the-Game-Play" class="headerlink" title="Handling the Game Play"></a>Handling the Game Play</h2><p>Now it’s time to add a number of different functions to pull everything we have already done together and make this app work. We will start by adding functions to choose a random object from the objects array and handle when the game ends.</p>
<p>Add the following to your code after the<code>setHighScore</code>method:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">//1</div><div class="line">func</div><div class="line">endGame</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">//2</div><div class="line"></div><div class="line">        startButton.isHidden = </div><div class="line">false</div><div class="line"></div><div class="line">        skipButton.isHidden = </div><div class="line">true</div><div class="line"></div><div class="line">        objectLabel.text = </div><div class="line">&quot;Game Over&quot;</div><div class="line">//3</div><div class="line">if</div><div class="line"> currentScore </div><div class="line">&gt;</div><div class="line"> highScore &#123;</div><div class="line">            setHighScore(score: currentScore)</div><div class="line">            highscoreLabel.text = </div><div class="line">&quot;</div><div class="line">\(currentScore)</div><div class="line">&quot;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">//4</div><div class="line"></div><div class="line">        currentScore = </div><div class="line">0</div><div class="line"></div><div class="line">        timeRemaining = </div><div class="line">60</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">//5</div><div class="line">func</div><div class="line">nextObject</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">//6</div><div class="line">let</div><div class="line"> allObjects = </div><div class="line">Objects</div><div class="line">().objectArray</div><div class="line">        </div><div class="line">//7</div><div class="line">let</div><div class="line"> randomObjectIndex = </div><div class="line">Int</div><div class="line">(arc4random_uniform(</div><div class="line">UInt32</div><div class="line">(allObjects.</div><div class="line">count</div><div class="line">)))</div><div class="line">        </div><div class="line">//8</div><div class="line">guard</div><div class="line"> allObjects[randomObjectIndex] != objectLabel.text </div><div class="line">else</div><div class="line"> &#123;</div><div class="line">            nextObject()</div><div class="line">            </div><div class="line">return</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">//9</div><div class="line"></div><div class="line">        objectLabel.text = allObjects[randomObjectIndex]</div><div class="line">        scoreLabel.text = </div><div class="line">&quot;</div><div class="line">\(currentScore)</div><div class="line">&quot;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>So what exactly are these functions doing you ask?</p>
<ol>
<li>The<br><code>endGame</code><br>function is called when the timer is up.</li>
<li>We first unhide the start button and hide the skip button since it is no longer needed when the game is not in play. We also set the object label’s text to say “Game Over”.</li>
<li>We check if the score that the player just got is higher than the high score. If it is, than we call the<br><code>setHighScore</code><br>function.</li>
<li>We reset the variables for the next game.</li>
<li>The<br><code>nextObject</code><br>function is called when the player either finds the correct object or taps the skip button. This function will take a random object from the object array and set it to the objects label so the player knows to find it.</li>
<li>We create an instance of the objectArray.</li>
<li>We generate a random number from 0 to the length of the object array.</li>
<li>We use a guard to make sure that the random number that was just chosen is not the same as the last one. This way, the player will not get the same object twice in a row.</li>
<li>We set the object label to the random object and make sure the score label is displaying the correct score.</li>
</ol>
<p>Important:Now that we have created the_nextObject_function, make sure you go back up to the_results_function and uncomment the function call for<em>nextObject</em>.</p>
<p>Next, we need to add the actions that we will connect to the play and skip buttons. Add the following code after the<code>nextObject</code>function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">@IBAction</div><div class="line">func</div><div class="line">startButtonTapped</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">    </div><div class="line">//1</div><div class="line"></div><div class="line">    gameTimer = </div><div class="line">Timer</div><div class="line">.scheduledTimer(withTimeInterval: </div><div class="line">1</div><div class="line">, repeats: </div><div class="line">true</div><div class="line">, block: &#123; (gameTimer) </div><div class="line">in</div><div class="line">//2</div><div class="line">guard</div><div class="line">self</div><div class="line">.timeRemaining != </div><div class="line">0</div><div class="line">else</div><div class="line"> &#123;</div><div class="line">            gameTimer.invalidate()</div><div class="line">            </div><div class="line">self</div><div class="line">.endGame()</div><div class="line">            </div><div class="line">return</div><div class="line"></div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        </div><div class="line">self</div><div class="line">.timeRemaining -= </div><div class="line">1</div><div class="line">self</div><div class="line">.timerLabel.text = </div><div class="line">&quot;</div><div class="line">\(</div><div class="line">self</div><div class="line">.timeRemaining)</div><div class="line">&quot;</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">//3  </div><div class="line"></div><div class="line">    startButton.isHidden = </div><div class="line">true</div><div class="line"></div><div class="line">    skipButton.isHidden = </div><div class="line">false</div><div class="line"></div><div class="line">    nextObject()</div><div class="line">        </div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line">//4  </div><div class="line">@IBAction</div><div class="line">func</div><div class="line">skipButtonTapped</div><div class="line">()</div><div class="line"> &#123;</div><div class="line">    nextObject()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So what did we do here?</p>
<ol>
<li>First we added an action that will be called when the start button is tapped. Here we initialize the gameTimer using the new method that takes a block to invoke rather than a selector which makes the code much cleaner and more organized.</li>
<li>We add a guard to make sure that there is time left in the game. If there is not, we invalidate the timer and run the<br><code>endGame</code><br>function. If there is time, we subtract one from the time remaining and update the timer label.</li>
<li>Here we hide the startButton, show the skip button, and call the<br><code>nextObject</code><br>function to show the first object to find.</li>
<li>We add an action to connect to the skip button which simply calls for a new object.</li>
</ol>
<p>Important:Now, make sure you go to your storyboard and connect all outlets an actions to the proper elements.</p>
<h2 id="Playing-the-Game"><a href="#Playing-the-Game" class="headerlink" title="Playing the Game"></a>Playing the Game</h2><p>Now it’s finally time to build and run your game. Once loaded, tap the play button and point your phone at the object stated at the top. See how high is your score! You might need to wait a second for the app to focus before it can recognize an object. Also, please note that if you have an older device such as an iPhone 5s or 6, the app might run really slow because of the power and resources that Core ML needs. As I testedt, the game ran great on my iPhone 7. But when I tried it on my iPhone 5s, it was really slow and laggy.</p>
<p><img src="http://img2.tuicool.com/6NnMr2V.png!web" alt=""></p>
<p>In case you were wondering, this model cannot recognize the Nintendo Switch!</p>
<h2 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h2><p>I hope you had fun creating this game and have some more insight on how much you can do with Core ML. The game is not perfect, there are a lot of things you can improve (say, play a sound when the object is matched). But this is just a simple example showing how you can apply Core ML. So get creative and see how you can improve upon it.</p>
<p>For reference, the complete demo app is available on<a href="https://github.com/appcoda/CoreMLScavenge" target="_blank" rel="external">GitHub</a>.</p>
<p>For more details about the Core ML framework, you can refer to the<a href="https://developer.apple.com/documentation/coreml" target="_blank" rel="external">official Core ML documentation</a>.</p>
<p>Do you like this tutorial? Feel free to leave a comment and let me know.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/QbeiquA" target="_blank" rel="external">http://www.appcoda.com/coreml-game/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WWDC 2017 brought many amazing and powerful APIs to iOS. Among the most popular is&lt;a href=&quot;https://developer.apple.com/documentation/core
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Is Freelancing Your Next UX Career Move?</title>
    <link href="https://gmagon.com/blog/2017/07/05/is-freelancing-your-next-ux-career-move/"/>
    <id>https://gmagon.com/blog/2017/07/05/is-freelancing-your-next-ux-career-move/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.960Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been working in for UX for about a decade and freelanced on and off for about five years. Last year, I started consulting full time again, abandoning the 9-5 life and making my main source of employment a series of projects from different clients.</p>
<p>Since then, I’ve had countless conversations with other UX professionals who are considering moving to freelancing as their next career step.</p>
<p>They usually say they’re looking for freedom, more money, the ability to work on more interesting problems or learn new things – or even just the chance to work in their pyjamas regularly. Since I started consulting, I’ve expanded my focus into more strategy and product work across a wide variety of industries, and have met all kinds of interesting, smart colleagues.</p>
<p>While I wouldn’t change a thing about my situation, I’m always cautious about encouraging others to jump into the freelance world, because it’s definitely not for everyone. Here are some things I’ve learned along the way to consider before you quit your day job.</p>
<h3 id="Freelancing-pros-and-cons"><a href="#Freelancing-pros-and-cons" class="headerlink" title="Freelancing pros and cons"></a>Freelancing pros and cons</h3><p>Yes, it’s true that I spend most days in yoga pants, travel frequently, and work on some pretty cool projects. But consulting isn’t all sunshine and rainbows. There are many things that are great about consulting, some things that aren’t so great, and some things that just depend on the day.</p>
<p><img src="http://img2.tuicool.com/mqEZzeZ.png!web" alt=""></p>
<p>Freelancing pro: setting up your own home office. Photo by<a href="http://unsplash.com/photos/RcdV8rnXSeE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Vadim Sherbakov</a>on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="external">Unsplash</a>.</p>
<p>Schedule: One of the things I love most about consulting is being in total control of my schedule. There’s no expectation that I’m at my desk from 9 am to 5 pm. Sometimes I get in a zone and finish an entire report in one very long day and take the next morning off to let ideas percolate. Of course I have meetings and deadlines, but I can usually finagle things to work well for my clients and myself.</p>
<p>On the flip side, juggling your schedule can be difficult. I’m quite disciplined about getting things done, but I’ve never quite figured out a way to create a consistent schedule. Sometimes I’ve had priority work on different projects collide at the same time or I’ve said yes to a few too many things and ended up working crazy hours to get everything done. Such is a consultant’s life.</p>
<p>Money: I absolutely find that I make more money freelancing than when I worked in-house, even in leadership roles. I’m still experimenting with how I bill, but I tend to use value-based pricing for entire projects rather than charge hourly. I often ask clients to pay me 50% of the total upfront and the rest upon project completion, which can make managing money tricky, especially when you’re used to a consistent paycheck.</p>
<p>You also have to know that you’ll never be able to collect money as though you’re billing 40 hours a week, every week. You have to account for supplies, tool costs, benefits, and set aside time for administrative tasks like sending invoices, business development, and, of course, downtime. No one gives you sick time or vacation days when you freelance.</p>
<p>Inevitably, I’ve also run into time periods where I don’t have anything billable booked. An open schedule can be scary, so I use this time to do things like reach out to colleagues or potential clients, write articles, research new tools, try to learn something new, or catch up on administrative work. One of the benefits of this downtime is the space to learn, exploring the vast array of available online courses or just experimenting with a new method or tool.</p>
<p>Work environment: I mostly work from home, which means I wear what I like, can pet my dog throughout the day, don’t contend with traffic, and for better or worse, have all day access to my kitchen. All great, but it also means that sometimes the only person I see in the flesh each day is my husband.</p>
<p>I have to make an extra concerted effort to hang out with colleagues, so I’ve become more active in my local meetups and groups (shout out to<a href="https://www.meetup.com/Ladies-that-UX-Durham/" target="_blank" rel="external">Ladies that UX Durham</a>– love yall!) I also found I need to be more social during the week, even if that means going to a fitness class instead of biking solo or talking on the phone while I shop.</p>
<h3 id="What-services-will-you-provide"><a href="#What-services-will-you-provide" class="headerlink" title="What services will you provide?"></a>What services will you provide?</h3><p>I’ve been focused on research and strategy for most of my career. I won’t rehash the “<a href="http://community.uxmastery.com/t/forced-to-become-a-unicorn-has-that-happened-to-you/783/11" target="_blank" rel="external">Should I be a unicorn</a>?” or “<a href="http://uxmastery.com/ux-designers-do-not-need-to-code/" target="_blank" rel="external">Do designers need to code</a>?” debates, but I’ll admit that when I first starting freelancing, I was worried I wasn’t going to be able to find enough work without doing visual work. Turns out, I was totally wrong. Phew!</p>
<p><img src="http://img1.tuicool.com/BzMjMbA.jpg!web" alt=""></p>
<p>Don’t worry, you don’t need to be a unicorn to be a freelance UXer.</p>
<p>You absolutely don’t need to be a unicorn or try to tackle projects that aren’t your speciality. But it helps to have a broad set of experience and at least one area of deep expertise you can market and use to define your services. You can match what you’re good at and what you like to define the kind of projects you target, the projects you’re OK with taking, and what you will certainly turn down.</p>
<p>Clearly<a href="http://uxmastery.com/build-your-ux-personal-brand/" target="_blank" rel="external">defining your services and interests</a>are important because it tells other people what to turn to you for. if I know someone has great interaction design skills and tonnes of experience with financial products, I’ll suggest them anytime I see a project like that. If someone tells me they’ll do anything that comes their way, they probably won’t come to mind for any projects I know about.</p>
<h3 id="How-will-you-find-clients"><a href="#How-will-you-find-clients" class="headerlink" title="How will you find clients?"></a>How will you find clients?</h3><p>This is a question that I get asked time after time, and the answer is incredibly simple in concept but hard in practice:<strong>treat your clients and colleagues as you would users and provide them with a good experience working with you</strong>.</p>
<p>More specifically, you have to do good work and other people have to be willing to talk about it. This can either mean that your clients are pleased with your work and will re-hire you or tell other potential clients, or that your peers in UX like your work and can refer you when they need help or can’t take something on. It really is true that a huge amount of success in consulting is based on networking and who you know, but that only works to your advantage if the people you know have had a good experience working with you. Right now, every single one of my clients is someone I’ve previously worked with or have gotten a good reference.</p>
<p>This is where, once again, it helps to have a clearly defined, slightly unique set of skills or interests. There are tonnes of researchers and tonnes of designers, but if you’re known as a researcher who loves qualitative work and medical products, people will think of you whenever they come across that kind of project. Just be sure that you don’t define yourself too narrowly.</p>
<p>You can also use job boards to identify potential projects or try recruiting agencies, but I haven’t found either as fruitful as having my name passed on from a previous contact. More on finding freelance UX work<a href="https://www.linkedin.com/pulse/single-best-way-get-freelance-ux-work-amanda-stockwell?trk=v-feed&amp;lipi=urn%3Ali%3Apage%3Ad_flagship3_feed%3BWB86zkUbaQbxQN8f0Iqf%2Bw%3D%3D" target="_blank" rel="external">here</a>.</p>
<h3 id="Are-you-really-suited-for-all-that"><a href="#Are-you-really-suited-for-all-that" class="headerlink" title="Are you really suited for all that?"></a>Are you really suited for all that?</h3><p>Even if all the potential pros sound amazing to you and you have the skills and network to pull off freelancing, take a moment to reflect on your personality and soft skills.</p>
<p>Are you detailed, organised, and willing to juggle many different client requests and manage your own schedule? Are you a natural risk-taker who can cope well with slow periods or lack of viable work? Are you assertive enough to negotiate terms for yourself? Do you mind working by yourself a lot?</p>
<p>There’s a lot to think about before leaving the security of a full-time job. I love freelancing, but it’s worth carefully considering the pros and cons and your skillset and personality before taking the leap. Best wishes for whichever path you choose! </p>
<p>Do you have experience or tips on freelancing for UX professionals? Leave a comment on the blog or in the forums! </p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/3qIJryE" target="_blank" rel="external">http://uxmastery.com/freelancing-ux-career/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been working in for UX for about a decade and freelanced on and off for about five years. Last year, I started consulting full time 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AutoWiring Spring Beans Into Classes Not Managed by Spring</title>
    <link href="https://gmagon.com/blog/2017/07/05/autowiring-spring-beans-into-classes-not-managed-by-spring/"/>
    <id>https://gmagon.com/blog/2017/07/05/autowiring-spring-beans-into-classes-not-managed-by-spring/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.954Z</updated>
    
    <content type="html"><![CDATA[<p>In my previous article<a href="https://dzone.com/articles/jpa-auditing-automatically-persisting-audit-logs" target="_blank" rel="external">JPA Auditing: Persisting Audit Logs Automatically using EntityListeners</a>, I discussed how we can use Spring Data JPA automate auditing and automatically create audit logs or history records and update CreatedBy, CreatedDate, LastModifiedBy, LastModifiedDate properties.</p>
<p>So in order to save history records for our File entity, we were trying to autowire EntityManager inside our FileEntityListener class before we learned that we could not do that.</p>
<p>We cannot inject any Spring-managed bean in the EntityListener because EntityListeners are instantiated by JPA before Spring injects anything into it. EntityListeners are not managed by Spring so Spring cannot inject any Spring-managed bean, e.g. EntityManager in the EntityListeners.</p>
<p>And this is not just the case with EntityListeners, you cannot autowire any Spring-managed bean into another class (i.e. utility classes) not managed by Spring.</p>
<p>Because this is a very common problem that can also arise with other classes, I tried to come out with a common solution that will not just solve this problem but will also help us get Spring-managed beans in other places.</p>
<p><img src="http://img1.tuicool.com/zQV3IzI.png!web" alt=""></p>
<p>So, have created a utility class to fetch any bean according to our requirements.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">public</div><div class="line">class</div><div class="line">BeanUtil</div><div class="line">implements</div><div class="line">ApplicationContextAware</div><div class="line">&#123;</div><div class="line"></div><div class="line">    </div><div class="line">private</div><div class="line">static</div><div class="line"> ApplicationContext context;</div><div class="line"></div><div class="line">    </div><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">setApplicationContext</div><div class="line">(ApplicationContext applicationContext)</div><div class="line">throws</div><div class="line"> BeansException </div><div class="line">&#123;</div><div class="line">        context = applicationContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">public</div><div class="line">static</div><div class="line">&lt;</div><div class="line">T</div><div class="line">&gt;</div><div class="line">T </div><div class="line">getBean</div><div class="line">(Class</div><div class="line">&lt;</div><div class="line">T</div><div class="line">&gt;</div><div class="line"> beanClass)</div><div class="line">&#123;</div><div class="line">        </div><div class="line">return</div><div class="line"> context.getBean(beanClass);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now, to get any bean in a class, we will just need to call BeanUtil.getBean(YourClass.class) and pass the class type to it. Then, we will get the bean.</p>
<p>For example, in our case, we were trying to get the EntityManager bean inside FileEntityListener. We can simply do that by writing BeanUtil.getBean(EntityManager.class).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line"> FileEntityListener &#123;</div><div class="line"></div><div class="line">    </div><div class="line">private</div><div class="line">void</div><div class="line">perform</div><div class="line">(File target, Action action)</div><div class="line">&#123;</div><div class="line">        EntityManager entityManager = BeanUtil.getBean(EntityManager.</div><div class="line">class</div><div class="line">);</div><div class="line">        entityManager.persist(</div><div class="line">new</div><div class="line"> FileHistory(target, action));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can find the complete code in this<a href="https://github.com/njnareshjoshi/articles/tree/master/spring-data-jpa-auditing" target="_blank" rel="external">GitHub Repository, </a>and please feel free to provide your valuable feedback.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/zINby2B" target="_blank" rel="external">https://dzone.com/articles/autowiring-spring-beans-into-classes-not-managed-by-spring</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In my previous article&lt;a href=&quot;https://dzone.com/articles/jpa-auditing-automatically-persisting-audit-logs&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>After Nonstop Games closed, its employees founded Mighty Bear Games; today it raised US$775K</title>
    <link href="https://gmagon.com/blog/2017/07/05/after-nonstop-games-closed-its-employees-founded-mighty-bear-games-today-it-raised-us775k/"/>
    <id>https://gmagon.com/blog/2017/07/05/after-nonstop-games-closed-its-employees-founded-mighty-bear-games-today-it-raised-us775k/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mighty-Bear-Games-will-focus-on-developing-mobile-app-games"><a href="#Mighty-Bear-Games-will-focus-on-developing-mobile-app-games" class="headerlink" title="Mighty Bear Games will focus on developing mobile app games"></a>Mighty Bear Games will focus on developing mobile app games</h2><p><img src="http://img0.tuicool.com/y2uMrqj.png!web" alt=""></p>
<p>Nonstop Games was a Singapore-based mobile games studio run by Finnish developers. Their hit game was strategy title Heroes of Honor.</p>
<p>In 2014, it was acquired by Candy Crush maker King forabout US$16 million. Two years later, Nonstop Games shuttered.</p>
<p>But the journey for its employees did not end there. They pressed on, scouring the game development landscape for new compatriots to join their next adventure. Along the way, they recruited talents from renowned gaming studios such as Ubisoft, EA and LucasArts.</p>
<p>With renewed vigour in their hearts and a hardy band of developers to boot, the Nonstop Games alumni roared back with a spanking new enterprise.</p>
<p>They called it Mighty Bear Games.</p>
<p>And today, Mighty Bear raised US$775,000 in a round led by Global Founders Capital, the venture capital arm of Rocket Internet.</p>
<p>Mighty Bear will use the newly-raised financing to develop its new mobile MMORPG (Massive Multiplayer Online Roleplaying Game). Details of the game have not been disclosed.</p>
<p>It is interesting to note that despite receiving offers from the US and Europe — two markets with long history of producing top rated games — the Nonstop Games alumni chose to, once again, base their gaming studio in Singapore.</p>
<p>“One of the interesting developments we’ve seen is that Singapore-based studios are starting to gain traction with their own IP,” says co-founder and CEO Simon Davis, in an interview with<strong>e27</strong>.</p>
<p>“We see a trend developing where game development studios in Singapore are now being founded by guys like us with 5, or even 10+ years experience working in big AAA studios,” he adds. “This wouldn’t have been possible if the government hadn’t made such an effort bringing in top multi-national studios over the past few years — many of us on the team, including myself, directly benefited from that.”</p>
<h2 id="Keeping-an-eye-on-gaming-trends"><a href="#Keeping-an-eye-on-gaming-trends" class="headerlink" title="Keeping an eye on gaming trends"></a><strong>Keeping an eye on gaming trends</strong></h2><p>While Davis says Mighty Bear is platform-agnostic, it will still be focussing on making mobile games. But he does not rule out building games for consoles or desktops in the future.</p>
<p>The studio will also target the multiplayer gaming market.</p>
<p>Also Read:<a href="https://e27.co/curious-south-korea-gaming-culture-closer-look-popularity-esports-reveals-trends-20170525/" target="_blank" rel="external">Curious about the South Korea gaming culture? A closer look at the popularity of esports reveals some trends</a></p>
<p>“We love playing multiplayer games, and we feel there’s a huge gap in the market for online multiplayer games which are not completely skewed toward your typical hardcore gamer,” says Davis.</p>
<p>“This is an area that’s really interesting, because the challenge is to create games which have a competitive element, but are still accessible to people who may not consider themselves hardcore gamers.”</p>
<p>The Mighty Bear team may eat and breathe games, but they are not just button-mashing geeks; as a creative force, they also take inspiration from all other forms of art (yes, gaming is an art too).</p>
<p>“I studied music so that makes approaching the creative process a bit different. We also read a lot which is a great way to get new ideas and approaches. Finally, we watch a lot of movies together – movie nights and ‘Popcorn Fridays’ are two Mighty Bear traditions,” says Davis.</p>
<p>“Other than that we’re all hardcore gamers. We have a weekly ‘gaming club’ where we all sit down and compare notes on a pre-agreed game and discuss what we liked and what we didn’t about it.”</p>
<p>So what are Davis’s all-time favourite games?</p>
<p>“I’d say that Super Mario 64 was the first game that really blew me away, Street Fighter II was the first game that got me hooked on multiplayer. For scale and awe it might be The Legend of Zelda: The Breath of the Wild or Shadow of the Colossus. Candy Crush has the perfect puzzle combination of skill, luck, and amazing player feedback, and lately. I’ve been absolutely loving Brawl Stars on mobile.”</p>
<p>The mobile app market is a lucrative industry, it is projected to hit US$189 billion with mobile gaming accounting for more than<a href="https://venturebeat.com/2016/11/02/mobile-app-market-to-grow-270-to-189-billion-by-2020-with-games-accounting-for-55/" target="_blank" rel="external">half the share.</a></p>
<p>In Singapore’s backyard, China’s mobile games market collected<a href="http://www.gamesindustry.biz/articles/2016-05-03-chinese-mobile-market-is-now-the-most-valuable-in-the-world" target="_blank" rel="external">US$7 billion in revenue in 2015</a>. This figure is set to continue to grow exponentially as mobile usage increases and more games are developed.</p>
<p>If Mighty Bear can claw out its own niche in this increasingly saturated space, the sweet dew of revenue will surely come forth easily.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/eERRZ3R" target="_blank" rel="external">http://e27.co/nonstop-games-closed-employees-founded-mighty-bear-games-today-raised-us775k-20170704/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Mighty-Bear-Games-will-focus-on-developing-mobile-app-games&quot;&gt;&lt;a href=&quot;#Mighty-Bear-Games-will-focus-on-developing-mobile-app-games&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Top Smartphones Under Php20k (Mid-2017)</title>
    <link href="https://gmagon.com/blog/2017/07/05/top-smartphones-under-php20k-mid-2017/"/>
    <id>https://gmagon.com/blog/2017/07/05/top-smartphones-under-php20k-mid-2017/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.963Z</updated>
    
    <content type="html"><![CDATA[<p>Over the last two days, we’ve shared our lists of the top smartphones of mid-2017 with price ranges of above Php30k and above Php20k. Today, we look at the mid-rangers. All of the phones mentioned in this list are no less than Php10k and no more than Php20k. Let’s get started.</p>
<p><img src="http://img2.tuicool.com/2UBbq2Z.png!web" alt=""></p>
<p>Author’s note: The smartphones listed below are those that have officially launched in the Philippines from January to June 2017. The list is arranged by price from highest to lowest.</p>
<h3 id="Samsung-Galaxy-A5-2017"><a href="#Samsung-Galaxy-A5-2017" class="headerlink" title="Samsung Galaxy A5 (2017)"></a><a href="http://www.yugatech.com/mobile/samsung-galaxy-a7-and-a5-2017-gets-ph-price/#OipiIkY4KAT5OsTq.97" target="_blank" rel="external">Samsung Galaxy A5 (2017)</a></h3><p>Early this year, Samsung launched their new A-series phones in the country, specifically the<strong>Galaxy A7 (2017)</strong>and the <strong>Galaxy A5 (2017)</strong>. While not much as changed here in size and form factor, under the hood, the new A5 sports a faster octa-core CPU, more RAM, and an improved camera.</p>
<p><img src="http://img0.tuicool.com/mAR7Fz7.jpg!web" alt=""></p>
<p>Samsung Galaxy A5 (2017) specs:</p>
<p>5.2-inch Super AMOLED display @ 1920 x 1080 pixels</p>
<p>1.9GHz octa-core processor</p>
<p>3GB RAM</p>
<p>32GB internal storage</p>
<p>Expandable via microSD card, up to 256GB</p>
<p>16-megapixel f/1.9 autofocus rear camera w/ LED flash</p>
<p>16-megapixel f/1.9 front-facing camera</p>
<p>4G LTE Cat.6</p>
<p>Wi-Fi 802.11 a/b/g/n/ac</p>
<p>Bluetooth v 4.2</p>
<p>NFC</p>
<p>ANT+</p>
<p>USB Type-C</p>
<p>Fingerprint sensor</p>
<p>IP68 water-resistant</p>
<p>3000mAh battery w/ fast charging</p>
<p>Android 6.0 Marshmallow</p>
<p>Price: Php19,990</p>
<h3 id="Vivo-V5-Plus"><a href="#Vivo-V5-Plus" class="headerlink" title="Vivo V5 Plus"></a><a href="http://www.yugatech.com/mobile/vivo-v5-plus-review/#ZVowhOAh803kUjTe.97" target="_blank" rel="external">Vivo V5 Plus</a></h3><p>Packed with 20MP and 8MP dual front cameras, this is truly a self-portrait centered smartphone. That is not to say that the great cameras are all it has going for it, as it has a beefy octa-core CPU, 4GB of RAM, 64GB internal storage, and above average battery life.</p>
<p><img src="http://img1.tuicool.com/zE7JVf7.jpg!web" alt=""></p>
<p>Vivo V5 Plus specs:</p>
<p>5.5-inch Full HD IPS display, 401ppi</p>
<p>2.5D Corning Gorilla Glass 5</p>
<p>2.5GHz Qualcomm Snapdragon 625 octa-core processor</p>
<p>Adreno 506 GPU</p>
<p>4GB RAM</p>
<p>64GB internal storage</p>
<p>16-megapixel f/2.0 autofocus rear camera w/ LED flash</p>
<p>20MP f/2.0 + 8MP front-facing camera</p>
<p>Dual SIM 4G LTE</p>
<p>Wi-Fi 802.11ac</p>
<p>Bluetooth 4.0</p>
<p>GPS w/ A-GPS, GLONASS, BeiDou</p>
<p>Fingerprint scanner</p>
<p>AK4376 Hi-Fi chip</p>
<p>USB OTG</p>
<p>Gyroscope, E-compass</p>
<p>3,160mAh non-removable battery w/ fast charging</p>
<p>Android 6.0 Marshmallow w/ Funtouch OS 3.0</p>
<p>152.58 x 74.00 x 7.26 mm</p>
<p>158.6 g</p>
<p>Price: Php19,990</p>
<h3 id="Nokia-6"><a href="#Nokia-6" class="headerlink" title="Nokia 6"></a><a href="http://www.yugatech.com/mobile/nokia-6-review/#wMIFjfO1FwWJE07K.97" target="_blank" rel="external">Nokia 6</a></h3><p>With Nokia finally launching a proper full-featured Android smartphone this year, it has proven to be worth the wait. The<strong>Nokia 6</strong>wasunveiled at the Mobile World Congress 2017, and has a beautiful design, respectable specs, and Android 7.0 Nougat out of the box.</p>
<p><img src="http://img2.tuicool.com/qEfUnu7.jpg!web" alt=""></p>
<p>Nokia 6 specs:</p>
<p>5.5-inch IPS LCD @ 1920 x 1080 pixels, 401ppi</p>
<p>2.5D Corning Gorilla Glass 3</p>
<p>Qualcomm Snapdragon 430 1.4GHz octa-core processor</p>
<p>Adreno 505 graphics</p>
<p>4GB RAM</p>
<p>64GB internal storage</p>
<p>Expandable via microSD, up to 128GB (Uses SIM 2)</p>
<p>16MP PDAF rear camera w/ dual-tone flash</p>
<p>8MP front-facing camera</p>
<p>4G LTE</p>
<p>Dual-SIM</p>
<p>WiFi 802.11ac</p>
<p>Bluetooth 4.1</p>
<p>GPS, A-GPS, GLONASS</p>
<p>Fingerprint scanner</p>
<p>Gyroscope sensor</p>
<p>USB OTG support</p>
<p>3,000mAh Li-Ion battery</p>
<p>Fast charging support</p>
<p>Android 7.0 Nougat</p>
<p>154 x 75.8 x 7.85 mm</p>
<p>169 g</p>
<p>Price: Php18,590</p>
<h3 id="OPPO-F3"><a href="#OPPO-F3" class="headerlink" title="OPPO F3"></a><a href="http://www.yugatech.com/mobile/oppo-f3-review/#0rjRZbUDeAZoF8UM.97" target="_blank" rel="external">OPPO F3</a></h3><p>Another phone for those who value high-quality selfies, here we have the more affordable offering to the OPPO F3 Plus. Like the V5 Plus mentioned earlier, it sports dual front cameras with wide and narrow fields of view.</p>
<p><img src="http://img0.tuicool.com/RBviaim.jpg!web" alt=""></p>
<p>OPPO F3 specs:</p>
<p>5.5-inch In-Cell IPS LCD display @ 1920 x 1080 pixels, 401ppi</p>
<p>Corning Gorilla Glass 5</p>
<p>MediaTek MT6750T 1.5GHz octa-core CPU</p>
<p>Mali T860 GPU</p>
<p>4GB RAM</p>
<p>64GB internal storage</p>
<p>Expandable via microSD, up to 128GB</p>
<p>13MP PDAF rear camera w/ LED flash</p>
<p>16MP + 8MP 120-degree wide-angle front cameras</p>
<p>Dual SIM (Nano + Nano)</p>
<p>4G LTE</p>
<p>WiFi 802.11a/b/g/n</p>
<p>Bluetooth 4.1</p>
<p>GPS w/ a-GPS</p>
<p>Fingerprint scanner</p>
<p>Android 6.0 Marshmallow with ColorOS 3.1</p>
<p>3200mAh non-removable battery</p>
<p>75.2 x 153.3 x 7.3 mm</p>
<p>153 g</p>
<p>Price: Php16,990</p>
<h3 id="Xiaomi-Mi-Max-2"><a href="#Xiaomi-Mi-Max-2" class="headerlink" title="Xiaomi Mi Max 2"></a><a href="http://www.yugatech.com/mobile/xiaomi-mi-max-2-first-impressions/#l5u7KzvxtHXXjRp4.97" target="_blank" rel="external">Xiaomi Mi Max 2</a></h3><p>With a 6.44-inch display, this is definitely the biggest phone on this list. Great battery life, solid specs, decent cameras, and Android 7.0 Nougat support are what this over-sized smartphone has going for it.</p>
<p><img src="http://img2.tuicool.com/MRN7fmj.jpg!web" alt=""></p>
<p>Xiaomi Mi Max 2 specs:</p>
<p>6.44-inch IPS LCD @ 1920 x 1080 pixels, 342ppi</p>
<p>Qualcomm Snapdragon 625 octa-core CPU</p>
<p>Adreno 506 GPU</p>
<p>4GB RAM</p>
<p>64GB/128GB internal storage</p>
<p>Expandable via microSD, up to 128GB (Uses SIM 2)</p>
<p>12MP Sony IMX386 PDAF rear camera w/ LED flash</p>
<p>5MP wide-angle front camera</p>
<p>Dual SIM (Nano)</p>
<p>LTE-A</p>
<p>Wi-Fi 802.11ac, dual-band</p>
<p>Bluetooth 4.2</p>
<p>GPS w/ A-GPS, GLONASS</p>
<p>NFC</p>
<p>IR blaster</p>
<p>Fingerprint scanner</p>
<p>Gyroscope</p>
<p>Stereo speakers</p>
<p>5300mAh non-removable battery w/ Quick Charge 3.0</p>
<p>Android 7.0 Nougat w/ MIUI 8</p>
<p>Price: Php15,500 (Widget City)</p>
<h3 id="Sony-Xperia-XA1"><a href="#Sony-Xperia-XA1" class="headerlink" title="Sony Xperia XA1"></a><a href="http://www.yugatech.com/mobile/sony-xperia-xa1-first-impressions/#z1IXWx5eYlA5C7D5.97" target="_blank" rel="external">Sony Xperia XA1</a></h3><p>One of Sony’s newest mid-range phones is the XA1 Ultra. It has the classic Xperia look: Flat sides and sharp corners and features a “borderless edge-to-edge” HD display. The phone also boasts Image Enhance Technology and packs a great punch in its camera.</p>
<p><img src="http://img1.tuicool.com/INZN3uR.jpg!web" alt=""></p>
<p>Sony Xperia XA1 specs:</p>
<p>5-inch HD display w/ Image Enhance Technology</p>
<p>2.3GHz MediaTek Helio P20 octa-core CPU</p>
<p>Mali T880 MP2 900MHz GPU</p>
<p>3GB RAM</p>
<p>32GB storage</p>
<p>microSD up to 256GB</p>
<p>23MP 1/2.3-inch Exmor RS rear camera, Hybrid AF, SteadyShot, LED flash</p>
<p>8MP 1/4-inch Exmor R AF front camera, SteadyShot</p>
<p>4G LTE</p>
<p>WiFi</p>
<p>Bluetooth</p>
<p>GPS, A-GPS</p>
<p>Android 7.0 Nougat</p>
<p>2,300mAh battery w/ Qnovo Adaptive Charging</p>
<p>145 x 67 x 8mm</p>
<p>143 g</p>
<p>Price: Php15,500 (Widget City)</p>
<h3 id="Huawei-GR5-2017"><a href="#Huawei-GR5-2017" class="headerlink" title="Huawei GR5 (2017)"></a><a href="http://www.yugatech.com/mobile/video-huawei-gr5-2017-review/#PGz2DVJwD9URISyl.97" target="_blank" rel="external">Huawei GR5 (2017)</a></h3><p>A refresh of last year’s model, the current model packs an improved design and hardware configuration. It has taken a page from the P9 series with its dual-camera setup.</p>
<p><img src="http://img0.tuicool.com/FbYB3mN.jpg!web" alt=""></p>
<p>Huawei GR5 specs:</p>
<p>5.5-inch IPS LCD display @ 1920 x 1080 pixels</p>
<p>HiSilicon Kirin 655 2.1GHz octa-core processor</p>
<p>4 x ARM Cortex A53 @ 2.1GHz</p>
<p>4 x ARM Cortex A53 @ 1.7 GHz</p>
<p>Mali-T830 MP2</p>
<p>3GB RAM</p>
<p>32GB internal storage</p>
<p>Up to 128GB via microSD</p>
<p>Dual rear cameras (12MP/2MP)</p>
<p>8MP wide-angle front camera</p>
<p>Wi-Fi 802.11b/g/n</p>
<p>Bluetooth 4.1</p>
<p>4G LTE</p>
<p>Fingerprint scanner</p>
<p>Android 6.0 Marshmallow with EMUI 4.1</p>
<p>3,340mAh Li-Ion battery</p>
<p>Price: Php13,990</p>
<p>With that, it’s a wrap. Did we miss anything? Please do let us know in the comments down below.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/fMzqMnQ" target="_blank" rel="external">http://www.yugatech.com/mobile/top-smartphones-under-php20k-mid-2017/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Over the last two days, we’ve shared our lists of the top smartphones of mid-2017 with price ranges of above Php30k and above Php20k. Tod
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&#39;Baby Driver&#39; is an ode to iPod nostalgia</title>
    <link href="https://gmagon.com/blog/2017/07/05/baby-driver-is-an-ode-to-ipod-nostalgia/"/>
    <id>https://gmagon.com/blog/2017/07/05/baby-driver-is-an-ode-to-ipod-nostalgia/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T09:44:47.957Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s.aolcdn.com/hss/storage/midas/91351aa33a3d30a39ff662e8b8b68e9/205442176/Baby%2BDriver%2B1.jpg" alt=""></p>
<p>Tristar Pictures</p>
<p>It took a while to get going, but it’s safe to say we’re living in a golden age of digital music. Terrible compression is a thing of the past, and the rise of streaming services like Spotify and Apple Music give us instant access to almost anything we’d want to hear. But while we’ve gained so much, there’s also a sense that we’ve lost something. Sharing a playlist isn’t the same as burning a CD for your sweetheart, or going even further back, manually dubbing a mixtape. As our music has become less physical, so has our attachment to it.</p>
<p>That’s something that struck me while watching<em>Baby Driver</em>, director Edgar Wright’s new mashup of car chases, heist films and excellent tunes. Its lead character, Baby (Ansel Elgort), is perpetually connected to a pair of headphones, experiencing life as if it’s a never-ending music video. But his earbuds aren’t attached to a smartphone; they’re plugged into one of his many iPods. He has a box full of them, each with their own colors and ornamentations. Basically, a different iPod for every mood.</p>
<p>While they’re filled with digital files, the iPods also serve as a physical connection to all of his music. The film opens with Baby in a getaway car, cool as a cucumber while wearing white earbuds, launching into a jam out session with_Bellbottoms_by The Jon Spencer Blues Explosion. That song also serves as the backdrop for the film’s electric opening chase, where you can almost feel the iPod’s tiny mechanical hard drive (remember those?) racing alongside him.</p>
<p>As someone who<a href="https://www.engadget.com/2015/09/17/gone-too-zune/" target="_blank" rel="external">reminisces fondly about my Zune HD</a>,<a href="https://en.wikipedia.org/wiki/Rio_Karma" target="_blank" rel="external">Rio Karma</a>,<a href="https://www.cnet.com/products/toshiba-gigabeat-s/review/" target="_blank" rel="external">Toshiba Gigabeat</a>and countless other players of varying quality, Baby’s connection to his iPods struck a chord. With older media players, there was a sense of physicality, before cloud syncing made it a cinch to keep track of all your music. If you somehow managed to hit a double whammy of bad luck and lost both your player and your computer’s hard drive, you were out of luck.</p>
<p>These days, you can hop between phones within minutes, porting over your entire library without a sweat with iTunes, Google Play and apps like Spotify. You don’t even have to wait for your music to download; you can just stream it all from the server heavens.</p>
<p>Baby’s iPod addiction seems fitting today, at a time when we’re all plugged into headphones most of the day. Just look up from your phone once in a while and you’ll see it: a crowd of people, each in their own world with their own private soundtracks. In<em>Baby Driver</em>, that soundtrack underscores everything, be it a chase, a shootout or even a stroll for coffee. The film also takes pains to choreograph the tunes with what’s happening on screen (there’s a shootout set to_Tequila_that’s pitch perfect). Baby also uses music as a form of therapy, due to a tinnitus condition that resulted from a childhood car accident. It’s a way to drown out the “hum in the drum,” as Kevin Spacey’s criminal mastermind, Doc, tells us.</p>
<p><img src="https://o.aolcdn.com/images/dims?resize=980%2C640&amp;quality=100&amp;image_uri=https%3A%2F%2Fs.aolcdn.com%2Fhss%2Fstorage%2Fmidas%2F898e51608e44a0022256740610336ea2%2F205434882%2FBaby%2BDriver%2B2.jpg&amp;client=cbc79c14efcebee57402&amp;signature=dc771c585960952fdbbeeb4c05d41fa744c718ed" alt=""></p>
<p>Tristar Pictures</p>
<p>Since the film is practically an action musical, it’s no surprise that Baby’s relationship with everyone is centered around tunes. He strikes up a conversation with his sweetheart, Debora (Lily James), by comparing the songs that feature both of their names. He forms a kinship with Jon Hamm’s bank robber as they share earbuds, reminiscing about their go-to tracks during a getaway. (Baby’s is_Queen’s_Brighton Rock, which should come as no surprise to fans of Edgar Wright’s<em>Shaun of the Dead</em>.) Meanwhile, Jamie Foxx’s Bats, who’s particularly unstable, hates the idea of listening to music during robberies. That’s a major red flag that tells us not to trust him.</p>
<p>Baby’s connection to music extends beyond Apple’s devices: his apartment practically has wall-to-wall records. He also spends his time mixing sound clips with a unique rig,<a href="http://www.gq.com/story/kid-koala-baby-driver" target="_blank" rel="external">developed by Kid Koala</a>, which consists of a magnetic card reader, a distorted Buddhist meditation box and a pen controlled device. There’s even an E-mu Emulator II, for good measure. In true, anachronistic music nerd fashion, Baby also records all of his mixes to cassette tape.</p>
<p>Since he’s a collector of old-school musical gear (although not many CDs, from what I could gather), Baby’s iPod obsession seems almost peculiar. But I suppose he’s just like plenty of other hip music nerds. We live in a world where the digital and analog still coexist – record sales, paradoxically, are actually on the rise, along with streaming music sales. Baby just latches onto the things he can actually touch and feel.</p>
<p>And, after all, who wants to deal with their favorite track buffering when you’re in the middle of a life or death car chase?</p>
<p>Source: <a href="https://www.engadget.com/2017/07/03/baby-driver-ipod-nostalgia/" target="_blank" rel="external">https://www.engadget.com/2017/07/03/baby-driver-ipod-nostalgia/</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s.aolcdn.com/hss/storage/midas/91351aa33a3d30a39ff662e8b8b68e9/205442176/Baby%2BDriver%2B1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Tristar 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Researchers Crack 1024-bit RSA Encryption in GnuPG Crypto Library</title>
    <link href="https://gmagon.com/blog/2017/07/04/researchers-crack-1024-bit-rsa-encryption-in-gnupg-crypto-library/"/>
    <id>https://gmagon.com/blog/2017/07/04/researchers-crack-1024-bit-rsa-encryption-in-gnupg-crypto-library/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.988Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img0.tuicool.com/Qn67Bja.png!web" alt=""></p>
<p>Security boffins have discovered a critical vulnerability in a GnuPG cryptographic library that allowed the researchers to completely break RSA-1024 and successfully extract the secret RSA key to decrypt data.</p>
<p>Gnu Privacy Guard (GnuPG or GPG) is popular open source encryption software used by many operating systems from Linux and FreeBSD to Windows and macOS X.</p>
<p>It’s the same software used by the former NSA contractor and whistleblower Edward Snowden to keep his communication secure from law enforcement.</p>
<p>The vulnerability, labeled<a href="https://lists.gnupg.org/pipermail/gnupg-announce/2017q2/000408.html" target="_blank" rel="external">CVE-2017-7526</a>, resides in the<strong>Libgcrypt</strong>cryptographic library used by GnuPG, which is prone to local FLUSH+RELOAD side-channel attack.</p>
<p>A team of researchers — from Technical University of Eindhoven, the University of Illinois, the University of Pennsylvania, the University of Maryland, and the University of Adelaide — found that the “left-to-right sliding window” method used by the libgcrypt library for carrying out the mathematics of cryptography leaks significantly more information about exponent bits than for right-to-left, allowing full RSA key recovery.</p>
<p>“In this paper, we demonstrate a complete break of RSA-1024 as implemented in Libgcrypt. Our attack makes essential use of the fact that Libgcrypt uses the left-to-right method for computing the sliding-window expansion,” the researchers wrote in the<a href="https://eprint.iacr.org/2017/627.pdf" target="_blank" rel="external">research paper</a>.</p>
<p>“The pattern of squarings and multiplications in left-to-right sliding windows leaks significantly more information about the exponent than right-to-left. We show how to extend the Heninger-Shacham algorithm for partial key reconstruction to make use of this information and obtain a very efficient full key recovery for RSA-1024.”</p>
<p>L3 Cache Side-Channel Attack requires an attacker to run arbitrary software on the hardware where the private RSA key is used.</p>
<p>The attack allows an attacker to extract the secret crypto key from a system by analyzing the pattern of memory utilization or the electromagnetic outputs of the device that are emitted during the decryption process.</p>
<p>“Thus in practice, there are easier ways to access the private keys than to mount this side-channel attack. However, on boxes with virtual machines, this attack may be used by one VM to steal private keys from another VM,” Libgcrypt<a href="https://lists.gnupg.org/pipermail/gnupg-announce/2017q2/000408.html" target="_blank" rel="external">advisory</a>reads.</p>
<p>Researchers have also provided evidence that the same side channel attack also works against RSA-2048, which require moderately more computation than RSA-1024.</p>
<p>The research paper titled, ‘Sliding right into disaster: Left-to-right sliding windows leak,’ was authored by David J. Bernstein, Joachim Breitner, Daniel Genkin, Leon Groot Bruinderink, Nadia Heninger, Christine van Vredendaal, Tanja Lange and Yuval Yarom.</p>
<p>Libgcrypt has released a fix for the issue in Libgcrypt version 1.7.8.<a href="https://www.debian.org/security/2017/dsa-3901" target="_blank" rel="external">Debian</a>and<a href="https://www.ubuntuupdates.org/package/core/zesty/main/updates/libgcrypt20-dev" target="_blank" rel="external">Ubuntu</a>have already updated their library with the latest version of Libgcrypt.</p>
<p>So, you are strongly advised to check if your Linux distribution is running the latest version of the Libgcrypt library.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/2uUvMfZ" target="_blank" rel="external">http://thehackernews.com/2017/07/gnupg-libgcrypt-rsa-encryption.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/Qn67Bja.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Security boffins have discovered a critical vulnerability in a GnuPG cr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Real World React apps and their open source codebases for developers to learn from</title>
    <link href="https://gmagon.com/blog/2017/07/04/real-world-react-apps-and-their-open-source-codebases-for-developers-to-learn-from/"/>
    <id>https://gmagon.com/blog/2017/07/04/real-world-react-apps-and-their-open-source-codebases-for-developers-to-learn-from/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Real-World-React"><a href="#Real-World-React" class="headerlink" title="Real World React"></a>Real World React</h2><p>Real World React apps and their open source codebases for developers to learn from</p>
<p>Learn from React apps written by experienced developers.</p>
<p>You’ll find the source code for the Real World React apps in the<a href="https://github.com/jeromedalbert/real-world-react/blob/master/apps" target="_blank" rel="external"><code>apps/</code></a>subdirectory.</p>
<p>Thank you to every developer who has worked on a project this repo links to, your work is helping developers learn React.</p>
<h2 id="How-to-install-on-your-computer"><a href="#How-to-install-on-your-computer" class="headerlink" title="How to install on your computer"></a>How to install on your computer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># Clone this git repo:</div><div class="line">git</div><div class="line"> clone git</div><div class="line">@github</div><div class="line">.com:jeromedalbert/real-world-react.git</div><div class="line"></div><div class="line">cd real-world-react/</div><div class="line"></div><div class="line"></div><div class="line"># The apps are linked to as git submodules.</div><div class="line"># This will take some time...</div><div class="line"></div><div class="line">git submodule update --init</div></pre></td></tr></table></figure>
<h2 id="Information-for-Contributors"><a href="#Information-for-Contributors" class="headerlink" title="Information for Contributors"></a>Information for Contributors</h2><h4 id="Is-your-app-the-right-fit"><a href="#Is-your-app-the-right-fit" class="headerlink" title="Is your app the right fit?"></a>Is your app the right fit?</h4><ul>
<li>A real world app should ideally be publicly accessible and used by real people in a production environment. As such, boilerplate, starter kits, libraries, and small demo/example projects are not really a good fit.</li>
<li>Ideally most of the code should be frontend-oriented, in order to focus on React. Small backends may be OK, but should constitute the minority of the codebase.</li>
</ul>
<p>That being said, don’t hesitate to submit a pull request if you meet the criteria!</p>
<h4 id="How-to-add-a-Real-World-App"><a href="#How-to-add-a-Real-World-App" class="headerlink" title="How to add a Real World App"></a>How to add a Real World App</h4><p>Given a GitHub repo for an app<code>githubuser/foo</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Inside the project root:</div><div class="line">git</div><div class="line"> submodule add -b master git</div><div class="line">@github</div><div class="line">.com:githubuser/foo.git apps/foo</div></pre></td></tr></table></figure>
<h4 id="Updating-the-apps-submodules-to-latest"><a href="#Updating-the-apps-submodules-to-latest" class="headerlink" title="Updating the apps submodules to latest"></a>Updating the apps submodules to latest</h4><p>The apps in<code>apps/</code>are git submodules. Git submodules are locked to a revision and don’t stay in sync with the latest revision.</p>
<p>To update the revisions, run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># This will take some time:</div><div class="line">git</div><div class="line"> submodule foreach git pull origin master</div></pre></td></tr></table></figure>
<h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul>
<li>Jerome Dalbert<br><a href="http://jeromedalbert.com/" target="_blank" rel="external">http://jeromedalbert.com</a></li>
<li>Contributions are welcome, fork the GitHub repo, make your changes, then submit your pull request! Reach out if you’d like some help.</li>
</ul>
<p>Source: <a href="http://www.tuicool.com/articles/hit/3QjiYbZ" target="_blank" rel="external">https://github.com/jeromedalbert/real-world-react</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Real-World-React&quot;&gt;&lt;a href=&quot;#Real-World-React&quot; class=&quot;headerlink&quot; title=&quot;Real World React&quot;&gt;&lt;/a&gt;Real World React&lt;/h2&gt;&lt;p&gt;Real World Rea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Delaware Passes Bill Recognizing Stock Trading via Blockchain Technology</title>
    <link href="https://gmagon.com/blog/2017/07/04/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/"/>
    <id>https://gmagon.com/blog/2017/07/04/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.983Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img1.tuicool.com/NVfMnuv.jpg!web" alt=""></p>
<p>Delaware has passed a bill that legally recognizes the trading of stocks using blockchain technology. Although the state has sought to promote itself as a bastion for blockchain investment, the bill is extremely limited in its scope – leading many to view Delaware’s government as attempting to cash in on bitcoin’s recent boom.</p>
<p><em><strong>Also Read: </strong></em><a href="https://news.bitcoin.com/bitwage-launches-uk-bitcoin-payroll-services/" target="_blank" rel="external"><em>Bitwage Officially Launches UK Bitcoin Payroll Services</em></a></p>
<h2 id="Delaware’s-Blockchain-Bill-Has-Been-Championed-by-Blockchain-Start-Up-Symbiont"><a href="#Delaware’s-Blockchain-Bill-Has-Been-Championed-by-Blockchain-Start-Up-Symbiont" class="headerlink" title="Delaware’s Blockchain Bill Has Been Championed by Blockchain Start-Up Symbiont"></a>Delaware’s Blockchain Bill Has Been Championed by Blockchain Start-Up Symbiont</h2><p>Recent<a href="http://www.coindesk.com/delaware-house-passes-historic-blockchain-regulation/" target="_blank" rel="external">reports</a>have announced the near unanimous passing of a<a href="http://www.coindesk.com/delaware-blockchain-stock-bill-likely-to-advance-in-house-vote-today/" target="_blank" rel="external">bill</a>in the US state of Delaware that will explicitly recognize the right to trade stocks using a blockchain. The chair of the Delaware bar association’s corporate law section describing the vote as “keep[ing] Delaware at the forefront of corporate law and in the lead in terms of enabling the use of ‘distributed ledger shares’.” The bill is expected to be signed into law by Delaware’s governor, John Carney, before the end of July.</p>
<p><img src="http://img0.tuicool.com/UZ7nueb.png!web" alt=""></p>
<p>Delaware’s blockchain bill has been championed by blockchain start-up Symbiont, who has<a href="https://bitcoinmagazine.com/articles/private-capital-market-ecosystems-meet-blockchain/" target="_blank" rel="external">partnered</a>with Hong Kong-based Privatemarket.io to build an “alternative investment marketplace for closed-end funds” that is built using Symbiont’s smart-contract software. The bill was developed under close legal guidance from Marco Santori of Cooley LLP and Symbiont’s Caitlin Long – suggesting that Symbiont will be among the early high-profile blockchain businesses seeking to operate within Delaware. When announcing the partnership with Privatemarket to offer stock trading via blockchain technology, Symbiont stated “We see blockchain technology having a significant positive impact on the investment world, and it starts with the fact that the foundational document for any investment — the registration of a company — will likely soon be possible to do on a blockchain in Delaware”.</p>
<p>The Bill Draws Attention to the Absence of Legal Consensus Pertaining to Blockchain Technology</p>
<p>Although the passing of the bill is positive step toward permissive bitcoin regulation, many see the bill having been custom tailored to the desires of Symbiont’s legal team – with the recognition of stock trading via blockchain comprises a very limited step toward blockchain regulation – especially when contrasted with recent moves by Japan, South Korea and Australia in recognizing bitcoin as a legal form of payment.</p>
<p><img src="http://img1.tuicool.com/2aUfUzb.jpg!web" alt=""></p>
<p>The passing of the bill draws attention to the absence of clear legal definitions and apparatus pertaining to blockchain technology. The lack of federal legal consensus regarding basic bitcoin and blockchain technology suggests that some theproblems within the regulatory framework dealing with cannabis-based businesses could potentially emerge within bitcoin, such as overlapping or contradicting federal laws. It is entirely possible that particular states may seek to become early bastions of blockchain investment, seeking to capitalize on a nascent booming industry in the same fashion as Colorado or Seattle with regards to the cannabis industry.</p>
<p>Although the positive ramifications from further government embracement of bitcoin and blockchain technology are undeniable, the risk of hastily rushed state legislations running afoul of future federal regulations is very real – especially given the absence of legal consensus on the definition of fundamental terminology such as ‘blockchain’. In the case of Delaware, it is entirely possible that future federal laws may not recognize stock trading via blockchain technology, creating potential future legal and logistical challenges for businesses that seek to build their operations according to the laws of a single state.</p>
<p>Do you think that Delaware passing a bill recognizing stock trading via blockchain technology is a significant step toward cryptocurrency regulations? Share your thoughts in the comments section below!</p>
<p>Images courtesy of shutterstock</p>
<p>Need to calculate your bitcoin holdings? Check our <a href="http://tools.bitcoin.com/" target="_blank" rel="external">tools</a> section.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/YbYVryF" target="_blank" rel="external">https://news.bitcoin.com/delaware-passes-bill-recognizing-stock-trading-via-blockchain-technology/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/NVfMnuv.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Delaware has passed a bill that legally recognizes the trading of stock
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Apple, Google and other Nasdaq Stocks Swing Wildly in After-Hours Trading</title>
    <link href="https://gmagon.com/blog/2017/07/04/apple-google-and-other-nasdaq-stocks-swing-wildly-in-after-hours-trading/"/>
    <id>https://gmagon.com/blog/2017/07/04/apple-google-and-other-nasdaq-stocks-swing-wildly-in-after-hours-trading/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.978Z</updated>
    
    <content type="html"><![CDATA[<p>The prices of shares in some of the world’s biggest companies seemed to alternately plummet or soar in after-hours trading on Nasdaq Inc.’s flagship exchange.</p>
<p>The likes ofand Microsoft Corp.’s shares appeared to fall by more than 50 percent, while’s stock was at one stage trading 348 percent higher, data from post-market trading on the Nasdaq Stock Market showed on Monday. That gave the iPhone maker a theoretical market capitalization of $3.4 trillion, compared to the $751 billion at which it was valued when trading closed on Friday.</p>
<p>The swings came on a day that the U.S. stock market closed early at 1 p.m., on the eve of the July 4 holiday. In another unusual detail, pricing data showed more than a dozen securities including Apple, Microsoft and Nasdaq’s own company stock at the same price, $123.47. It wasn’t immediately clear if shares changed hands at those prices.</p>
<p>The apparent swings triggered trading halts in some securities, according to automatically generated messages. The halts are a mechanism exchanges use to limit the impact of particularly volatile sessions. A system status alert on Nasdaq’ssaid that systems were operating normally at 8:23 p.m. ET. After-market hours on Nasdaq typically last from 4 p.m. to 8:00 p.m.</p>
<p>Will Briganti, a spokesman for Nasdaq, was unable to immediately comment on the situation.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/fI3Ane2" target="_blank" rel="external">http://www.bloomberg.com/news/articles/2017-07-04/nasdaq-stocks-show-exaggerated-movements-in-after-hours-trading</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The prices of shares in some of the world’s biggest companies seemed to alternately plummet or soar in after-hours trading on Nasdaq Inc.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Customize Color with Styled Google Maps in Android</title>
    <link href="https://gmagon.com/blog/2017/07/04/customize-color-with-styled-google-maps-in-android/"/>
    <id>https://gmagon.com/blog/2017/07/04/customize-color-with-styled-google-maps-in-android/</id>
    <published>2017-07-04T00:00:00.000Z</published>
    <updated>2017-07-04T10:12:45.981Z</updated>
    
    <content type="html"><![CDATA[<p>You can now style and customize your Google Maps colors and more. In this Android tutorial, let’s see how we can do that in our apps.</p>
<p>Google Maps has added this ability across all platforms. This means regardless of whether you use Google Maps for Web, iOS or Android, you’ll be able to style them.</p>
<p>By default, Google Maps looks like this.</p>
<p><img src="http://img0.tuicool.com/7zuI7fm.png!web" alt=""></p>
<p>Default Google Maps</p>
<p>We’re all used to this and by no means am I saying it looks bad. But say I want to display a map that corresponds to my brand color scheme.</p>
<p><img src="http://img2.tuicool.com/6nqUbeJ.png!web" alt=""></p>
<p><a href="https://dribbble.com/shots/3136953-Directions-Module" target="_blank" rel="external">Directions Module by David Rodriguez</a></p>
<p>Now imagine if my only option was to display the default Google maps, with it’s default colors. It wouldn’t go well with the design, would it? The color scheme of the map won’t be in harmony with the rest of the design. In other words, it sticks out, like a sore thumb.</p>
<p>In such scenarios, we need a map that reflects our brand theme. Our brand color palette. This wasn’t possible before.</p>
<p><img src="http://img0.tuicool.com/FZnENfz.png!web" alt=""></p>
<p>But now, Google allows Styled maps. Using this, we can customize the map to look the way we want. This includes modifying colors, with a very high degree of control.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>We’ll start by creating a new Android Studio project. Thankfully, we have pre-defined templates (for Activities) to start with.<a href="http://blog.iamsuleiman.com/image-gallery-app-android-studio-1-4-glide/" target="_blank" rel="external">Activity templates were introduced in Android Studio 1.4</a>.</p>
<p>So when you create a new project, chose the ‘Google<em>Maps Activity</em>’ template.</p>
<p><img src="http://img0.tuicool.com/Eb2i63U.png!web" alt=""></p>
<p>Android Studio – Activity Templates</p>
<p>Here are the project settings:</p>
<ul>
<li>minSdkVersion – 14</li>
<li>targetSdkVersion – 26</li>
</ul>
<p>Thanks to this, we don’t have to spend a lot of time configuring the Maps SDK and whatnot. I remember the first time I tried using Maps in Android (back in 2012). It took me well over an hour to simply display a Map!</p>
<p>But you don’t have to worry anymore as we’ve come a long way from that!</p>
<h3 id="Configuring-Google-Maps"><a href="#Configuring-Google-Maps" class="headerlink" title="Configuring Google Maps"></a>Configuring Google Maps</h3><p>Once the project has loaded, Android Studio will open the<strong>google_maps_api.xml</strong>file by default.</p>
<p><img src="http://img2.tuicool.com/Ava6Rra.png!web" alt=""></p>
<p>Auto-generated maps_api.xml</p>
<p>You’ll notice there is one step to follow to get your Google Maps API Key. Trust me, this is nothing compared to the amount of steps earlier!</p>
<p>So follow the comments on the file. Don’t worry, I’ll still walk you through them. but you’ll have to grab the URL and keys from the google_maps_api.xml file’s comments.</p>
<h4 id="1-Go-to-the-URL-provided-–console-developers-google-com"><a href="#1-Go-to-the-URL-provided-–console-developers-google-com" class="headerlink" title="1. Go to the URL provided –console.developers.google.com"></a>1. Go to the URL provided –<em>console.developers.google.com</em></h4><p>You’ll land on a page like this.</p>
<p><img src="http://img2.tuicool.com/iyInaqe.png!web" alt=""></p>
<p>Create a new project in Google Developer Console</p>
<p>Select ‘Create a Project’ from the dropdown and then hit the Continue button.</p>
<h4 id="2-Create-Google-Maps-API-Key"><a href="#2-Create-Google-Maps-API-Key" class="headerlink" title="2. Create Google Maps API Key"></a>2. Create Google Maps API Key</h4><p>In the next step (screen), click the ‘Create API Key’ button</p>
<p><img src="http://img1.tuicool.com/qa2am26.png!web" alt=""></p>
<p>Creating new API key…</p>
<h4 id="3-Get-your-generated-API-Key"><a href="#3-Get-your-generated-API-Key" class="headerlink" title="3. Get your generated API Key"></a>3. Get your generated API Key</h4><p>Google now generated your Maps API key. So copy it and paste it in your XML file for the string name ‘google_maps_key’. Replace the ‘YOUR_KEY_HERE’ with your actual API key!</p>
<p>You can optionally set up API Key restrictions if you want (see screenshot above). It’s fairly simple. Click restrictions and you’ll get a screen like this.</p>
<p><img src="http://img2.tuicool.com/bYjABrQ.png!web" alt=""></p>
<p>Generated API key restrictions</p>
<p>Choose ‘Key restriction’ as ‘Android Apps’ and hit Save button. Note that you don’t have to bother about the Package name and SHA-1 certificate fingerprint. You’ll realize that the fingerprint is same as the one in your Android Studio project comments.</p>
<p>In other words, Google took care of that for you too. Sweet? Now let’s move on.</p>
<p>With our API key in place, we’re finally ready to use Google Maps.</p>
<p>But before we get to styling, let’s check if Maps itself works. So run your app and check it out.</p>
<p>It’s always better to test every step of the way. Otherwise, you’ll never know what went wrong where.</p>
<p><img src="http://img1.tuicool.com/FbAniib.png!web" alt=""></p>
<p>NOTE:</p>
<p>Google Maps needs Google Play Services to work. So it’s safe to always run the app on a real device. Or, you can configure and use an AVD that includes Google APIs with Play Services.</p>
<p>Here’s how Google Maps loads on my phone.</p>
<p><img src="http://img1.tuicool.com/3QJrquQ.png!web" alt=""></p>
<p>Default Google Maps – Android</p>
<p>It works just fine. So let’s finally move on to styling it.</p>
<h4 id="Using-Styled-Maps"><a href="#Using-Styled-Maps" class="headerlink" title="Using Styled Maps"></a>Using Styled Maps</h4><p>Google Maps can load styling options via two different formats:</p>
<h4 id="1-–-JSON-file"><a href="#1-–-JSON-file" class="headerlink" title="1 – JSON file"></a>1 – JSON file</h4><p>You load the JSON file in the onMapReady() method.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123;</div><div class="line">    </div><div class="line">try</div><div class="line"> &#123; </div><div class="line">        </div><div class="line">// Customise map styling via JSON file </div><div class="line">boolean</div><div class="line"> success = googleMap.setMapStyle( MapStyleOptions.loadRawResourceStyle( </div><div class="line">this</div><div class="line">, R.raw.style_map_json));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>String resource Using a string resource works in a similar way.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123; </div><div class="line">    </div><div class="line">try</div><div class="line"> &#123; </div><div class="line">        </div><div class="line">// Customise map styling via String resource </div><div class="line">boolean</div><div class="line"> success = googleMap.setMapStyle(</div><div class="line">new</div><div class="line"> MapStyleOptions(getResources() .getString(R.string.style_json)));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Now we know how to load our Map styles. But how do we actually create our style? Let’s look at that next.</p>
<h2 id="Creating-a-Color-Theme-for-Google-Maps"><a href="#Creating-a-Color-Theme-for-Google-Maps" class="headerlink" title="Creating a Color Theme for Google Maps"></a>Creating a Color Theme for Google Maps</h2><p>I’ll put it bluntly. There are two ways you can go about it.</p>
<p>One, write a JSON file. Manually writing every property (do you even know them?).</p>
<p>Or two, using the Map Styling Wizard.</p>
<p>In other words, save yourself time and frustration. Go with the second option. Use the Styling Wizard. It’s a no-brainer. Seriously!</p>
<h3 id="Google-Maps-Styling-Wizard"><a href="#Google-Maps-Styling-Wizard" class="headerlink" title="Google Maps Styling Wizard"></a>Google Maps Styling Wizard</h3><p><img src="http://img0.tuicool.com/If2AZ37.png!web" alt=""></p>
<p>Welcome to Google Maps Styling Wizard</p>
<p>For this part, you just play around with the Styling Wizard. Adjust the density of features depending on how much detail you want on the map. Then select a basic, pre-defined theme to work with. Finally, you can click on ‘MORE OPTIONS’ to alter the properties of each Map object. Trust me, there’s a LOT of things you can customize that it’s easy to get lost.</p>
<p><img src="http://img1.tuicool.com/fqAVJr2.png!web" alt=""></p>
<p>Abundant customization options in Map Styling Wizard</p>
<p>I’ve chosen very light, pastel-like colors for the map. These are colors mainly for the terrain, parks, water and highways.</p>
<p>Once you’re done, click the FINISH button. Next, copy the JSON from the popup that appears.</p>
<p><img src="http://img1.tuicool.com/bi2mIfJ.png!web" alt=""></p>
<p>Auto-generated JSON from Styling Wizard</p>
<p>Head over to your Android Studio project and create a new file under<em>Project/app/src/main/res/raw/<strong>maps.style.json</strong></em>.</p>
<p>This JSON file is where we’ll paste the JSON copied from the Maps Style Wizard. Now all that’s left is to tell Google Maps to load its style from this JSON file.</p>
<p>Remember we spoke about how to do this in the<code>onMapReady()</code>method?</p>
<p>Let me remind you again. Now that we have our JSON file ready, we can call it in like this.</p>
<p>Open<strong>MapsActivity.java</strong>and go to the<code>onMapReady()</code>method. The template has this method already implemented for you.</p>
<p>So with the default template existing, here’s how to load the Styled Map.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public</div><div class="line">void</div><div class="line">onMapReady</div><div class="line">(GoogleMap googleMap)</div><div class="line">&#123; </div><div class="line">    mMap = googleMap;</div><div class="line">    </div><div class="line">try</div><div class="line"> &#123;</div><div class="line">        </div><div class="line">boolean</div><div class="line"> success = mMap.setMapStyle(</div><div class="line">                MapStyleOptions.loadRawResourceStyle(</div><div class="line">                        </div><div class="line">this</div><div class="line">, R.raw.maps_style));</div><div class="line"></div><div class="line">        </div><div class="line">if</div><div class="line"> (!success) &#123;</div><div class="line">            Log.e(TAG, </div><div class="line">&quot;Style parsing failed.&quot;</div><div class="line">);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">catch</div><div class="line"> (Resources.NotFoundException e) &#123;</div><div class="line">        Log.e(TAG, </div><div class="line">&quot;Can&apos;t find style. Error: &quot;</div><div class="line">, e);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It’s actually just one line of code. The try catch block just makes it look verbose.</p>
<p><img src="http://img1.tuicool.com/uABbAfF.png!web" alt=""></p>
<p>With Styled Maps now loaded, run your app and check it.</p>
<h4 id="Styled-Maps-–-Output"><a href="#Styled-Maps-–-Output" class="headerlink" title="Styled Maps – Output"></a>Styled Maps – Output</h4><p>Based on the colors I chose against a Grey- themed Google Map, mine looks like this.</p>
<p><img src="http://img0.tuicool.com/jmaAb2B.png!web" alt=""></p>
<p>My custom styled Google Maps</p>
<p>I changed parks to purple color. Just so I visually know that Styled maps are working. I know it’s an ugly map. But I’m sure you can do better!</p>
<h4 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a>Wrap Up</h4><p>In this Android tutorial, we saw how to Style our default-looking Google Maps.</p>
<p>First, we created an Android Studio project, using the Maps Activity template. We then created an API key to use with Maps.</p>
<p>Next, we used the Maps Styling Wizard to configure Google Maps to our liking. Then, we pasted the generated JSON over to our project. Finally, we told Google Maps to load its styling from that JSON file.</p>
<h4 id="Where-to-from-here"><a href="#Where-to-from-here" class="headerlink" title="Where to from here?"></a>Where to from here?</h4><p>That’s all there is to it! With Styled maps, it is now possible to customize Google Maps to be more relevant to your app color-scheme. No more out-of-place looking Maps. If used properly they can now blend well with your UI designs.</p>
<p>How are you going to customize your map? I’m very interested to see what you’ll come up with. Show me in the comments below.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/b2Mf2qJ" target="_blank" rel="external">http://blog.iamsuleiman.com/styled-google-maps-customize-color-android/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You can now style and customize your Google Maps colors and more. In this Android tutorial, let’s see how we can do that in our apps.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bitwage Officially Launches UK Bitcoin Payroll Services</title>
    <link href="https://gmagon.com/blog/2017/07/03/bitwage-officially-launches-uk-bitcoin-payroll-services/"/>
    <id>https://gmagon.com/blog/2017/07/03/bitwage-officially-launches-uk-bitcoin-payroll-services/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img2.tuicool.com/iYzuUvb.jpg!web" alt=""></p>
<p>After expanding services in Europe earlier this year, bitcoin payroll and wage payment service provider Bitwage announced its official launch in the UK on Monday.</p>
<p><em><strong>Also read:</strong></em><a href="https://news.bitcoin.com/bitwage-launches-new-functionality-european-customers/" target="_blank" rel="external"><em>Bitwage Launches New Functionality for European Customers</em></a></p>
<h2 id="Bitwage’s-Official-Launch-in-the-UK"><a href="#Bitwage’s-Official-Launch-in-the-UK" class="headerlink" title="Bitwage’s Official Launch in the UK"></a>Bitwage’s Official Launch in the UK</h2><p><a href="https://www.bitwage.com/" target="_blank" rel="external">Bitwage</a><img src="http://img2.tuicool.com/BJneqen.png!web" alt="">offers solutions for remote workers to receive wages in a variety of currencies including bitcoin. Using the service, workers can get paid in bitcoin without having to ask each employer to pay in the cryptocurrency or sign up with Bitwage. They simply give the employers Bitwage’s bank account details to receive payments in.</p>
<p>Bitwage claims to have over 13,000 registered workers and have processed over $21.6 million in international wages. Users can invoice employers or clients in the United States (US), United Kingdom (UK), and the European Union (EU). Wages received can be split into any ratio between different bank accounts and bitcoin wallets.</p>
<p>On Monday, the company announced the official launch of their services in the UK, stating:</p>
<p>We are now able to offer workers anywhere in the world the ability to receive wages from companies in the UK through local banking partners. This means that our workers can receive wages through Faster Payments, Bacs, Chaps or Swift into local UK GBP bank accounts.</p>
<h2 id="Bacs-Faster-Payments-and-Chaps-Now-Supported"><a href="#Bacs-Faster-Payments-and-Chaps-Now-Supported" class="headerlink" title="Bacs, Faster Payments, and Chaps Now Supported"></a>Bacs, Faster Payments, and Chaps Now Supported</h2><p>Bitwage founder and president Jonathan Chester told Bitcoin.com that the company has been beta testing this service. He explained that although the ability to receive wages in British pounds (GBP) existed previously, it was not done locally and was never publicly launched. Without local UK partners, the service was not cost-effective. Chester detailed:</p>
<p>Before this, we had a banking partner with GBP correspondent accounts in Ireland that could receive Chaps, but not Faster Payments or Bacs. This was a costly solution for potential clients in the UK, so there was very little usage. We have now been working with these same customers during the beta testing of our new local UK services.</p>
<p><img src="http://img1.tuicool.com/BbIBrau.png!web" alt="">Chaps is the UK’s same-day high-value payment system, currently used by 26 direct participants including the Bank of England and over 5,000 indirect participants. Payments are transferred over Swift and settled intraday in central bank funds. In 2016 Chap’s volumes reached a record 39 million transactions, worth £75.6 trillion.</p>
<p><img src="http://img1.tuicool.com/iyy2mu7.png!web" alt="">Bacs is responsible for the clearing and settlement of UK automated payment methods, direct debit and Bacs direct credit. The company processed 6.22 billion transactions to UK bank accounts in 2016, worth £4.8 trillion. Faster Payments is a UK banking initiative which uses the Bacs system to reduce payment times between different banks’ customer accounts from three working days to a few hours. While Chaps focuses on same-day service for high-value transactions, Faster Payments is tailored to the much larger number of smaller payments.</p>
<h2 id="Bitwage’s-Growing-List-of-Services"><a href="#Bitwage’s-Growing-List-of-Services" class="headerlink" title="Bitwage’s Growing List of Services"></a>Bitwage’s Growing List of Services</h2><p>In April, Bitcoin.comreported on Bitwage launching unique IBANs for users receiving wages in the European Union. With Monday’s launch in the UK, <img src="http://img1.tuicool.com/22QFnyf.jpg!web" alt="">employers can pay in US dollars, British pounds, and euros. In addition, Bitwage can accept Canadian dollars, Australian dollars, Swiss Francs, and Japanese yen.</p>
<p>Payouts to the workers are far more diverse and are done on the same or next day. Currencies supported include bitcoin, ether, and litecoin, as well as the US dollar, the euro, the British pound, the Brazilian Real, the Philippine peso, the Mexican peso, the Argentine peso, the Indian rupee, the Vietnamese dong, the Nigerian naira, and the Ukrainian hryvnia.</p>
<p>Would you use Bitwage to receive your wages? Let us know in the comments section below.</p>
<p>Images courtesy of Shutterstock, Chaps, Bacs, Faster Payments, and Bitwage</p>
<p>Need to calculate your bitcoin holdings? Check our <a href="http://tools.bitcoin.com/" target="_blank" rel="external">tools</a> section.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/iqQfqmi" target="_blank" rel="external">https://news.bitcoin.com/bitwage-launches-uk-bitcoin-payroll-services/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img2.tuicool.com/iYzuUvb.jpg!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;After expanding services in Europe earlier this year, bitcoin payroll a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Beware the cutting edge of web design</title>
    <link href="https://gmagon.com/blog/2017/07/03/beware-the-cutting-edge-of-web-design/"/>
    <id>https://gmagon.com/blog/2017/07/03/beware-the-cutting-edge-of-web-design/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.815Z</updated>
    
    <content type="html"><![CDATA[<p>Progress in web design techniques shows no signs of slowing up. As the proponents of the early web are staggering around with thousand-yard stares, you can’t help but feel a little over-awed by the plethora of techniques and frameworks available nowadays.</p>
<p>People are championing the new approaches that are about to change the way we work once again, such asFlexbox andCSS Grid. Rachel Andrew and Jen Simmons have been encouraging developers to look at these technologies now, in readiness for their arrival.</p>
<p><img src="http://img0.tuicool.com/BzuUvm2.jpg!web" alt=""></p>
<p>Is web design too formulaic, or cutting edge, these days?</p>
<p>Recently, some of the current web industry’s founders – such as Andy Clarke and Jeffrey Zeldman – have asked if it really needs to be this complicated, and whether the web is losing its soul or becoming reliant on a standard output (three-column layouts, hero blocks and the like). Have we all become enslaved to the frameworks and tools available to us?</p>
<p>Although they make a good argument, I don’t think there has been a time where there has been more choice (or opinion) about how to build digital projects. We are long past ‘HTML,CSS and a littleJavaScript’. Now there are CSS preprocessors andJS frameworks, and the components that make up a web project encompass a load of new elements – optimisation, CDN delivery andSEO, to name a few.</p>
<p>An urge to jump into new methods too early can be the worst thing to do on live client work</p>
<p>Sush Kelly</p>
<h3 id="Pioneering-web-tech"><a href="#Pioneering-web-tech" class="headerlink" title="Pioneering web tech"></a>Pioneering web tech</h3><p>The talks and conferences advocate best practices and cutting-edge tech – why we should be using X, Y and Z. This is 100 per cent necessary. After all, the web industry is relatively young and we are still defining the standards of the industry to an extent.</p>
<p>The problem is, those not using these technologies day-to-day in their work can be left feeling inadequate or somehow lacking. It is a lucky few who get to make their living pushing those boundaries and telling us all about them. Don’t get me wrong, it is essential to have these people pushing the bleeding edge, but it can result in an urge to jump into new methods too early, which can be the worst thing to do on live client work.</p>
<p>You want long, productive relationships with clients. Changing how you build sites means having to readjust and remember more skills. As much as good commenting and a README file will help, you need to make sure what you’re delivering will remain effective and usable for as long as possible.</p>
<p>As a digital director at a small creative agency,<a href="https://www.imaginate.uk.com/home" target="_blank" rel="external">Imaginate</a>, it is on my shoulders to make sure we use the right technology on client work and invest our time wisely with regards to what we learn and (in due course) adapt into our processes.</p>
<p>I completely understand how designers and developers want to adopt the next great thing. I feel the same compulsion, and it is actually one of the things that has kept me in the industry so long (since 2000). The fact is that I also have to think about the longevity of the plugin/library/software, because if it doesn’t stand the test of time, or it ends up failing or losing support due to a later development, then the responsibility falls on us.</p>
<h3 id="Educating-junior-web-developers"><a href="#Educating-junior-web-developers" class="headerlink" title="Educating junior web developers"></a>Educating junior web developers</h3><p>Many junior developers have a real thirst for knowledge. It is often an inspiration to more senior team members when they arrive in the studio, eager to show a new method or technique that is emerging and explore how it might be used on a project.</p>
<p>You want your staff to grow, to develop and to be able to work on things together, so again it’s important to make sure that you’re only taking on board advancements that are an improvement on what went before. But when the churn of technology is so quick that we have interns and junior designers who have never had to use a float and do not know life before Bootstrap, it becomes a real balancing act.</p>
<p>A good example of this is the move from LESS to SCSS and also from Grunt to Gulp. Both these technologies are similar, but different enough to mean returning to a project using LESS/Grunt becomes an exercise in re-learning – or in the case of juniors or interns, learning a new (old) technology from scratch.</p>
<h3 id="Website-layout-gambles"><a href="#Website-layout-gambles" class="headerlink" title="Website layout gambles"></a>Website layout gambles</h3><p>Flex and CSS Grids are the current darlings of frontend talk. CSS Grid has the potential to revolutionise the way we will lay websites out in the future. At the moment it is still hidden in the latest browsers, although you can access it if you enable experimental features on the likes of Chrome. We can’t use it in live work for this reason, though with an imminent launch date, Grid could bring about as big a shift in web development practice as the shift from tables to divs and floats.</p>
<p>We are using Flexbox on live work now, but only in ways that are a benefit – for example for ordering content in responsive layouts orvertically centring items. To try to use Flexbox for a full site at the moment, with iOS and Safari’s flaky support, would be a challenge that just may not be financially viable. </p>
<h3 id="Embracing-the-old-browsers"><a href="#Embracing-the-old-browsers" class="headerlink" title="Embracing the old browsers"></a>Embracing the old browsers</h3><p>Clients, especially within larger companies, likely won’t be running the latest browsers. They could also have restrictions on their web access that could affect your build. And if it turns out the main stakeholder is using IE on an old laptop, the site better work on it or the project just won’t get signed off.</p>
<p>Sometimes a client will have a good idea of what they want, or specify an incumbent system or technology that you need to work with. A key point for us as an agency is to be adaptive to these needs and to work with them, rather than dismissing what the client has and trying to force them down the route we would prefer. Sometimes this may mean having to extend an existing codebase in order to keep within the technology required.</p>
<p>When embarking on a new project, we now make sure we establish the required sign-off devices as soon as possible. However, over the years have had our fingers burnt on more than one occasion, when we have run with a new way of doing something with good intentions, only for it to cause issues as we tried to get the site signed off. This just serves to remind us that there are so many device/user combos that it just isn’t OK if a given method will only work on certain browsers.</p>
<p>Although you can make workarounds and shims, there often isn’t budget to do this. And when a client doesn’t have the right resources then you need to go with the solution that will please everyone.</p>
<p>When it comes down to it, the main aim of the studio is to produce great, forward-thinking work, which means being fully open to new methods but also picking the right time and project to use them. It is a tricky balancing act, but one that gives me a great feeling of satisfaction, especially when a new process finally becomes ‘the standard’ on live projects.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/AJbi63b" target="_blank" rel="external">http://www.creativebloq.com/advice/beware-the-cutting-edge-of-web-design</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Progress in web design techniques shows no signs of slowing up. As the proponents of the early web are staggering around with thousand-ya
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A New Way to Reuse DataWeave Functions and Variables in Mule Flows</title>
    <link href="https://gmagon.com/blog/2017/07/03/a-new-way-to-reuse-dataweave-functions-and-variables-in-mule-flows/"/>
    <id>https://gmagon.com/blog/2017/07/03/a-new-way-to-reuse-dataweave-functions-and-variables-in-mule-flows/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.804Z</updated>
    
    <content type="html"><![CDATA[<p>A New Dataweave Function Makes It Easier for You to Store, Reuse, and Share Dataweave Functions Between Flows and Mule Applications.</p>
<h2 id="Reusing-Dataweave-Code"><a href="#Reusing-Dataweave-Code" class="headerlink" title="Reusing Dataweave Code"></a>Reusing Dataweave Code</h2><p><a href="http://www.mulesoft.com/" target="_blank" rel="external">MuleSoft’s</a><a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/dataweave" target="_blank" rel="external">DataWeave</a>technology is a powerful and efficient way to transform complex structured data between popular data formats, including JSON, XML, CSV, and Java objects.</p>
<p>I’m a courseware developer and trainer at<a href="http://www.mulesoft.com/" target="_blank" rel="external">MuleSoft</a>, and recently I’ve been spending a lot of time learning about DataWeave.</p>
<p>In the<a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/dataweave" target="_blank" rel="external">DataWeave</a>1.x version included in the Mule runtime v3.8, there has been limited support for reusing DataWeave functions and variables between Transform Message components (the component that applies DataWeave code). In particular, there is currently no direct support for importing modules or libraries of DataWeave code. But starting with Mule Runtime v3.8.4 there is a new<code>readUrl</code>function you can now use to start reusing DataWeave code across applications and even across deployments.</p>
<p>In this post, you’ll learn how to use the new<code>readUrl</code>function to separate out reusable DataWeave code, and then reuse that code between multiple Transform Message components and flows, including flows in separate applications and MUnit flows. This is a nice new tool to add to your DataWeave tool box.</p>
<h2 id="Creating-a-Mule-Project-With-Reusable-Dataweave-Library-Files"><a href="#Creating-a-Mule-Project-With-Reusable-Dataweave-Library-Files" class="headerlink" title="Creating a Mule Project With Reusable Dataweave Library Files"></a>Creating a Mule Project With Reusable Dataweave Library Files</h2><p>An example Mule project is available in this<a href="https://github.com/ethanport/dataweave-reuse" target="_blank" rel="external">GitHub repository</a>. You can import this project into the latest Anypoint Studio to follow along with this post. Alternatively, you can create a new Mule project in Anypoint Studio and copy the examples from this blog post.</p>
<p>This project has added a folder named<code>dw</code>to<code>src/main/resources</code>, and then created a file named<code>myLib.wev</code>inside the<code>dw</code>folder. When this Mule project is exported as a deployable archive file, all the files in<code>src/main/resources</code>will be automatically added to the project’s classes folder, so will be in the classpath when the Mule application is deployed to a Mule runtime. In this sample project, the HTTP listener is listening for requests on port 8081.</p>
<p><img src="http://img0.tuicool.com/niUVRva.jpg!web" alt=""></p>
<h2 id="Coding-the-Reusable-Dataweave-File"><a href="#Coding-the-Reusable-Dataweave-File" class="headerlink" title="Coding the Reusable Dataweave File"></a>Coding the Reusable Dataweave File</h2><p>The myLib.wev file contains some reusable variables and functions.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">%dw 1.0</div><div class="line"></div><div class="line">//Reusable constant</div><div class="line">%var exchangeRateFromUSDToBritishPounds = 1.35</div><div class="line"></div><div class="line">%function convertPriceFromUSDToBritishPounds ( input )</div><div class="line">//Can </div><div class="line">use</div><div class="line"> the getIntroString() </div><div class="line">function</div><div class="line"> which </div><div class="line">is</div><div class="line"> defined further down</div><div class="line"></div><div class="line">&quot;$(getIntroString()) :  $(input * exchangeRateFromUSDToBritishPounds)&quot;</div><div class="line"></div><div class="line"></div><div class="line">%</div><div class="line">function</div><div class="line"> getIntroString()</div><div class="line"></div><div class="line">&quot;The price converted to British Pounds is&quot;</div><div class="line">---</div><div class="line"></div><div class="line">//Provide </div><div class="line">external</div><div class="line">names</div><div class="line">for</div><div class="line">variables</div><div class="line">and</div><div class="line"> functions defined </div><div class="line">in</div><div class="line"> the header</div><div class="line">&#123;</div><div class="line">  exchangeRate : exchangeRateFromUSDToBritishPounds,</div><div class="line"></div><div class="line">  convertPrice : convertPriceFromUSDToBritishPounds,</div><div class="line"></div><div class="line">  //</div><div class="line">Use</div><div class="line"> an anonymous lambda </div><div class="line">to</div><div class="line">define</div><div class="line"> the </div><div class="line">function</div><div class="line"></div><div class="line">  formatString : (aString, formatter) -</div><div class="line">&gt;</div><div class="line"> formatter(aString)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The body expression creates key names for the variables and functions. The<code>exchangeRate</code>key has as value the variable<code>exchangeRateFromUSDToBritishPounds</code>. This variable acts as a constant in other DataWeave functions.</p>
<p>The<code>convertPrice</code>key references the more lengthy function name<code>convertPriceFromUSDToBritishPounds</code>. This function requires a parameter, which is used in the function’s expression to print out the String returned from the later<code>getIntroString()</code>function, plus the result of multiplying the<code>input</code>value by the<code>exchangeRateFromUSDToBritishPounds</code>variable.</p>
<p>The<code>formatString</code>key is different from the other two keys in the body expression. The<code>formatString</code>key has a value which is an anonymous function implementation. These types of unnamed functions are also called lambdas. The lambda requires two input parameters. The first parameter labeled<code>aString</code>is supplied to the<code>formatString</code>function with any string value, which then has the<code>formatter</code>function applied to<code>aString</code>.</p>
<p>Next, you will see how to use these functions, including<code>formatString</code>, in a DataWeave flow.</p>
<h2 id="Reading-in-and-Using-an-External-Dataweave-File"><a href="#Reading-in-and-Using-an-External-Dataweave-File" class="headerlink" title="Reading in and Using an External Dataweave File"></a>Reading in and Using an External Dataweave File</h2><p>The next step is to read in this external DataWeave file and use it in a Transform Message component. The first step is to use the new readUrl function to read in the DataWeave function from the classpath. Define a variable<code>myLib</code>as a reference to the DataWeave file<code>myLib.wev</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">%dw</div><div class="line">1.0</div><div class="line">%output</div><div class="line"> application/json</div><div class="line"></div><div class="line"></div><div class="line">%var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>In this example, we are embedding the DataWeave library file inside the project, so we give the URL relative to the classpath<code>dw/myLib.wev</code>. If you are deploying into a customer-hosted on-prem Mule runtime, you could also store your DataWeave libraries in a common external location that you add to the Mule runtime’s classpath.</p>
<p>Note: This is a similar technique to the way you can store Mule application properties files in an external location. You can learn more about this technique in the Anypoint<a href="https://docs.mulesoft.com/mule-user-guide/v/3.8/configuring-properties" target="_blank" rel="external">product documentation</a>, or<a href="https://wrapper.tanukisoftware.com/doc/english/props-envvars.html#definition" target="_blank" rel="external">Tanuki Java Service Wrapper</a>documentation.</p>
<p>Like the related read() function, readUrl() can also include a second parameter to specify the mime type, such as<code>application/java</code>,<code>application/json</code>,<code>application/csv</code>, or<code>application/xml</code>. When not specified, the default mime type is<code>application/dw</code>. So in this example, we could also have written:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">%dw</div><div class="line">1.0</div><div class="line">%output</div><div class="line"> application/json</div><div class="line"></div><div class="line"></div><div class="line">%var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">, </div><div class="line">&quot;application/dw&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>In Anypoint Studio, the file is stored in<code>src/main/resources</code>, but in the deployable archive, all the files from the<code>src/main/resources</code>folder are moved into the<code>classes</code>folder.</p>
<p>Here is a complete Transform Message component in the convertPrice flow:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">%dw </div><div class="line">1.0</div><div class="line"></div><div class="line"></div><div class="line">%output application/json</div><div class="line"></div><div class="line">%</div><div class="line">var</div><div class="line"> myLib = readUrl(</div><div class="line">&quot;classpath://dw/myLib.wev&quot;</div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line">//Access functions in the myLib reference</div><div class="line"></div><div class="line">%</div><div class="line">function</div><div class="line">printPrice</div><div class="line">(priceInUSD)</div><div class="line">myLib</div><div class="line">.</div><div class="line">formatString</div><div class="line">( myLib.convertPrice</div><div class="line">(priceInUSD)</div><div class="line">, </div><div class="line">(price)</div><div class="line"> -</div><div class="line">&gt;</div><div class="line"> upper price )</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">&#123; </div><div class="line">  </div><div class="line">//Format the key</div><div class="line"></div><div class="line">  ( </div><div class="line">    myLib.formatString( </div><div class="line">&quot;result&quot;</div><div class="line">, (aString) -</div><div class="line">&gt;</div><div class="line"> capitalize aString ) </div><div class="line">  ) : </div><div class="line"></div><div class="line">  </div><div class="line">//Format the value - read in the input price as an HTTP query param</div><div class="line"></div><div class="line">  printPrice( inboundProperties.</div><div class="line">&apos;http.query.params&apos;</div><div class="line">.price )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Previewing-and-Testing-Dataweave-Code-That-Uses-External-Dataweave-Library-Files"><a href="#Previewing-and-Testing-Dataweave-Code-That-Uses-External-Dataweave-Library-Files" class="headerlink" title="Previewing and Testing Dataweave Code That Uses External Dataweave Library Files"></a>Previewing and Testing Dataweave Code That Uses External Dataweave Library Files</h2><p>You can preview example data transformations using the Preview pane in the Transform Message component editor. In the Transform Message component, in the left-side Input pane, right click on Inbound Properties &gt; http.query.params.</p>
<p><img src="http://img1.tuicool.com/bUNrIrV.jpg!web" alt=""></p>
<p>Set an example price:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">%dw </div><div class="line">1.0</div><div class="line"></div><div class="line">%output application/java</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">price:</div><div class="line">600</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In the right-side Output pane, select the Preview button, which opens the Preview pane. In the Preview pane, you should see the result of the body expression.</p>
<p><img src="http://img1.tuicool.com/E73UZrU.jpg!web" alt=""></p>
<p>Change the price from 600 to 500 and verify the output in the Preview pane also changes. This shows you that you can preview live changes to DataWeave code, even when you are reading in external DataWeave files.</p>
<p>Here is the entire<strong>reuseDataWeaveCode.</strong>xmlfile<strong>:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">&lt;</div><div class="line">?</div><div class="line">xml version=</div><div class="line">&quot;1.0&quot;</div><div class="line"> encoding=</div><div class="line">&quot;UTF-8&quot;</div><div class="line">?</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">mule</div><div class="line">xmlns:tracking</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/ee/tracking&quot;</div><div class="line">xmlns:dw</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/ee/dw&quot;</div><div class="line">xmlns:http</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/http&quot;</div><div class="line">xmlns</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/core&quot;</div><div class="line">xmlns:doc</div><div class="line">=</div><div class="line">&quot;http://www.mulesoft.org/schema/mule/documentation&quot;</div><div class="line">xmlns:spring</div><div class="line">=</div><div class="line">&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">xmlns:xsi</div><div class="line">=</div><div class="line">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation</div><div class="line">=</div><div class="line">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd</div><div class="line">http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">http:listener-config</div><div class="line">name</div><div class="line">=</div><div class="line">&quot;HTTP_Listener_Configuration&quot;</div><div class="line">host</div><div class="line">=</div><div class="line">&quot;0.0.0.0&quot;</div><div class="line">port</div><div class="line">=</div><div class="line">&quot;8081&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;HTTP Listener Configuration&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">flow</div><div class="line">name</div><div class="line">=</div><div class="line">&quot;convertPrice&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">http:listener</div><div class="line">config-ref</div><div class="line">=</div><div class="line">&quot;HTTP_Listener_Configuration&quot;</div><div class="line">path</div><div class="line">=</div><div class="line">&quot;/&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;HTTP&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:transform-message</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;Transform Message&quot;</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:input-inbound-property</div><div class="line">doc:sample</div><div class="line">=</div><div class="line">&quot;sample_data/map_string_string.dwl&quot;</div><div class="line">propertyName</div><div class="line">=</div><div class="line">&quot;http.query.params&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">dw:set-payload</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">![CDATA[%dw 1.0</div><div class="line">%var myLib = readUrl(&quot;classpath://dw/myLib.wev&quot;)</div><div class="line"></div><div class="line">%output application/json</div><div class="line"></div><div class="line">%function printPrice(priceInUSD)</div><div class="line">myLib.formatString( myLib.convertPrice(priceInUSD), (price) -</div><div class="line">&gt;</div><div class="line"> upper price )</div><div class="line"></div><div class="line">%function headerString ()</div><div class="line">&quot;the price2&quot;</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line"></div><div class="line">&#123; </div><div class="line">  //format the key</div><div class="line">  (myLib.formatString( &quot;result&quot;, (aString) -</div><div class="line">&gt;</div><div class="line"> capitalize aString )) : </div><div class="line"></div><div class="line">  //Read in the input price as an HTTP query param</div><div class="line">  printPrice(inboundProperties.&apos;http.query.params&apos;.price)</div><div class="line">&#125;</div><div class="line">]]</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">dw:set-payload</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">dw:transform-message</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">logger</div><div class="line">level</div><div class="line">=</div><div class="line">&quot;INFO&quot;</div><div class="line">doc:name</div><div class="line">=</div><div class="line">&quot;Logger&quot;</div><div class="line">message</div><div class="line">=</div><div class="line">&quot;#[message.payload]&quot;</div><div class="line"> /</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">flow</div><div class="line">&gt;</div><div class="line">&lt;</div><div class="line">/</div><div class="line">mule</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h2 id="Deploying-and-Testing-the-Application"><a href="#Deploying-and-Testing-the-Application" class="headerlink" title="Deploying and Testing the Application"></a>Deploying and Testing the Application</h2><p>Deploy the reuseDataWeaveCode project to a Mule runtime. For example, here I am deploying the project to an Anypoint Platform account from Anypoint Studio.</p>
<p><img src="http://img1.tuicool.com/YBJFRvF.jpg!web" alt=""></p>
<p>In this example, I deployed the application to a public Anypoint Platform URL<a href="http://reuse-dataweave-code.cloudhub.io/" target="_blank" rel="external">http://reuse-dataweave-code.cloudhub.io</a>.</p>
<p>After the application deploys, open a web client (you can use a web browser), and make a GET request to the HTTP listener. If you deployed to a Mule runtime on your local machine, the URL is<code>http://localhost:8081?price=300</code>. For my CloudHub deployment, I’ll make requests from a web client to<code>http://reuse-dataweave-code.cloudhub.io/?price=700</code>. You can click this URL now to try it out.</p>
<p>My web browser has a JSON parser extension and shows this response:</p>
<p><img src="http://img2.tuicool.com/iiyY7rj.jpg!web" alt=""></p>
<p>As you build up more complex DataWeave transformation for your projects, you’ll want to reuse some of your transformation logic. Today, you can do this using the readUrl() function. Please let us know what you think of this feature, and also let us know what additional modularity you’d like to see in future releases.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/bYBzUbZ" target="_blank" rel="external">https://dzone.com/articles/reusing-dataweave-functions-and-variable-in-mule-f</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A New Dataweave Function Makes It Easier for You to Store, Reuse, and Share Dataweave Functions Between Flows and Mule Applications.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Better Software Design with Clean Architecture</title>
    <link href="https://gmagon.com/blog/2017/07/03/better-software-design-with-clean-architecture/"/>
    <id>https://gmagon.com/blog/2017/07/03/better-software-design-with-clean-architecture/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img1.tuicool.com/vqIfaeY.png!web" alt=""></p>
<p>Have you ever produced code that:</p>
<ul>
<li>was bug laden</li>
<li>was painful to debug or enhance with new features</li>
<li>was hard/impossible to test without things like a database or web server</li>
<li>had presentation logic mixed with business logic or business logic mixed in with data access logic (sql)</li>
<li>was hard for other developers to understand because it did not clearly express its intent or purpose within the application it was written for</li>
</ul>
<p>I know I have. Over time I learned about the various<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="external">Gang of Four</a>patterns and made a conscious effort to keep the<a href="https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29" target="_blank" rel="external">SOLID</a>principles running on a background thread in my mind as I wrote code. While these ideas certainly helped mitigate the problems listed above, they didn’t eliminate them. When writing web or desktop software using MVC or MVVM I still found some of the same old symptoms showing up in my projects. Things like business logic leaking into controllers, entity models being used all over the place for different purposes and large regions of the code that had no unit test coverage because they had some sort of direct dependency on a database or http client.</p>
<p>Get notified on new posts</p>
<p>Straight from me, no spam, no bullshit. Frequent, helpful, email-only content.</p>
<h2 id="The-answer"><a href="#The-answer" class="headerlink" title="The answer"></a>The answer</h2><p>One day, a colleague sent around<a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">this link</a>introducing<strong>The Clean Architecture</strong>by Uncle Bob. It resonated with me instantly as it presented a solution for the same problems I was seeing. The best part, there’s nothing mystical or complicated about Clean Architecture - it is a relatively simple and practical architecture template that can be applied to many application domains if you choose to follow just a few of its basic rules.</p>
<h2 id="How-Clean-Architecture-works"><a href="#How-Clean-Architecture-works" class="headerlink" title="How Clean Architecture works"></a>How Clean Architecture works</h2><p>The key rule behind Clean Architecture is:<strong>The Dependency Rule</strong>. The gist of this is simply that dependencies are encapsulated in each “ring” of the architecture model and these dependencies can only point inward.</p>
<p><img src="http://img1.tuicool.com/U3MBbem.jpg!web" alt=""></p>
<p>Clean Architecture keeps details like web frameworks and databases in the outer layers while important business rules and policies are housed in the inner circles and have no knowledge of anything outside of themselves. Considering this, you can start to see how it achieves a very_clean_separation of concerns. By ensuring your business rules and core domain logic in the inner circles are completely devoid of any external dependencies or 3rd party libraries means they must be expressed using pure C# POCO classes which makes testing them much easier.</p>
<p>In fact your business rules simply don’t know anything at all about the outside world.</p>
<p>There are a few other important concepts that I’m going to highlight along the way with an example below but if you’re interested in just the theory please go check out<a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">Uncle Bob’s original post introducing Clean Architecture</a>.</p>
<h3 id="Implementing-the-“Course-Registration”-use-case"><a href="#Implementing-the-“Course-Registration”-use-case" class="headerlink" title="Implementing the “Course Registration” use case"></a>Implementing the “Course Registration” use case</h3><p>Let’s see how this works using a real-world use case. For the folks doing agile scrum, I realize a use case is not the most fashionable way to describe a requirement. But for this post, it’s perfect because I’d like to show how all the details of the use case can be modeled within clean architecture. A user story would simply be too vague.</p>
<p>I’ve typed out the entire use case here for reference so you don’t need to digest the whole thing right now. We’ll cover its aspects below in detail as we walk through implementing it using clean architecture.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Title</th>
<th style="text-align:left">Register for courses</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Description</td>
<td style="text-align:left">Student accesses the system and views the courses currently available for him to register. Then he selects the courses and registers for them.</td>
</tr>
<tr>
<td style="text-align:left">Primary Actor</td>
<td style="text-align:left">Student</td>
</tr>
<tr>
<td style="text-align:left">Preconditions</td>
<td style="text-align:left">Student is logged into systemStudent has not previously enrolled or registeredStudent cannot register within 5 days of course start date</td>
</tr>
<tr>
<td style="text-align:left">Postconditions</td>
<td style="text-align:left">Student is registered for courses</td>
</tr>
<tr>
<td style="text-align:left">Main Success Scenario</td>
<td style="text-align:left">Student selects “Register New Courses” from the menu.System displays list of courses available for registering.Student selects one or more courses he wants to register for.Student clicks “Submit” button.System registers student for the selected courses and displays a confirmation message.</td>
</tr>
<tr>
<td style="text-align:left">Extensions</td>
<td style="text-align:left">(2a) No courses are available for this student.System displays error message saying no courses are available, and provides the reason &amp; how to rectify if possible.Student either backs out of this use case, or tries again after rectifying the cause.(5a) Some courses could not be registered.System displays message showing which courses were registered, and which courses were not registered along with a reason for each failure.(5b) None of the courses could be registered.System displays message saying none of the courses could be registered, along with a reason for each failure.</td>
</tr>
</tbody>
</table>
<p>This is a simple use case allowing a student to register for one or more classes and then returning either a success or error result to notify her of the outcome. We’ll use clean architecture to write this use case in a fashion that meets the goals and avoids the problems I mentioned in the intro.</p>
<h3 id="Creating-the-Entities"><a href="#Creating-the-Entities" class="headerlink" title="Creating the Entities"></a>Creating the Entities</h3><p>Entities are the heart of clean architecture and contain any_enterprise-wide_business rules and logic. Now, you might not be working in the context of an_enterprise_and that’s perfectly fine. If you’re writing a standalone application Uncle Bob suggests simply referring to these as Business Objects. The key is that they contain rules that are not<em>application specific</em>- so basically any global or shareable logic that could be reused in other applications should be encapsulated in an entity.</p>
<p>Inspecting our use case there are 2 entities we need:<code>Student</code>and<code>Course</code>.</p>
<p>Using aTDD approach I wrote a couple of tests and just enough code in the<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/Entities/Student.cs" target="_blank" rel="external">Student entity class</a>to get them passing.</p>
<p>The<code>RegisterForCourse()</code>method implements 2 rules from our use case.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">Student</div><div class="line"> : </div><div class="line">EntityBase</div><div class="line"></div><div class="line">&#123;</div><div class="line">   </div><div class="line">public</div><div class="line">string</div><div class="line"> FirstName &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line">string</div><div class="line"> LastName &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line"> IList</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"> RegisteredCourses &#123; </div><div class="line">get</div><div class="line">; &#125;</div><div class="line">   </div><div class="line">public</div><div class="line"> IList</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"> EnrolledCourses &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">set</div><div class="line">; &#125;</div><div class="line"></div><div class="line">   </div><div class="line">public</div><div class="line">Student</div><div class="line">(</div><div class="line">)</div><div class="line">   </div><div class="line">&#123;</div><div class="line">      RegisteredCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line">();</div><div class="line">      EnrolledCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line">();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">public</div><div class="line">bool</div><div class="line">RegisterForCourse</div><div class="line">(</div><div class="line">Course course</div><div class="line">)</div><div class="line">   </div><div class="line">&#123;</div><div class="line">      </div><div class="line">// student has not previously enrolled</div><div class="line">if</div><div class="line"> (EnrolledCourses.Any(ec =</div><div class="line">&gt;</div><div class="line"> ec.Code == course.Code)) </div><div class="line">return</div><div class="line">false</div><div class="line">;</div><div class="line"></div><div class="line">      </div><div class="line">// registration cannot occur with 5 days of course start date</div><div class="line">if</div><div class="line"> (DateTime.UtcNow </div><div class="line">&gt;</div><div class="line"> course.StartDate.AddDays(</div><div class="line">-5</div><div class="line">)) </div><div class="line">return</div><div class="line">false</div><div class="line">;</div><div class="line"></div><div class="line">      RegisteredCourses.Add(course);</div><div class="line">      </div><div class="line">return</div><div class="line">true</div><div class="line">;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">[Fact]</div><div class="line"></div><div class="line">public</div><div class="line">void</div><div class="line">CannotRegisterForCourseWithin5DaysOfStartDate</div><div class="line">(</div><div class="line">)</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">// arrange</div><div class="line">var</div><div class="line"> student = </div><div class="line">new</div><div class="line"> Student();</div><div class="line">  </div><div class="line">var</div><div class="line"> course = </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Biology II&quot;</div><div class="line">, StartDate = DateTime.UtcNow.AddDays(+</div><div class="line">3</div><div class="line">) &#125;;</div><div class="line"></div><div class="line">  </div><div class="line">// act</div><div class="line">var</div><div class="line"> result = student.RegisterForCourse(course);</div><div class="line"></div><div class="line">  </div><div class="line">// assert</div><div class="line"></div><div class="line">  Assert.False(result);</div><div class="line">&#125;</div><div class="line"></div><div class="line">[Fact]</div><div class="line"></div><div class="line">public</div><div class="line">void</div><div class="line">CannotRegisterForCourseAlreadyEnrolledIn</div><div class="line">(</div><div class="line">)</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">// arrange</div><div class="line">var</div><div class="line"> student = </div><div class="line">new</div><div class="line"> Student</div><div class="line">  &#123;</div><div class="line">     EnrolledCourses = </div><div class="line">new</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">Course</div><div class="line">&gt;</div><div class="line"></div><div class="line">     &#123;</div><div class="line">       </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Biology II&quot;</div><div class="line"> &#125;,</div><div class="line">       </div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;MATH-4067EL&quot;</div><div class="line">, Name = </div><div class="line">&quot;Mathematical Theory of Dynamical Systems, Chaos and Fractals&quot;</div><div class="line"> &#125;</div><div class="line">             &#125;</div><div class="line">     &#125;;</div><div class="line"></div><div class="line"> </div><div class="line">// act</div><div class="line">var</div><div class="line"> result = student.RegisterForCourse(</div><div class="line">new</div><div class="line"> Course &#123; Code = </div><div class="line">&quot;BIOL-1507EL&quot;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> </div><div class="line">// assert</div><div class="line"></div><div class="line"> Assert.False(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><p>Moving up from the entities we have the_Use Case_layer. The classes that live here have a few unique features and responsibilities:</p>
<ul>
<li>Contain the<br><em>application specific</em><br>business rules</li>
<li>Encapsulate and implement all of the use cases of the system. A good rule to start with is a class per use case</li>
<li>Orchestrate the flow of data to and from the entities, and can rely on their business rules to achieve the goals of the use case</li>
<li>Have NO dependency and are totally isolated from things like a database, UI or special frameworks</li>
<li>Will almost certainly require refactoring if details of the use case requirements change</li>
</ul>
<p>Use case classes are typically suffixed with the word<strong>Interactor</strong>. Uncle Bob mentions in<a href="https://www.youtube.com/watch?v=0oGpWmS0aYQ" target="_blank" rel="external">this talk</a>that he considered calling them controllers but assumed this would be too easily confused with MVC so Interactor it is!</p>
<p>Our use case is modelled in<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/UseCases/RequestCourseRegistrationInteractor.cs" target="_blank" rel="external">RequestCourseRegistrationInteractor.cs</a>.</p>
<p>There are a few important aspects of the use case class I’d like to highlight.</p>
<p>First off, it implements the<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/Contracts/IRequestHandler.cs" target="_blank" rel="external">IRequestHandler</a>interface. This interface is an example of the<a href="http://www.dofactory.com/net/mediator-design-pattern" target="_blank" rel="external">mediator pattern</a>which dictates that implementors will work with a certain request and response object in a loosely coupled fashion.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public </div><div class="line">class</div><div class="line">RequestCourseRegistrationInteractor</div><div class="line"> : </div><div class="line">IRequestHandler</div><div class="line">&lt;</div><div class="line">CourseRegistrationRequestMessage, </div><div class="line">CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>There is a single<code>TResponse Handle(TRequest message)</code>method defined on the interface which essentially performs_all the work_of our use case. Pretty simple huh?_Handle()_takes a request object as its lone parameter which will typically contain any data passed in from the outer layer (the UI) and returns a response message with both types dictated by the<code>IRequestHandler</code>interface. All of our_application specific_logic for the use case will go into this method.</p>
<p>One key aspect of the request/response messages that flow in and out of use case interactors and across boundaries is that they are simple data structures meaning they contain no special types: ie. entities, or types provided by 3rd party libs etc. - they are pure C# objects.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line"> CourseRegistrationRequestMessage : IRequest</div><div class="line">&lt;</div><div class="line">CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">public</div><div class="line">int</div><div class="line"> StudentId &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">private</div><div class="line">set</div><div class="line">; &#125;</div><div class="line">  </div><div class="line">public</div><div class="line"> List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> SelectedCourseCodes &#123; </div><div class="line">get</div><div class="line">; </div><div class="line">private</div><div class="line">set</div><div class="line">; &#125;</div><div class="line"></div><div class="line">  </div><div class="line">public</div><div class="line"> CourseRegistrationRequestMessage(</div><div class="line">int</div><div class="line"> studentId,List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> selectedCourseCodes)</div><div class="line">  &#123;</div><div class="line">    StudentId = studentId;</div><div class="line">    SelectedCourseCodes = selectedCourseCodes;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The_CourseRegistrationRequest_object consists of only a StudentId and a list of selected course codes selected by the user.</p>
<p>Here’s the full implementation of<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.Core/UseCases/RequestCourseRegistrationInteractor.cs" target="_blank" rel="external">RequestCourseRegistrationInteractor.cs</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">RequestCourseRegistrationInteractor</div><div class="line"> : </div><div class="line">IRequestHandler</div><div class="line">&lt;</div><div class="line">CourseRegistrationRequestMessage, CourseRegistrationResponseMessage</div><div class="line">&gt;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly IStudentRepository _studentRepository;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly ICourseRepository _courseRepository;</div><div class="line">  </div><div class="line">private</div><div class="line"> readonly IAuthService _authService;</div><div class="line">  </div><div class="line">public</div><div class="line"> RequestCourseRegistrationInteractor(IAuthService authService, IStudentRepository studentRepository, ICourseRepository courseRepository)</div><div class="line">  &#123;</div><div class="line">    _authService = authService;</div><div class="line">    _studentRepository = studentRepository;</div><div class="line">    _courseRepository = courseRepository;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">public</div><div class="line"> CourseRegistrationResponseMessage Handle(CourseRegistrationRequestMessage message)</div><div class="line">&#123;</div><div class="line">   </div><div class="line">// student must be logged into system</div><div class="line">if</div><div class="line"> (!_authService.IsAuthenticated())</div><div class="line">   &#123;</div><div class="line">     </div><div class="line">return</div><div class="line"> new CourseRegistrationResponseMessage(</div><div class="line">false</div><div class="line">,</div><div class="line">null</div><div class="line">,</div><div class="line">&quot;Operation failed, not authenticated.&quot;</div><div class="line">);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">// get the student</div><div class="line">var</div><div class="line"> student = _studentRepository.GetById(message.StudentId);</div><div class="line"></div><div class="line">   </div><div class="line">// save off any failures</div><div class="line">var</div><div class="line"> errors = new List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line">();</div><div class="line"></div><div class="line">   foreach (</div><div class="line">var</div><div class="line"> c </div><div class="line">in</div><div class="line"> message.SelectedCourseCodes)</div><div class="line">   &#123;</div><div class="line">     </div><div class="line">var</div><div class="line"> course = _courseRepository.GetByCode(c);</div><div class="line"></div><div class="line">     </div><div class="line">if</div><div class="line"> (!student.RegisterForCourse(course))</div><div class="line">     &#123;</div><div class="line">         errors.Add($</div><div class="line">&quot;unable to register for &#123;course.Code&#125;&quot;</div><div class="line">);</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   _studentRepository.Save(student);</div><div class="line">   </div><div class="line">return</div><div class="line"> new CourseRegistrationResponseMessage(!errors.Any(), errors);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note the use of<code>_authService</code>,<code>_studentRepository</code>and<code>_courseRepository</code>. These services are typically referred to as_Gateways_within clean architecture and get injected into the Use Case layer as per the dependency rule. These are the things that deal with the database, rest services or other external agencies and their implementation belongs in the_Interface Adapters_layer. Interactors only know_what_behavior these gateways offer by way of their interface definition. They have no idea_how_they do their work because those details are encapsulated in an outer layer which the Use Cases know nothing about.</p>
<h3 id="Interface-Adapters"><a href="#Interface-Adapters" class="headerlink" title="Interface Adapters"></a>Interface Adapters</h3><p>The purpose of the interface adapter layer is to act as a connector between the business logic in our interactors and our framework-specific code. For example, in an ASP.Net MVC app, this is where the models, views, and controllers live. Gateways like services and repositories are also implemented here.</p>
<p>It is this layer, for example, that will wholly contain the MVC architecture of a GUI. The Presenters, Views, and Controllers all belong in here.</p>
<p>Also in this layer is any other adapter necessary to convert data from some external form, such as an external service, to the internal form used by the use cases and entities.</p>
<p>In this example I’m using a basic console app to consume my use case so this serves as my interface adapter layer. It contains the concrete implementations of the required<a href="https://github.com/mmacneil/CleanArchitecture/tree/master/CleanArchitecture.ConsoleApp/Gateways" target="_blank" rel="external">Gateways</a>and has<a href="https://github.com/mmacneil/CleanArchitecture/tree/master/CleanArchitecture.ConsoleApp/Presentation" target="_blank" rel="external">Presentation</a>logic to format the response from the Use Case into something friendly for the UI.</p>
<p>In the Main() method we can see the usage of calling the use case and presenting the results.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">**</div><div class="line">// Here we&apos;re connecting our app framework layer with our Use Case Interactors</div><div class="line">// This would typically go in a Controller Action in an MVC context or ViewModel in MVVM etc.</div><div class="line">//</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">**</div><div class="line">// 1. instantiate Course Registration Use Case injecting Gateways implemented in this layer</div><div class="line">var courseRegistraionRequestUseCase = new RequestCourseRegistrationInteractor(authService, studentRepository, courseRepository);</div><div class="line"></div><div class="line">// 2. create the request message passing with the target student id and a list of selected course codes </div><div class="line">var useCaseRequestMessage = new CourseRegistrationRequestMessage(1, new List</div><div class="line">&lt;</div><div class="line">string</div><div class="line">&gt;</div><div class="line"> &#123; userInput.ToUpper() &#125;);</div><div class="line"></div><div class="line">// 3. call the use case and store the response</div><div class="line">var responseMessage = courseRegistraionRequestUseCase.Handle(useCaseRequestMessage);</div><div class="line"></div><div class="line">// 4. use a Presenter to convert the use case response to a user friendly ViewModel</div><div class="line">var courseRegistraionResponsePresenter = new CourseRegistrationRequestResponsePresenter();</div><div class="line">var vm = courseRegistraionResponsePresenter.Handle(responseMessage);</div><div class="line"></div><div class="line">Console.Clear();</div><div class="line"></div><div class="line">// render results</div><div class="line"></div><div class="line">if (vm.Success)</div><div class="line">&#123;</div><div class="line">  Console.BackgroundColor = ConsoleColor.DarkGreen;</div><div class="line">  Console.ForegroundColor = ConsoleColor.White;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">  Console.BackgroundColor = ConsoleColor.Red;</div><div class="line">  Console.ForegroundColor = ConsoleColor.White;</div><div class="line">&#125;</div><div class="line">Console.WriteLine();</div><div class="line">Console.WriteLine(vm.ResultMessage);</div><div class="line">Console.WriteLine();</div></pre></td></tr></table></figure>
<h4 id="Presentation"><a href="#Presentation" class="headerlink" title="Presentation"></a>Presentation</h4><p>We’d like to show something friendly to the user when we get a response back from the interactor. To accomplish this, I created<a href="https://github.com/mmacneil/CleanArchitecture/blob/master/CleanArchitecture.ConsoleApp/Presentation/CourseRegistrationResponsePresenter.cs" target="_blank" rel="external">CourseRegistrationResponsePresenter</a>which has the single responsibility of converting a_CourseRegistrationResponseMessage_into a<em>CourseRegistrationResponseViewModel</em>. I’ll mention again that the response message and viewmodel are POCO objects containing no special types or data structures, just everyday collection and value types.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">class</div><div class="line">CourseRegistrationResponsePresenter</div><div class="line"></div><div class="line">&#123;</div><div class="line">  </div><div class="line">public</div><div class="line"> CourseRegistrationResponseViewModel </div><div class="line">Handle</div><div class="line">(</div><div class="line">CourseRegistrationResponseMessage responseMessage</div><div class="line">)</div><div class="line">  </div><div class="line">&#123;</div><div class="line">    </div><div class="line">if</div><div class="line"> (responseMessage.Success)</div><div class="line">    &#123;</div><div class="line">         </div><div class="line">return</div><div class="line">new</div><div class="line"> CourseRegistrationResponseViewModel(</div><div class="line">true</div><div class="line">,</div><div class="line">&quot;Course registration successful!&quot;</div><div class="line">);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">var</div><div class="line"> sb = </div><div class="line">new</div><div class="line"> StringBuilder();</div><div class="line">    sb.AppendLine(</div><div class="line">&quot;Failed to register course(s)&quot;</div><div class="line">);</div><div class="line">    </div><div class="line">foreach</div><div class="line"> (</div><div class="line">var</div><div class="line"> e </div><div class="line">in</div><div class="line"> responseMessage.Errors)</div><div class="line">    &#123;</div><div class="line">       sb.AppendLine(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">return</div><div class="line">new</div><div class="line"> CourseRegistrationResponseViewModel(</div><div class="line">false</div><div class="line">,sb.ToString());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Frameworks-and-Drivers"><a href="#Frameworks-and-Drivers" class="headerlink" title="Frameworks and Drivers"></a>Frameworks and Drivers</h3><p>This layer contains tools like databases or frameworks. By default, we don’t write very much code in this layer, but it’s important to clearly state the place and priority that those tools have in the architecture.</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>_Clean Architecture_provides a simple and effective framework for separating the different aspects of our system producing a highly decoupled, testable architecture.</p>
<p>Let’s recap some key benefits:</p>
<ul>
<li><p>Use Cases are encapsulated in one place meaning they are <strong>very visible and easier to understand</strong>. Business rules are not scattered all over the place making debugging and modification of the code painful.</p>
</li>
<li><p>The Dependency Rule and use of abstracted Gateways mean the core business logic in our Interactors and Entities is<strong>easily testable</strong>and not hampered by external things like databases and RESTful web services. The lack of 3rd party, feature-laden frameworks in our business logic also means thecode there is only focused on the important rules and policies of our application.</p>
</li>
<li><p>Flexibleand<strong>portable</strong>- because the Use Cases are completely decoupled from any UI or infrastructure it’s easy to do things like switch the database or web framework or even port to an entirely new platform. Our example runs in a console app but it could just as easily work on the web, desktop or a phone.</p>
</li>
</ul>
<p>Like most design decisions there are tradeoffs to be made when considering Clean Architecture. For the benefits I highlighted there are also a few disadvantages:</p>
<ul>
<li><p>Your team’s ability to ramp up and effectively apply Clean Architecture. There’s nothing radically complex in here but there certainly is a learning curve and time required to adapt to any new design or architectural style.</p>
</li>
<li><p>Applying Clean Architecture adds some bloat in the form of many separate classes for all the Presenters, Use Case Request/Response dtos, Use Case Interactors, Entities, Gateways etc plus all the test cases :). Not a huge deal but a valid knock on the impact of this approach to the size of your project.</p>
</li>
</ul>
<p>I hope this guide has provided some insight on how Clean Architecture can improve your software design and prevent many of the common pitfalls that hinder projects. Like any pattern, it takes a little familiarity with the concepts and principles before they can be effectively applied. A good exercise to start might be to think of some use cases near and dear to you currently - can you map them out mentally using Clean Architecture? Do you have a sense of the Entities, what the Use Case Interactor might look like, what data needs to flow back and forth in the request and response messages? Running your use cases through these questions can help you get started in modeling them using Clean Architecture.</p>
<p>Thanks for reading!</p>
<p><a href="https://github.com/mmacneil/CleanArchitecture/" target="_blank" rel="external">source code</a></p>
<p>Get notified on new posts</p>
<p>Straight from me, no spam, no bullshit. Frequent, helpful, email-only content.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/YBj6ZvE" target="_blank" rel="external">https://fullstackmark.com/post/11/better-software-design-with-clean-architecture</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/vqIfaeY.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Have you ever produced code that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;was bug laden&lt;/li&gt;
&lt;li&gt;w
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular 4 News Roundup June</title>
    <link href="https://gmagon.com/blog/2017/07/03/angular-4-news-roundup-june/"/>
    <id>https://gmagon.com/blog/2017/07/03/angular-4-news-roundup-june/</id>
    <published>2017-07-03T00:00:00.000Z</published>
    <updated>2017-07-03T10:07:06.808Z</updated>
    
    <content type="html"><![CDATA[<p>WRITTEN BY<a href="https://twitter.com/jsdiaries" target="_blank" rel="external">GARETH DUNNE @JSDIARIES</a></p>
<p>ng-June</p>
<p>June has come and gone and it has brought with it a steady month of Angular 4 news. There is a chance that you could have missed a change to key features or components so I’ve listed some of the main snippets of news that may have passed you by.</p>
<p>Although there isn’t much reading material specifically for<strong>Angular 4</strong>I recommend having a look at<strong>ng-book: The Complete Guide to Angular 4</strong><a href="http://geni.us/LCTQUAa" target="_blank" rel="external">here</a>.</p>
<p>Its updated with Angular 4 practices and is one of the few books doing so.</p>
<p>Angular 4.2</p>
<p>The most notable piece of Angular news this month is the release of<strong>Angular 4.2</strong>. This is a small update and will not break your current Angular projects via Semantic Versioning which I covered in a previous posthere.</p>
<p>All changes pertaining to the release are mentioned on the official blog here. So what are main highlights we should take our of this update?</p>
<p>Well, the changes to allow the creation of reusable animations using the<code>animation()</code>function enables our animations to become more modular.</p>
<p>I’ve listed a very similar example as the docs here for reference.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var fadeAnimation = animation([</div><div class="line">  style(&#123; </div><div class="line">opacity:</div><div class="line">&apos;&#123;&#123; start &#125;&#125;&apos;</div><div class="line"> &#125;),</div><div class="line">  animate(</div><div class="line">&apos;&#123;&#123; time &#125;&#125;&apos;</div><div class="line">,</div><div class="line">    style(&#123; </div><div class="line">opacity:</div><div class="line">&apos;&#123;&#123; end &#125;&#125;&apos;</div><div class="line">))</div><div class="line">], &#123; </div><div class="line">params:</div><div class="line"> &#123; </div><div class="line">time:</div><div class="line">&apos;1000ms&apos;</div><div class="line">, </div><div class="line">start:</div><div class="line">0</div><div class="line">, </div><div class="line">end:</div><div class="line">1</div><div class="line"> &#125;&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">useAnimation</div><div class="line">(fadeAnimation, &#123;</div><div class="line">  </div><div class="line">params</div><div class="line">: &#123;</div><div class="line">    </div><div class="line">time</div><div class="line">: </div><div class="line">&apos;2s&apos;</div><div class="line">,</div><div class="line">    </div><div class="line">start</div><div class="line">: </div><div class="line">1</div><div class="line">,</div><div class="line">    </div><div class="line">end</div><div class="line">: </div><div class="line">0</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>As you can see we assign our animations to a variable, specify its animation properties and then invoke it using the<code>useAnimation</code>function</p>
<p>Typescript 2.4</p>
<p>Typescript has also updated to a new release, bringing with it dynamic import expressions as well as Safer callback parameter checking. There could be few posts written about these changes so I’ll let the official blog post do the talking<a href="https://blogs.msdn.microsoft.com/typescript/2017/06/12/announcing-typescript-2-4-rc/" target="_blank" rel="external">here</a>.</p>
<p>I’ll just note that the dynamic imports feature in particular is a fantastic addition in this new release. It allows an even deeper layer of lazy loading and enables Webpack to split your bundles even further to only load a particular asset required in a function.</p>
<p>Angular IO</p>
<p><img src="http://img0.tuicool.com/Ar6RRbB.png!web" alt=""></p>
<p>angularIO</p>
<p>In order to coincide with Angular 4 features and benefits, the official<a href="https://angular.io/" target="_blank" rel="external">angular.io</a>website has now been converted to a full scale web application. It is now much faster and has increased its performance significantly.</p>
<p>There is also a satisfying element of practice what you preach and the Angular team have clearly rebuilt the website from the ground up with performance in mind.</p>
<p>It may seems like a minor detail but searching through the documentation has now become a better user experience which I’m sure is appreciated throughout the Angular community especially for those browsing on mobile devices.</p>
<p>These were the main notable Angular events and features this month. The framework is progressively evolving every month and if theres enough newsworthy item in July I’ll be sure to do a similar roundup.</p>
<p>Still looking to upgrade your AngularJS app to Angular 2? Check out this tutorial by Toptal<a href="https://www.toptal.com/angular-js/angular-2-upgrading-from-1-5" target="_blank" rel="external">here</a>.</p>
<p>Source: <a href="http://www.tuicool.com/articles/hit/JNZ3qeb" target="_blank" rel="external">http://jsdiaries.com/2017/07/03/angular-4-news-roundup-june/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WRITTEN BY&lt;a href=&quot;https://twitter.com/jsdiaries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GARETH DUNNE @JSDIARIES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ng-June&lt;/p&gt;
&lt;p&gt;June h
    
    </summary>
    
    
  </entry>
  
</feed>
